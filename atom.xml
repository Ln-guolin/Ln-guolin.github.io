<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>茶水栈</title>
  
  
  <link href="https://32e.co/atom.xml" rel="self"/>
  
  <link href="https://32e.co/"/>
  <updated>2021-01-09T08:08:27.870Z</updated>
  <id>https://32e.co/</id>
  
  <author>
    <name>guolin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python-使用PIL批量压缩图片</title>
    <link href="https://32e.co/2021/01/09/py-image-compres/"/>
    <id>https://32e.co/2021/01/09/py-image-compres/</id>
    <published>2021-01-09T05:33:25.000Z</published>
    <updated>2021-01-09T08:08:27.870Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;今天迁移文件，需要对大量的图片进行压缩，用PS一张一张的处理效率特别低，而在网上的在线工具批量处理几乎都是收费的，所以干脆用python脚本来处理，一劳永逸，以后也方便自己使用。</p><h4 id="安装PIL图像处理库"><a href="#安装PIL图像处理库" class="headerlink" title="安装PIL图像处理库"></a>安装PIL图像处理库</h4><p><code>PIL</code>是一个<code>Python</code>图像处理库，<code>Pillow</code>是<code>PIL</code>的一个很友好的分支，所以，我们可以通过安装<code>Pillow</code>来使用<code>PIL</code>。文档：<a href="https://pillow-cn.readthedocs.io/zh_CN/latest/index.html">pillow官网</a></p><p>我使用的是mac电脑，以下命令在mac上执行。</p><p>1，安装pip工具，如果已经安装，跳过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure><p>2，安装Pillow，借助pip工具安装起来也很简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure><h4 id="压缩代码示例"><a href="#压缩代码示例" class="headerlink" title="压缩代码示例"></a>压缩代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#!coding=utf-8</span></span><br><span class="line"><span class="comment">#author=guolin</span></span><br><span class="line"><span class="comment">#依赖：pip install Pillow</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尺寸比例</span></span><br><span class="line">size_ratio = <span class="number">0.3</span></span><br><span class="line"><span class="comment"># 压缩质量</span></span><br><span class="line">quality = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件夹压缩</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">batch_compress</span>(<span class="params">srcPath, distPath</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历文件夹</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(srcPath):</span><br><span class="line">        <span class="comment"># 目录验证</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(distPath):</span><br><span class="line">            os.makedirs(distPath)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接完整的文件或文件夹路径</span></span><br><span class="line">        srcFile = os.path.join(srcPath, filename)</span><br><span class="line">        distFile = os.path.join(distPath, filename)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果是文件 就调用压缩</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(srcFile):</span><br><span class="line">            <span class="keyword">if</span>(is_image(srcFile)):</span><br><span class="line">                <span class="comment"># 执行压缩操作</span></span><br><span class="line">                compression(srcFile,distFile)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span> (distFile + <span class="string">&quot; 文件不是图片，跳过！&quot;</span>)</span><br><span class="line">        <span class="comment"># 如果是文件夹 就继续递归</span></span><br><span class="line">        <span class="keyword">elif</span> os.path.isdir(srcFile):</span><br><span class="line">            batch_compress(srcFile, distFile)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件是否为图片判断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_image</span>(<span class="params">srcFile</span>):</span></span><br><span class="line">    <span class="keyword">if</span> (srcFile.lower().endswith((<span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.dib&#x27;</span>,<span class="string">&#x27;.gif&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.jpeg&#x27;</span>, <span class="string">&#x27;.pbm&#x27;</span>, <span class="string">&#x27;.pgm&#x27;</span>, <span class="string">&#x27;.ppm&#x27;</span>, <span class="string">&#x27;.tif&#x27;</span>, <span class="string">&#x27;.tiff&#x27;</span>))):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩图片并保存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compression</span>(<span class="params">srcFile,distFile</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 读取原图</span></span><br><span class="line">        srcImg = Image.<span class="built_in">open</span>(srcFile)</span><br><span class="line">        w, h = srcImg.size</span><br><span class="line">        <span class="comment"># 重新设置图片尺寸和选项，Image.ANTIALIAS：平滑抗锯齿</span></span><br><span class="line">        distImg = srcImg.resize((<span class="built_in">int</span>(w * size_ratio), <span class="built_in">int</span>(h * size_ratio)), Image.ANTIALIAS)</span><br><span class="line">        <span class="comment"># 保存为新图</span></span><br><span class="line">        distImg.save(distFile, quality=quality)</span><br><span class="line">        <span class="built_in">print</span> (distFile + <span class="string">&quot; 压缩成功！&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span> (distFile + <span class="string">&quot; 压缩失败！异常信息：&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;=================开始执行=================&quot;</span>)</span><br><span class="line">    <span class="comment"># 指定图片目录以及压缩后的图片目录</span></span><br><span class="line">    batch_compress(<span class="string">&quot;/Users/mac/Downloads/images&quot;</span>, <span class="string">&quot;/Users/mac/Downloads/images/dist&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;=================执行结束=================&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天迁移文件，需要对大量的图片进行压缩，用PS一张一张的处理效率特别低，而在网上的在线工具批</summary>
      
    
    
    
    <category term="python" scheme="https://32e.co/categories/python/"/>
    
    
    <category term="压缩图片" scheme="https://32e.co/tags/%E5%8E%8B%E7%BC%A9%E5%9B%BE%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署SkyWalking，以及Java项目集成</title>
    <link href="https://32e.co/2020/10/01/docker_install_skywalking/"/>
    <id>https://32e.co/2020/10/01/docker_install_skywalking/</id>
    <published>2020-10-01T01:00:23.000Z</published>
    <updated>2020-10-13T16:45:55.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>SkyWalking是一个开源的APM(应用程序性能监视器)系统，专为微服务、云原生和基于容器的体系结构而设计。<br>功能包括对Cloud Native体系结构中的分布式系统的监视，跟踪，诊断，报警等，具体功能明细参见<a href="http://skywalking.apache.org/">官网</a>。</p><h4 id="部署skywalking"><a href="#部署skywalking" class="headerlink" title="部署skywalking"></a>部署skywalking</h4><p>本文使用docker-compose的方式进行的部署，官网默认的docker示例是es数据库，es占用内存大，示例机器内存不足，我们直接使用自带的h2数据库来保存skywalking产生的数据。</p><p>docker-compose.yml：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.8&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">skywalking-oap:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-oap-server:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-oap</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">11800</span><span class="string">:11800</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">12800</span><span class="string">:12800</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD-SHELL&quot;</span>, <span class="string">&quot;/skywalking/bin/swctl&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">30s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">      <span class="attr">start_period:</span> <span class="string">40s</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">JAVA_OPTS:</span> <span class="string">&quot;-Xms512m -Xmx512m&quot;</span></span><br><span class="line">  <span class="attr">skywalking-ui:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">apache/skywalking-ui:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">skywalking-ui</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">skywalking-oap</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3380</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">SW_OAP_ADDRESS:</span> <span class="string">skywalking-oap:12800</span></span><br></pre></td></tr></table></figure><p>执行docker-compose命令，运行skywalking：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h4 id="下载skywalking-agent-jar"><a href="#下载skywalking-agent-jar" class="headerlink" title="下载skywalking-agent.jar"></a>下载skywalking-agent.jar</h4><p>下载地址：<a href="http://skywalking.apache.org/downloads/">http://skywalking.apache.org/downloads/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/pro-mall/</span><br><span class="line"><span class="built_in">cd</span> /home/pro-mall/</span><br><span class="line">wget https://mirror.bit.edu.cn/apache/skywalking/8.1.0/apache-skywalking-apm-8.1.0.tar.gz</span><br><span class="line">tar -zxvf apache-skywalking-apm-8.1.0.tar.gz </span><br><span class="line"></span><br><span class="line"><span class="comment"># skywalking-agent.jar文件完整地址</span></span><br><span class="line">/home/pro-mall/apache-skywalking-apm-bin/agent/skywalking-agent.jar</span><br><span class="line"><span class="comment"># agent参数介绍</span></span><br><span class="line">/home/pro-mall/apache-skywalking-apm-bin/agent/config/agent.config</span><br></pre></td></tr></table></figure><h4 id="项目使用"><a href="#项目使用" class="headerlink" title="项目使用"></a>项目使用</h4><p>以agent的方式启动，对代码没有侵入性，直接在启动命令上指定javaagent即可。</p><p>启动命令javaagent参数添加：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/home/pro-mall/apache-skywalking-apm-bin/agent/skywalking-agent.jar -DSW_AGENT_COLLECTOR_BACKEND_SERVICES=127.0.0.1:11800 -DSW_AGENT_NAME=pro-mall -jar xxxxx</span><br></pre></td></tr></table></figure><p>启动程序后，登录skywalking查看监控情况：<a href="http://localhost:3380/">http://localhost:3380</a></p><p>监控面板：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/skywalking/sk1.png" alt="监控面板"></p><p>调用链路：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/skywalking/sk2.png" alt="调用链路"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;SkyWalking是一个开源的APM(应用程序性能监视器)系统，专为微服务、云原生和基于容器的体系结构而设计。&lt;br&gt;功能包括对Cloud</summary>
      
    
    
    
    <category term="docker" scheme="https://32e.co/categories/docker/"/>
    
    <category term="java" scheme="https://32e.co/categories/java/"/>
    
    
    <category term="SkyWalking" scheme="https://32e.co/tags/SkyWalking/"/>
    
    <category term="监控" scheme="https://32e.co/tags/%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>代码生成工具(mybatis-plus-generator)</title>
    <link href="https://32e.co/2020/09/18/mybatis-plus-generator/"/>
    <id>https://32e.co/2020/09/18/mybatis-plus-generator/</id>
    <published>2020-09-18T09:10:33.000Z</published>
    <updated>2020-09-21T09:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;代码生成器，对于我们提升开发效率还是非常有价值的，快速生成代码和避免手误操作，能给我们减少了很多麻烦，又多了一点摸鱼的时间[偷笑]。<br>&nbsp;&nbsp;&nbsp;&nbsp;以前我用的比较多的是easy code，但是需要安装插件，配置模版，所以多少还是有些不方便。<br>&nbsp;&nbsp;&nbsp;&nbsp;自从项目改用mybatis-plus后，mybatis-plus-generator就成了它的替代品，很方便，也很灵活，个人推荐使用。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;下面我们使用一个Springboot多module的项目来做下演示。</p><h4 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h4><h5 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h5><p>下面的tree图，是我们本次演示的项目module和package结构，也是我们生成代码后的想要的效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">pro-mall</span><br><span class="line">├── pom.xml</span><br><span class="line">├── application</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── common</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── mapper</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src.main</span><br><span class="line">│           ├── java</span><br><span class="line">│           │   └── cn.soilove.expro</span><br><span class="line">│           │               ├── mapper</span><br><span class="line">│           │               │   └── user</span><br><span class="line">│           │               │       └── UserMapper.java</span><br><span class="line">│           │               └── model</span><br><span class="line">│           │                   └── user</span><br><span class="line">│           │                       └── User.java</span><br><span class="line">│           └── resources</span><br><span class="line">│               └── mapper</span><br><span class="line">│                   └── user</span><br><span class="line">│                       └── UserMapper.xml</span><br><span class="line">├── service</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src.main</span><br><span class="line">│           └── java</span><br><span class="line">│               └── cn.soilove.expro</span><br><span class="line">│                           └── service</span><br><span class="line">│                               └── user</span><br><span class="line">│                                   ├── UserService.java</span><br><span class="line">│                                   └── impl</span><br><span class="line">│                                       └── UserServiceImpl.java</span><br><span class="line">├── web-admin</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">├── web-api</span><br><span class="line">│   ├── pom.xml</span><br><span class="line">│   └── src</span><br><span class="line">└── web-open-api</span><br><span class="line">    ├── pom.xml</span><br><span class="line">    └── src</span><br></pre></td></tr></table></figure><h5 id="引入POM依赖"><a href="#引入POM依赖" class="headerlink" title="引入POM依赖"></a>引入POM依赖</h5><p>第一步，除开mybatis-plus正常引用的包，我们还需要引入generator和velocity，来提供代码和模版的生成。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;velocity.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写工具类"><a href="#编写工具类" class="headerlink" title="编写工具类"></a>编写工具类</h5><p>然后，编写工具类，直接运行生成想要的代码。下面的java工具类是通过官网代码示例改造而来，支持多module指定。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.soilove.expro.framework.generator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.toolkit.StringPool;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.InjectionConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.LikeTable;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableInfo;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> com.google.common.collect.Maps;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * MyBatisPlusGenerator 代码生成工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Chen GuoLin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-02-11 11:57</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisPlusGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库链接信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">mysql</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String url = <span class="string">&quot;jdbc:mysql://k.32e.co:3306/ex-pro?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;useSSL=false&amp;zeroDateTimeBehavior=convertToNull&amp;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String driver_name = <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String user = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String password = <span class="string">&quot;xxxxx&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * module子模块相对路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">module_path</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * service类所在module</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String service = <span class="string">&quot;/service&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 表实体对象所在module</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String entity = <span class="string">&quot;/mapper&quot;</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * mapper接口和xml文件所在module</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String mapper = <span class="string">&quot;/mapper&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目java包路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String base_path = <span class="string">&quot;cn.soilove.expro&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类的作者注释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String author = <span class="string">&quot;Chen GuoLin&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String bizName = scanner(<span class="string">&quot;业务名称&quot;</span>);</span><br><span class="line">        String[] tableNames = scanner(<span class="string">&quot;表名(多个英文逗号分隔)&quot;</span>).split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码生成器</span></span><br><span class="line">        AutoGenerator autoGenerator = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line">        autoGenerator.setGlobalConfig(buildGlobalConfig());</span><br><span class="line">        autoGenerator.setDataSource(buildDataSourceConfig());</span><br><span class="line">        autoGenerator.setPackageInfo(buildPackageConfig(projectPath,bizName));</span><br><span class="line">        autoGenerator.setCfg(buildInjectionConfig(projectPath, bizName));</span><br><span class="line">        autoGenerator.setTemplate(buildTemplateConfig());</span><br><span class="line">        autoGenerator.setStrategy(buildStrategyConfig(tableNames));</span><br><span class="line">        autoGenerator.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取控制台内容信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">scanner</span><span class="params">(String tip)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println((<span class="string">&quot;请输入&quot;</span> + tip + <span class="string">&quot;：&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">            String next = scanner.next();</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotEmpty(next)) &#123;</span><br><span class="line">                <span class="keyword">return</span> next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MybatisPlusException(<span class="string">&quot;请输入正确的&quot;</span> + tip + <span class="string">&quot;！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> com.baomidou.mybatisplus.generator.config.<span class="function">GlobalConfig <span class="title">buildGlobalConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        com.baomidou.mybatisplus.generator.config.GlobalConfig globalConfig = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        globalConfig.setAuthor(author);</span><br><span class="line">        globalConfig.setOpen(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setSwagger2(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setBaseResultMap(<span class="keyword">false</span>);</span><br><span class="line">        globalConfig.setFileOverride(<span class="keyword">true</span>);</span><br><span class="line">        globalConfig.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        globalConfig.setEntityName(<span class="string">&quot;%s&quot;</span>);</span><br><span class="line">        globalConfig.setMapperName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setXmlName(<span class="string">&quot;%sMapper&quot;</span>);</span><br><span class="line">        globalConfig.setServiceName(<span class="string">&quot;%sService&quot;</span>);</span><br><span class="line">        globalConfig.setServiceImplName(<span class="string">&quot;%sServiceImpl&quot;</span>);</span><br><span class="line">        globalConfig.setControllerName(<span class="string">&quot;%sController&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> globalConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据源配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> DataSourceConfig <span class="title">buildDataSourceConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSourceConfig dataSourceConfig = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dataSourceConfig.setUrl(mysql.url);</span><br><span class="line">        dataSourceConfig.setDriverName(mysql.driver_name);</span><br><span class="line">        dataSourceConfig.setUsername(mysql.user);</span><br><span class="line">        dataSourceConfig.setPassword(mysql.password);</span><br><span class="line">        <span class="keyword">return</span> dataSourceConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PackageConfig <span class="title">buildPackageConfig</span><span class="params">(String projectPath,String bizName)</span> </span>&#123;</span><br><span class="line">        PackageConfig packageConfig = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        packageConfig.setModuleName(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        packageConfig.setParent(base_path);</span><br><span class="line">        packageConfig.setEntity(<span class="string">&quot;model&quot;</span> + (StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        packageConfig.setService(<span class="string">&quot;service&quot;</span>+(StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        packageConfig.setServiceImpl(<span class="string">&quot;service&quot;</span>+(StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>)+<span class="string">&quot;.impl&quot;</span>);</span><br><span class="line">        packageConfig.setMapper(<span class="string">&quot;mapper&quot;</span>+(StringUtils.isNotBlank(bizName) ? <span class="string">&quot;.&quot;</span> + bizName : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; pathInfo = Maps.newHashMap();</span><br><span class="line">        pathInfo.put(ConstVal.ENTITY_PATH, calcPath4Entity(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.MAPPER_PATH, calcPath4Mapper(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.XML_PATH, calcPath4Xml(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.SERVICE_PATH, calcPath4Service(projectPath,bizName));</span><br><span class="line">        pathInfo.put(ConstVal.SERVICE_IMPL_PATH, calcPath4ServiceImpl(projectPath,bizName));</span><br><span class="line">        packageConfig.setPathInfo(pathInfo);</span><br><span class="line">        <span class="keyword">return</span> packageConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - model.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Entity</span><span class="params">(String projectPath,String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.entity + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/model/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - mapper.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Mapper</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.mapper + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/mapper/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - service.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Service</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.service + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/service/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - serviceImpl.java</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4ServiceImpl</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.service + <span class="string">&quot;/src/main/java/&quot;</span> + base_path.replaceAll(<span class="string">&quot;\\.&quot;</span>,<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;/service/&quot;</span> + bizName + <span class="string">&quot;/impl/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置路径 - model.xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">calcPath4Xml</span><span class="params">(String projectPath, String bizName)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  projectPath + module_path.mapper + <span class="string">&quot;/src/main/resources/mapper/&quot;</span> + bizName + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模板配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TemplateConfig <span class="title">buildTemplateConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TemplateConfig templateConfig = <span class="keyword">new</span> TemplateConfig();</span><br><span class="line">        <span class="comment">//可以对controller、service、entity模板进行配置</span></span><br><span class="line">        <span class="comment">//mapper.xml模板需单独配置</span></span><br><span class="line">        <span class="keyword">return</span> templateConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 策略配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableNames</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> StrategyConfig <span class="title">buildStrategyConfig</span><span class="params">(String[] tableNames)</span> </span>&#123;</span><br><span class="line">        StrategyConfig strategyConfig = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategyConfig.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategyConfig.setEntityLombokModel(<span class="keyword">true</span>);</span><br><span class="line">        strategyConfig.setRestControllerStyle(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 当表名中带*号时可以启用通配符模式</span></span><br><span class="line">        <span class="keyword">if</span> (tableNames.length == <span class="number">1</span> &amp;&amp; tableNames[<span class="number">0</span>].contains(<span class="string">&quot;*&quot;</span>)) &#123;</span><br><span class="line">            String[] likeStr = tableNames[<span class="number">0</span>].split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            String likePrefix = likeStr[<span class="number">0</span>] + <span class="string">&quot;_&quot;</span>;</span><br><span class="line">            strategyConfig.setLikeTable(<span class="keyword">new</span> LikeTable(likePrefix));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strategyConfig.setInclude(tableNames);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自动填充时间字段</span></span><br><span class="line">        List&lt;TableFill&gt; tableFillList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        tableFillList.add(<span class="keyword">new</span> TableFill(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT));</span><br><span class="line">        tableFillList.add(<span class="keyword">new</span> TableFill(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE));</span><br><span class="line">        strategyConfig.setTableFillList(tableFillList);</span><br><span class="line">        <span class="keyword">return</span> strategyConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> projectPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bizName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> InjectionConfig <span class="title">buildInjectionConfig</span><span class="params">(String projectPath, String bizName)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 自定义配置</span></span><br><span class="line">        InjectionConfig injectionConfig = <span class="keyword">new</span> InjectionConfig() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 可用于自定义属性</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 模板引擎是Velocity</span></span><br><span class="line">        String templatePath = <span class="string">&quot;/templates/mapper.xml.vm&quot;</span>;</span><br><span class="line">        <span class="comment">// 自定义输出配置</span></span><br><span class="line">        List&lt;FileOutConfig&gt; focList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">// 自定义配置会被优先输出</span></span><br><span class="line">        focList.add(<span class="keyword">new</span> FileOutConfig(templatePath) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">outputFile</span><span class="params">(TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！</span></span><br><span class="line">                <span class="keyword">return</span> projectPath + <span class="string">&quot;mapper/src/main/resources/mapper/&quot;</span> + bizName</span><br><span class="line">                        + <span class="string">&quot;/&quot;</span> + tableInfo.getEntityName() + <span class="string">&quot;Mapper&quot;</span> + StringPool.DOT_XML;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        injectionConfig.setFileOutConfigList(focList);</span><br><span class="line">        <span class="keyword">return</span> injectionConfig;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后，我们直接运行这个java类，在控制台输入 业务模块名称 和 表名，点击回车即可生成。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;代码生成器，对于我们提升开发效率还是非常有价值的，快速生成代码和避免手误操作，能给我们减少了</summary>
      
    
    
    
    <category term="java" scheme="https://32e.co/categories/java/"/>
    
    
    <category term="mybatis-plus" scheme="https://32e.co/tags/mybatis-plus/"/>
    
    <category term="代码生成" scheme="https://32e.co/tags/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
    
    <category term="mybatis-plus-generator" scheme="https://32e.co/tags/mybatis-plus-generator/"/>
    
  </entry>
  
  <entry>
    <title>开源项目申请JetBrains全家桶</title>
    <link href="https://32e.co/2020/09/16/open-source-license-JetBrains-request/"/>
    <id>https://32e.co/2020/09/16/open-source-license-JetBrains-request/</id>
    <published>2020-09-16T01:58:53.000Z</published>
    <updated>2020-11-06T11:08:43.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;作为码农，一款优秀的开发工具必不可少，但往往优秀的工具都是收费的[偷笑]，不过破解方法也是层出不穷，只要你耐心去找，也是能用上的，不过想及时跟进最新版本，用上新功能，那还是得走正版这条路。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;我们通过本文来聊一聊如何通过开源项目免费申请正版工具的许可，有效期1年，到期后，如果项目仍然符合申请条件可以申请续期。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;不得不给JetBrains公司点个赞，是个有态度的公司[点赞]，这是对开源社区最强有力的支持。</p><p>申请要求：一个正在维护开源项目的拥有者或核心提交，非商业用途，并积极维护3个月以上，具体要求参见：<a href="https://www.jetbrains.com/community/opensource/#support">Free License Programs</a></p><p>申请地址：<a href="https://www.jetbrains.com/shop/eform/opensource?product=ALL">https://www.jetbrains.com/shop/eform/opensource?product=ALL</a></p><h4 id="填写申请"><a href="#填写申请" class="headerlink" title="填写申请"></a>填写申请</h4><p>本文使用的开源项目：<a href="https://github.com/Ln-guolin/spring-boot-starter-cache">https://github.com/Ln-guolin/spring-boot-starter-cache</a></p><p>很简单，在申请站点按照要求，填写项目信息即可，示例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/ci/open-source-license-JetBrains-request.jpeg" alt="申请示例"></p><p>提交完成后，你会收到一封邮件，告知你，他们将评估您的项目，审核时间可能需要1-2周，最后会通过邮件通知你。</p><h4 id="审核通过"><a href="#审核通过" class="headerlink" title="审核通过"></a>审核通过</h4><p>通过审核后，你会收到下面这封邮件，你可以通过此邮件中的链接或pdf，继续操作以获取许可。</p><p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/tongguo02.png" alt="审核通过"></p><h4 id="获取许可"><a href="#获取许可" class="headerlink" title="获取许可"></a>获取许可</h4><p>1，点击邮件中的 “Take me to my license(s)”，根据引导完成账号注册和确认。</p><p>2，访问<a href="https://account.jetbrains.com/licenses">https://account.jetbrains.com/licenses</a>查看发放的许可</p><p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/licenses.png" alt="许可"></p><p>3，下载许可文件</p><p>点击邮件中的 “Download activation code for offline usage” 下载许可</p><p>下载的是一个zip文件，解压后有1个2017.3之前的和2018.1及其以后版本的，按需使用即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NXBW9FTR6J-root@soilove.cn.zip</span><br><span class="line">├── NXBW9FTR6J-root@soilove.cn-for 2017.3 or earlier.txt</span><br><span class="line">└── NXBW9FTR6J-root@soilove.cn-for 2018.1 or later.txt</span><br></pre></td></tr></table></figure><h4 id="使用许可"><a href="#使用许可" class="headerlink" title="使用许可"></a>使用许可</h4><p>我用产品是“IntelliJ IDEA”，在他们官网下载目前最新的版本2020.2，完成安装，然后在激活的地方，把发放的许可贴进去即可。</p><p>激活的时候选择：Activation code</p><p align="center">    <a href="#"><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/new01.png" width="450px"></a></p><p>激活后的效果：</p><p align="center">    <a href="#"><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/jetbrains/new02.png" width="450px"></a></p><p>其他-插件地址：<br><a href="https://plugins.jetbrains.com/">https://plugins.jetbrains.com/</a></p><h4 id="推广logo设置"><a href="#推广logo设置" class="headerlink" title="推广logo设置"></a>推广logo设置</h4><p>点击邮件中的“<a href="https://www.jetbrains.com/company/brand/logos/">our Logo</a>”获取avg图标，将其设置到github README.md，帮助jetbrains推广他们的产品。</p><h4 id="问题处理-闪退"><a href="#问题处理-闪退" class="headerlink" title="问题处理-闪退"></a>问题处理-闪退</h4><p>我之前安装的版本是mac“2019.2”，安装了一堆插件，突然升级到“2020.2”出现了闪退问题，按照下面的方式进行排查解决。</p><p><strong>1，命令行启动，查看日志</strong></p><p>路径：应用程序 &gt;&gt; IntelliJ IDEA.app &gt;&gt; 右键 显示包内容 &gt;&gt; Contents &gt;&gt; MacOS</p><p>点击可执行文件：idea</p><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Last login: Sun Sep 27 23:37:00 on ttys001</span><br><span class="line">chenguolindeMacBook-Pro:~ chenguolin$ &#x2F;Applications&#x2F;IntelliJ\ IDEA.app&#x2F;Contents&#x2F;MacOS&#x2F;idea ; exit;</span><br><span class="line">2020-09-27 23:37:09.131 idea[30950:931173] allVms required 1.8*,1.8+</span><br><span class="line">2020-09-27 23:37:09.133 idea[30950:931176] Current Directory: &#x2F;Users&#x2F;chenguolin</span><br><span class="line">2020-09-27 23:37:09.134 idea[30950:931176] Value of IDEA_VM_OPTIONS is (null)</span><br><span class="line">2020-09-27 23:37:09.134 idea[30950:931176] Processing VMOptions file at &#x2F;Users&#x2F;chenguolin&#x2F;Library&#x2F;Application Support&#x2F;JetBrains&#x2F;IntelliJIdea2020.2&#x2F;idea.vmoptions</span><br><span class="line">2020-09-27 23:37:09.134 idea[30950:931176] Done</span><br><span class="line">OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.</span><br><span class="line">Error opening zip file or JAR manifest missing : ..&#x2F;bin&#x2F;jetbrains-agent.jar</span><br><span class="line">Error occurred during initialization of VM</span><br><span class="line">agent library failed to init: instrument</span><br><span class="line">logout</span><br><span class="line">Saving session...</span><br><span class="line">...copying shared history...</span><br><span class="line">...saving history...truncating history files...</span><br><span class="line">...completed.</span><br><span class="line"></span><br><span class="line">[进程已完成]</span><br></pre></td></tr></table></figure><p><strong>2，解决问题</strong></p><p>从控制台输出的内容看，好像是设置有些问题，我直接将JetBrains的相关设置全部清空，然后重新启动即可。</p><p>删除下面2个目录下所有与 jetbrains 和 旗下工具 相关的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;Users&#x2F;chenguolin&#x2F;Library&#x2F;Application Support</span><br><span class="line">&#x2F;Users&#x2F;chenguolin&#x2F;Library&#x2F;Preferences</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;作为码农，一款优秀的开发工具必不可少，但往往优秀的工具都是收费的[偷笑]，不过破解方法也是层</summary>
      
    
    
    
    <category term="工具" scheme="https://32e.co/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JetBrains" scheme="https://32e.co/tags/JetBrains/"/>
    
    <category term="开源项目" scheme="https://32e.co/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Centos安装中文字体</title>
    <link href="https://32e.co/2020/09/15/linux-fonts/"/>
    <id>https://32e.co/2020/09/15/linux-fonts/</id>
    <published>2020-09-14T16:59:55.000Z</published>
    <updated>2020-09-17T09:28:52.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;我们使用的Centos系统，默认情况下是没有安装中文字体的，所以如果你在代码中使用Graphics2D绘制中文，那必然会因为系统缺少字体而导致出现乱码的情况。<br>&nbsp;&nbsp;&nbsp;&nbsp;所以我们需要在系统上安装对应的字体来解决这个问题，本文以宋体为例。</p><p>字体下载：</p><ul><li><a href="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/linux/simsun.ttc">点击下载宋体-字体文件simsun.ttc</a></li></ul><p>注：其他字体可以到网上搜索下载，或Windows系统的字体目录下拷贝（C:\Windows\Fonts）</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><h5 id="安装字体库和索引信息"><a href="#安装字体库和索引信息" class="headerlink" title="安装字体库和索引信息"></a>安装字体库和索引信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install fontconfig ttmkfdir mkfontscale</span><br></pre></td></tr></table></figure><h5 id="创建目录，上传字体文件"><a href="#创建目录，上传字体文件" class="headerlink" title="创建目录，上传字体文件"></a>创建目录，上传字体文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/share/fonts/chinese</span><br><span class="line"><span class="built_in">cd</span> /usr/share/fonts/chinese</span><br></pre></td></tr></table></figure><p>注：创建chinese文件夹，并上传字体文件到此目录</p><h5 id="生成字体库索引信息"><a href="#生成字体库索引信息" class="headerlink" title="生成字体库索引信息"></a>生成字体库索引信息</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br></pre></td></tr></table></figure><p>注：在路径/usr/share/fonts/chinese下执行上面的这两条命令</p><h5 id="更新字体缓存"><a href="#更新字体缓存" class="headerlink" title="更新字体缓存"></a>更新字体缓存</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-cache</span><br></pre></td></tr></table></figure><h5 id="查看字体安装情况"><a href="#查看字体安装情况" class="headerlink" title="查看字体安装情况"></a>查看字体安装情况</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fc-list :lang=zh</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我们使用的Centos系统，默认情况下是没有安装中文字体的，所以如果你在代码中使用Graph</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="字体" scheme="https://32e.co/tags/%E5%AD%97%E4%BD%93/"/>
    
  </entry>
  
  <entry>
    <title>搭建ELK日志服务和SpringBoot集成</title>
    <link href="https://32e.co/2020/09/08/elk-log-springboot/"/>
    <id>https://32e.co/2020/09/08/elk-log-springboot/</id>
    <published>2020-09-08T03:48:39.000Z</published>
    <updated>2020-11-14T16:38:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>一个完整软件系统，日志服务是必不可少的一环，定位问题，分析日志都需要它的帮助，现在市面上用的比较多的日志服务方案是ELK，我看看如何来搭建集成。</p><p>ELK代表：Elasticsearch、Logstash、Kibana<br>Elasticsearch - 实时全文搜索和分析引擎，提供搜集、分析、存储数据功能<br>Logstash - 用来搜集、分析、过滤日志的工具<br>Kibana - Web的图形界面，用于搜索、分析和可视化存储在 Elasticsearch指标中的日志数据</p><p>我们用个简单的架构来演示：ELK + SpringBoot</p><h4 id="ELK日志服务搭建"><a href="#ELK日志服务搭建" class="headerlink" title="ELK日志服务搭建"></a>ELK日志服务搭建</h4><p>这里我们采用的是docker的方式来进行的搭建，直接在github上找了一个开源项目docker-elk，快速简单的完成搭建。</p><h5 id="构建镜像运行容器"><a href="#构建镜像运行容器" class="headerlink" title="构建镜像运行容器"></a>构建镜像运行容器</h5><p>下面的命令直接就可以构建并运行elk：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;deviantony&#x2F;docker-elk.git</span><br><span class="line">cd docker-elk</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>注：因为仓库里的yml配置的是build命令。所以每次up -d都会重新构建镜像，因此，构建完成后，后续启动建议时间start命令。</p><p>或者也可以将yml的build命令修改为指定的image+版本，可以更好的管理容器版本，如项目中的docker-stack.yml文件示例。</p><p>启动完成后，浏览器打开：<a href="http://localhost:5601/">http://localhost:5601/</a> 即可访问kibana页面，默认账号/密码：elastic/changeme。</p><p>如果需要清理容器的持久数据，可以执行下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose down -v</span><br></pre></td></tr></table></figure><h5 id="调整核心配置"><a href="#调整核心配置" class="headerlink" title="调整核心配置"></a>调整核心配置</h5><p>这些设置是构建镜像的时候的一些默认设置，正常情况下，不需要更改，docker-compose端口映射和相关配置 足以满足我们的需求。</p><h6 id="ES配置"><a href="#ES配置" class="headerlink" title="ES配置"></a>ES配置</h6><p>在docker-compose.yml文件中，可指定内存大小、密码、以及模式等，如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ES_JAVA_OPTS:</span> <span class="string">&quot;-Xmx256m -Xms256m&quot;</span></span><br><span class="line">      <span class="attr">ELASTIC_PASSWORD:</span> <span class="string">changeme</span></span><br><span class="line">      <span class="comment"># Use single node discovery in order to disable production mode and avoid bootstrap checks</span></span><br><span class="line">      <span class="comment"># see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html</span></span><br><span class="line">      <span class="attr">discovery.type:</span> <span class="string">single-node</span></span><br></pre></td></tr></table></figure><h6 id="Logsstash配置"><a href="#Logsstash配置" class="headerlink" title="Logsstash配置"></a>Logsstash配置</h6><p>文件路径：./logstash/config/logstash.yml<br>配置内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Default Logstash configuration from Logstash base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/logstash/blob/master/docker/data/logstash/config/logstash-full.yml</span></span><br><span class="line"><span class="attr">http.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="attr">xpack.monitoring.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">xpack.monitoring.elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure><p>注：这里需指定es的认证密码、地址和端口</p><p>另外，Logsstash还有一个数据输入端口input设置：<br>文件路径：./logstash/pipeline/logstash.conf<br>配置内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">tcp &#123;</span><br><span class="line">port =&gt; 5000</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">output &#123;</span><br><span class="line">elasticsearch &#123;</span><br><span class="line">hosts =&gt; <span class="string">&quot;elasticsearch:9200&quot;</span></span><br><span class="line">user =&gt; <span class="string">&quot;elastic&quot;</span></span><br><span class="line">password =&gt; <span class="string">&quot;changeme&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Kibana配置"><a href="#Kibana配置" class="headerlink" title="Kibana配置"></a>Kibana配置</h6><p>文件路径：./kibana/config/kibana.yml<br>配置内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Default Kibana configuration from Kibana base image.</span></span><br><span class="line"><span class="comment">## https://github.com/elastic/kibana/blob/master/src/dev/build/tasks/os_packages/docker_generator/templates/kibana_yml.template.js</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">kibana</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [ <span class="string">&quot;http://elasticsearch:9200&quot;</span> ]</span><br><span class="line"><span class="attr">monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## X-Pack security credentials</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">elastic</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">changeme</span></span><br></pre></td></tr></table></figure><p>注：同样的，这里也需指定es的认证密码、地址和端口</p><h4 id="SpringBoot项目配置"><a href="#SpringBoot项目配置" class="headerlink" title="SpringBoot项目配置"></a>SpringBoot项目配置</h4><h5 id="pom文件配置"><a href="#pom文件配置" class="headerlink" title="pom文件配置"></a>pom文件配置</h5><p>引入logstash-logback-encoder，它负责链接logstash服务，推送程序日志：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">logstash.version</span>&gt;</span>6.4<span class="tag">&lt;/<span class="name">logstash.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.logstash.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logstash-logback-encoder<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logstash.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="logback-boot-xml配置"><a href="#logback-boot-xml配置" class="headerlink" title="logback-boot.xml配置"></a>logback-boot.xml配置</h5><p>修改项目的logback-boot.xml，配置logstash的日志追加器，因为此案例是在本地搭建的，所以logstash的地址使用的是127.0.0.1，端口是5000。</p><p>如果不清楚端口，可以通过查看docker-compose文件查看到 配置暴露在宿主机上的端口</p><p>logback-boot.xml配置示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,%i索引【从数字0开始递增】 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- appender是configuration的子节点，是负责写日志的组件。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ConsoleAppender：把日志输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d %p (%file:%line\)- %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 控制台也要使用UTF-8，不要使用GBK，否则会中文乱码 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- RollingFileAppender：滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 以下的大概意思是：1.先按日期存日志，日期变了，将前一天的日志文件名重命名为XXX%日期%索引，新的日志仍然是demo.log --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--             2.如果日期没有发生变化，但是当前日志的文件大小超过1KB时，对当前日志进行分割 重命名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;APILOG&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>log/api.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件名：log/api.2017-12-05.0.log --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>log/api.%d.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 每产生一个日志文件，该日志文件的保存期限为15天 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>15<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>  <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- maxFileSize:这是活动文件的大小，默认值是1MB，测试时可改成1KB看效果 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>1MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- pattern节点，用来设置日志的输入格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %d %p (%file:%line\)- %m%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 记录日志的编码:此处设置字符集 - --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;LOGSTASH&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.appender.LogstashTcpSocketAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- logstash地址，端口是logstash.conf input配置的端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">destination</span>&gt;</span>127.0.0.1:5000<span class="tag">&lt;/<span class="name">destination</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> <span class="attr">class</span>=<span class="string">&quot;net.logstash.logback.encoder.LogstashEncoder&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出日志级别, 级别依次为【从高到低】：FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;APILOG&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;LOGSTASH&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，我们启动项目，日志就能实时追加到搭建的服务中去了。</p><h4 id="Kibana仪表盘设置"><a href="#Kibana仪表盘设置" class="headerlink" title="Kibana仪表盘设置"></a>Kibana仪表盘设置</h4><p>1，索引设置：<br>路径：设置 &gt;&gt; Kibana &gt;&gt; Index Patterns &gt;&gt; Create index pattern</p><p>Step1:<br>索引信息，支持根据通配符设置，如：logstash-*</p><p>Step2:<br>选择按照时戳作为筛选字段：@timestamp</p><p>注：仪表盘的这些索引设置，需要我们先写入日志数据</p><p>2，然后，进入Discover仪表盘，然后INDEX PATTERN选择logstash-*，就能查看日志了，如：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/java/elk.png" alt="仪表盘"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;一个完整软件系统，日志服务是必不可少的一环，定位问题，分析日志都需要它的帮助，现在市面上用的比较多的日志服务方案是ELK，我看看如何来搭建集</summary>
      
    
    
    
    <category term="docker" scheme="https://32e.co/categories/docker/"/>
    
    <category term="java" scheme="https://32e.co/categories/java/"/>
    
    
    <category term="ELK日志" scheme="https://32e.co/tags/ELK%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>使用acme.sh管理https证书</title>
    <link href="https://32e.co/2020/07/17/shell-https-acme-sh/"/>
    <id>https://32e.co/2020/07/17/shell-https-acme-sh/</id>
    <published>2020-07-17T12:51:26.000Z</published>
    <updated>2020-07-18T13:33:10.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;最近在github上发现一个项目”acme.sh“，相当强大，它实现了 acme 协议, 可以从 letsencrypt 生成免费证书，并自动更新证书，解决了证书申请和更换的痛点。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;就这一点，就已经体现了这个项目的价值了，给作者赞一个。而我也是https证书申请替换的深度受害者，看到这个项目后，立刻着手实践了一把，别说，这效果还真不错。</p><p>github地址：<a href="https://github.com/acmesh-official/acme.sh">链接地址</a></p><h4 id="acme-sh安装"><a href="#acme-sh安装" class="headerlink" title="acme.sh安装"></a>acme.sh安装</h4><p>安装很容易，只需要一个简单的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br></pre></td></tr></table></figure><p>设置别名，方便后面直接调用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> acme.sh=~/.acme.sh/acme.sh</span><br></pre></td></tr></table></figure><p>安装完成后，会自动创建一个cronjob，每天 0:00 点自动检测所有的证书，如果快过期了，就会自动更新证书。我们可以通过下面的命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure><h4 id="nginx配置静态网页"><a href="#nginx配置静态网页" class="headerlink" title="nginx配置静态网页"></a>nginx配置静态网页</h4><p>1，创建nginx证书，指定需要生成证书的域名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --issue  -d u.32e.co   --nginx</span><br></pre></td></tr></table></figure><p>注：上面这个命令执行之前，需要先将nginx的域名配置好，否则会提示错误：“Can not find conf file for domain u.32e.co”，示例可参考文末“申请配置示例”</p><p>2，设置证书存放路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/cert/u.32e.co</span><br></pre></td></tr></table></figure><p>3，将生成的证书安装到指定路径，并设置自动更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acme.sh --install-cert -d u.32e.co \</span><br><span class="line">--key-file       /home/cert/u.32e.co/key.pem  \</span><br><span class="line">--fullchain-file /home/cert/u.32e.co/cert.pem \</span><br><span class="line">--reloadcmd     <span class="string">&quot;nginx -s reload&quot;</span></span><br></pre></td></tr></table></figure><p>注：这里文档倒是说要使用：“force-reload”，才能正常更新加载。不过貌似直接reload也能重新加载，实在不行甚至可以直接拼接命令：“nginx -s stop;nginx”</p><p>4，证书和自动更新已经设置好后，我们就开始配置ngix，开放443端口、设置证书路径和其他参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl http2; </span><br><span class="line">        server_name  u.32e.co;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果打开，则默认全部走https</span></span><br><span class="line">        <span class="comment">#ssl on;   </span></span><br><span class="line">        ssl_certificate   /home/cert/u.32e.co/cert.pem;</span><br><span class="line">        ssl_certificate_key  /home/cert/u.32e.co/key.pem;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">#ssl性能调优</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">        ssl_session_cache <span class="built_in">builtin</span>:1000 shared:SSL:10m;</span><br><span class="line">        ssl_stapling on;</span><br><span class="line">        ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启gzip压缩</span></span><br><span class="line">        gzip on;</span><br><span class="line">        <span class="comment"># 设置中文编码</span></span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /home/www_utils;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="nginx配置动态服务"><a href="#nginx配置动态服务" class="headerlink" title="nginx配置动态服务"></a>nginx配置动态服务</h4><p>1，我这里使用是java的springboot项目，端口：8080。创建证书的方法都是一样的，我们直接看nginx要如何配置的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">upstream server_pool&#123;</span><br><span class="line">server 127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl http2; </span><br><span class="line">        server_name  k.32e.co;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#如果打开，则默认全部走https</span></span><br><span class="line">        <span class="comment">#ssl on;   </span></span><br><span class="line">        ssl_certificate   /home/cert/k.32e.co/cert.pem;</span><br><span class="line">        ssl_certificate_key  /home/cert/k.32e.co/key.pem;</span><br><span class="line">   </span><br><span class="line">        <span class="comment">#ssl性能调优</span></span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;</span><br><span class="line">        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">        ssl_session_cache <span class="built_in">builtin</span>:1000 shared:SSL:10m;</span><br><span class="line">        ssl_stapling on;</span><br><span class="line">        ssl_stapling_verify on;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启gzip压缩</span></span><br><span class="line">        gzip on;</span><br><span class="line">        <span class="comment"># 设置中文编码</span></span><br><span class="line">        charset utf-8,gbk;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#缓冲区设置</span></span><br><span class="line">        client_max_body_size 100m;</span><br><span class="line">        client_body_buffer_size 2M;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">          proxy_set_header X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line">          proxy_max_temp_file_size 2048M;</span><br><span class="line">          proxy_connect_timeout 600;</span><br><span class="line">          proxy_read_timeout 600;</span><br><span class="line">          proxy_send_timeout 600;</span><br><span class="line"></span><br><span class="line">          proxy_buffering on;</span><br><span class="line">          proxy_buffer_size 4k;</span><br><span class="line">          proxy_buffers 8 1M;</span><br><span class="line">          proxy_busy_buffers_size 2M;</span><br><span class="line"></span><br><span class="line">          proxy_pass http://server_pool;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2，如此，就结束了，确实很简单，等到证书快过期的时候，脚本设置的定时任务会自动去更新证书，我们也就不用去关注了。</p><h4 id="申请配置示例"><a href="#申请配置示例" class="headerlink" title="申请配置示例"></a>申请配置示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  u.32e.co;</span><br><span class="line">        location &#x2F; &#123;</span><br><span class="line">            root   &#x2F;;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近在github上发现一个项目”acme.sh“，相当强大，它实现了 acme 协议, 可</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="https" scheme="https://32e.co/tags/https/"/>
    
    <category term="acme" scheme="https://32e.co/tags/acme/"/>
    
  </entry>
  
  <entry>
    <title>从WordPress迁移到Hexo小记</title>
    <link href="https://32e.co/2020/07/10/blog-wordpress-to-hexo/"/>
    <id>https://32e.co/2020/07/10/blog-wordpress-to-hexo/</id>
    <published>2020-07-10T13:00:18.000Z</published>
    <updated>2020-09-08T12:25:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>前段时间，用了好几年的ECS服务器又到了续费的时候了，说巧也挺巧，正值阿里云618大促，自己又换了手机号。</p><p>总算蹭上了一波新用户福利，感概了一下这几年续费的心酸，扎心肉痛。</p><p>趁此契机，在迁移服务器资源的同时，把wp博客迁移到hexo，改用github来托管，毕竟能少一台服务器就少一台吧，不想再割肉了[笑死]。</p><h4 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h4><p>还记得当时搭博客写文章的时候，才刚毕业不久，初生牛犊，看什么都是新鲜的，见啥写啥。几年时间就4、5百多篇了，前两年又没时间去写，<br>现在突然翻出来一看，哎哟，那质量，还真是不忍直视，惨不忍睹啊，还是该扔扔吧</p><p>1，文章导出，登录wp博客后台，找到登录后台 &gt;&gt; 工具 &gt;&gt; 导出，选择导出文章，然后点击“下载导出的文件”。</p><p>2，导出后会得到一个xml文件，如：soilove.WordPress.2020-07-09.xml，我们需要在hexo的机器上安装一个插件“hexo-migrator-wordpress”，用来转换xml中的文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br></pre></td></tr></table></figure><p>3，使用插件转换文章，生成我们需要的“.md”文章文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo migrate /path/soilove.WordPress.2020-07-09.xml</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;前段时间，用了好几年的ECS服务器又到了续费的时候了，说巧也挺巧，正值阿里云618大促，自己又换了手机号。&lt;/p&gt;
&lt;p&gt;总算蹭上了一波新用</summary>
      
    
    
    
    <category term="blog" scheme="https://32e.co/categories/blog/"/>
    
    
    <category term="hexo" scheme="https://32e.co/tags/hexo/"/>
    
    <category term="wordpress" scheme="https://32e.co/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>docker添加http仓库地址</title>
    <link href="https://32e.co/2020/07/09/docker-add-http-addr/"/>
    <id>https://32e.co/2020/07/09/docker-add-http-addr/</id>
    <published>2020-07-09T05:41:44.000Z</published>
    <updated>2020-07-09T05:45:44.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="错误提示"><a href="#错误提示" class="headerlink" title="错误提示"></a>错误提示</h4><p>docker仓库访问地址默认都是https类型的，但我们搭建的私服都是http的，所以用docker访问仓库的时候就会抛出如下错误：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Get https:&#x2F;&#x2F;soilove.cn:5000&#x2F;v2&#x2F;: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><h4 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h4><p>进入/etc/docker目录，新建文件daemon.json，添加仓库地址，然后重启docker即可</p><p>配置如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://soilove.cn:5000&quot;</span>],</span><br><span class="line"> <span class="string">&quot;insecure-registries&quot;</span>: [<span class="string">&quot;https://registry.docker-cn.com&quot;</span>,<span class="string">&quot;http://soilove.cn:5000&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload </span><br><span class="line"></span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;错误提示&quot;&gt;&lt;a href=&quot;#错误提示&quot; class=&quot;headerlink&quot; title=&quot;错误提示&quot;&gt;&lt;/a&gt;错误提示&lt;/h4&gt;&lt;p&gt;docker仓库访问地址默认都是https类型的，但我们搭建的私服都是http的，所以用docker访问仓库的时候就会抛出如</summary>
      
    
    
    
    <category term="docker" scheme="https://32e.co/categories/docker/"/>
    
    
    <category term="docker仓库" scheme="https://32e.co/tags/docker%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>node升级导致node-sass依赖不支持</title>
    <link href="https://32e.co/2020/07/03/node-up-sass-nosupport-error/"/>
    <id>https://32e.co/2020/07/03/node-up-sass-nosupport-error/</id>
    <published>2020-07-03T01:45:14.000Z</published>
    <updated>2021-01-06T07:32:16.133Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>node更新较快，升级之后，出现node-sass依赖不支持的情况，错误提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR &#123;</span><br><span class="line">  err: Error: Node Sass does not yet support your current environment: OS X 64-bit with Unsupported runtime (88)</span><br><span class="line">  For more information on which environments are supported please see:</span><br><span class="line">  https:&#x2F;&#x2F;github.com&#x2F;sass&#x2F;node-sass&#x2F;releases&#x2F;tag&#x2F;v4.14.1</span><br><span class="line">      at module.exports (&#x2F;Users&#x2F;mac&#x2F;xxxxxxxx</span><br><span class="line">      at xxxxxxxxxxxx</span><br></pre></td></tr></table></figure><h4 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h4><p>1，升级node-sass即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm rebuild node-sass</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;node更新较快，升级之后，出现node-sass依赖不支持的情况，错误提示如下：&lt;/p&gt;
&lt;figure class=&quot;highlight</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="node" scheme="https://32e.co/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>更换npm资源地址</title>
    <link href="https://32e.co/2020/07/01/npm-change-registry/"/>
    <id>https://32e.co/2020/07/01/npm-change-registry/</id>
    <published>2020-07-01T04:22:51.000Z</published>
    <updated>2021-01-06T06:35:09.790Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在使用npm工具安装软件的时候，常常由于国内网络环境的缘故，导致访问国外资源站点速度特别慢，甚至网络异常。所以通常，我们会更换npm的资源地址为国内的镜像站点</p><p>常见的npm资源地址访问网络异常提示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info There appears to be trouble with your network connection. Retrying...</span><br><span class="line">error An unexpected error occurred: &quot;https:&#x2F;&#x2F;registry.yarnpkg.com&#x2F;hexo: getaddrinfo ENOTFOUND registry.yarnpkg.com&quot;.</span><br><span class="line">info If you think this is a bug, please open a bug report with the information provided in &quot;&#x2F;Users&#x2F;mac&#x2F;.config&#x2F;yarn&#x2F;global&#x2F;yarn-error.log&quot;.</span><br></pre></td></tr></table></figure><h4 id="更换资源地址"><a href="#更换资源地址" class="headerlink" title="更换资源地址"></a>更换资源地址</h4><p>1，国内一般使用taobao的镜像站点作为资源地址，通过下面的命令可以进行更换：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">npm config <span class="built_in">set</span> disturl https://npm.taobao.org/dist</span><br></pre></td></tr></table></figure><p>2，验证配置，查看配置的registry和disturl地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm get registry</span><br><span class="line">npm get disturl</span><br></pre></td></tr></table></figure><p>3，如果需要还原为默认的地址，执行下面的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config delete registry</span><br><span class="line">npm config delete disturl</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;在使用npm工具安装软件的时候，常常由于国内网络环境的缘故，导致访问国外资源站点速度特别慢，</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="npm" scheme="https://32e.co/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>node版本管理工具”n“的使用</title>
    <link href="https://32e.co/2020/06/28/install-n/"/>
    <id>https://32e.co/2020/06/28/install-n/</id>
    <published>2020-06-28T03:01:22.000Z</published>
    <updated>2021-01-08T07:26:50.562Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>我使用的是mac电脑，所以可直接用brew安装，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install n</span><br></pre></td></tr></table></figure><p>安装完成后，可以通过<code>n --help</code>查看命令帮助。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>1，查看所有可供安装的node版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n ls-remote --all</span><br></pre></td></tr></table></figure><p>2，选择版本安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n 版本</span><br></pre></td></tr></table></figure><p>3，查看已经安装的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n ls</span><br></pre></td></tr></table></figure><p>4，切换版本，使用使用<code>n</code>命令，然后使用<code>上/下</code>键选择版本，回车即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo n</span><br></pre></td></tr></table></figure><p>5，查看当前使用的node版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;p&gt;我使用的是mac电脑，所以可直接用brew安装，命令如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tabl</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="node" scheme="https://32e.co/tags/node/"/>
    
    <category term="版本管理" scheme="https://32e.co/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>mac安装homebrew工具</title>
    <link href="https://32e.co/2020/06/28/mac-install-brew/"/>
    <id>https://32e.co/2020/06/28/mac-install-brew/</id>
    <published>2020-06-28T02:47:21.000Z</published>
    <updated>2021-01-06T05:50:41.668Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Homebrew是mac重要的软件包管理工具，若是不装，那就等于失去了灵魂[摊手]。安装地址：<a href="https://brew.sh/index_zh-cn">brew官网</a></p><p>官网提供的安装方式如下，直接在mac终端执行即可，但是这下载速度，那就有点看不下去了，偶尔还超时中断，毕竟站点在国外，即使翻墙了 效果也不怎么样：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>所以为了解决这个问题，我在网上搜索了其他的安装方式，找到了下面这种比较简单的方法，记录如下。</p><h4 id="国内镜像站点"><a href="#国内镜像站点" class="headerlink" title="国内镜像站点"></a>国内镜像站点</h4><table><thead><tr><th>镜像站</th><th>镜像地址</th></tr></thead><tbody><tr><td>中国科技大学镜像站</td><td><a href="https://mirrors.ustc.edu.cn/brew.git">https://mirrors.ustc.edu.cn/brew.git</a></td></tr><tr><td>阿里云镜像站</td><td><a href="https://mirrors.aliyun.com/homebrew/brew.git">https://mirrors.aliyun.com/homebrew/brew.git</a></td></tr><tr><td>清华大学镜像站</td><td><a href="https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git">https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</a></td></tr></tbody></table><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><p>1，我们选择科技大学的镜像站来安装，首先，先克隆brew到“/usr/local/Homebrew”目录，然后设置软链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://mirrors.ustc.edu.cn/brew.git /usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line">sudo ln -s /usr/<span class="built_in">local</span>/Homebrew/bin/brew /usr/<span class="built_in">local</span>/bin/brew</span><br></pre></td></tr></table></figure><p>2，继续克隆homebrew-core，并设置权限，运行更新命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo git <span class="built_in">clone</span> https://mirrors.ustc.edu.cn/homebrew-core.git /usr/<span class="built_in">local</span>/Homebrew/Library/Taps/homebrew/homebrew-core</span><br><span class="line">sudo chown -R $(whoami) /usr/<span class="built_in">local</span>/Homebrew</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure><p>3，设置环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.zshrc </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.bash_profile</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure><p>4，验证安装情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew doctor</span><br><span class="line">brew -v</span><br></pre></td></tr></table></figure><h4 id="更换brew镜像源"><a href="#更换brew镜像源" class="headerlink" title="更换brew镜像源"></a>更换brew镜像源</h4><p>如果你需要更换brew源，可以通过下面的方式重新设置</p><p>brew源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</span><br></pre></td></tr></table></figure><p>homebrew-core源：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">&quot;<span class="subst">$(brew --repo)</span>/Library/Taps/homebrew/homebrew-core&quot;</span></span><br><span class="line">git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</span><br></pre></td></tr></table></figure><p>注明：本文参考文章-<a href="https://blog.csdn.net/u010458765/article/details/104730037/">国内Homebrew安装太慢 - 简单五步快速安装</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Homebrew是mac重要的软件包管理工具，若是不装，那就等于失去了灵魂[摊手]。安装地址</summary>
      
    
    
    
    <category term="mac" scheme="https://32e.co/categories/mac/"/>
    
    
    <category term="brew" scheme="https://32e.co/tags/brew/"/>
    
  </entry>
  
  <entry>
    <title>mac sshd服务</title>
    <link href="https://32e.co/2020/06/27/shell-mac-sshd/"/>
    <id>https://32e.co/2020/06/27/shell-mac-sshd/</id>
    <published>2020-06-26T23:20:54.000Z</published>
    <updated>2020-06-27T06:06:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>ssh服务是我们进行远程连接时，最常用的服务，不过一般情况下都是在linux上操作，那么mac上的ssh服务如何启动呢？</p><p>启动sshd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure><p>停止sshd服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure><p>检查启动情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo launchctl list | grep ssh</span><br></pre></td></tr></table></figure><p>成功启动输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">－－－－－－－－－－－－－－</span><br><span class="line">- 0 com.openssh.sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ssh服务是我们进行远程连接时，最常用的服务，不过一般情况下都是在linux上操作，那么mac上的ssh服务如何启动呢？&lt;/p&gt;
&lt;p&gt;启动sshd服务：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="mac" scheme="https://32e.co/categories/mac/"/>
    
    
    <category term="ssh" scheme="https://32e.co/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>堆和栈的区别</title>
    <link href="https://32e.co/2020/06/27/read-head-stack/"/>
    <id>https://32e.co/2020/06/27/read-head-stack/</id>
    <published>2020-06-26T21:46:17.000Z</published>
    <updated>2020-06-26T23:09:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>java的内存有两种：堆内存和栈内存，堆和栈都是用来在内存中存放数据的地方，只是各自的运行机制有所不同。</p><h4 id="什么是堆"><a href="#什么是堆" class="headerlink" title="什么是堆"></a>什么是堆</h4><p>堆，是运行时数据区，通过new等指令建立的对象从堆中分配空间，然后通过GC垃圾回收器来进行销毁。</p><p>堆的内存空间大小，是由java自己在运行时动态分配的，不需要我们指定设置。不过，也因此导致对的存取速度相对比较慢。</p><p>下面的案例，存放在堆中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer num = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><h4 id="什么是栈"><a href="#什么是栈" class="headerlink" title="什么是栈"></a>什么是栈</h4><p>栈，主要存放一些基本数据类型的变量和对象的引用，栈的数据是可以共享的。</p><p>基本数量类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">byte，short，int，long，float，double，boolean，char</span><br></pre></td></tr></table></figure><p>栈的内存空间大小，在程序编译时，就指定确认下来。所以栈的存取速度比堆快，而且仅次于寄存器。</p><p>下面的案例，存放在栈中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Integer num = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><h4 id="验证他们的区别？"><a href="#验证他们的区别？" class="headerlink" title="验证他们的区别？"></a>验证他们的区别？</h4><p>堆和栈，我们已经有了对它们了解，也认识了它们的区别，那么我们来看看如何去进行验证？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 堆数据，每个new出来的对象都独立占用一块内存</span></span><br><span class="line">    Integer num_d_1 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">    Integer num_d_2 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 栈数据，存放的是对象的引用</span></span><br><span class="line">    Integer num_z_1 = <span class="number">123</span>;</span><br><span class="line">    Integer num_z_2 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 基本数据类型，存放在栈中</span></span><br><span class="line">    <span class="keyword">int</span> num_j_1 = <span class="keyword">new</span> Integer(<span class="number">123</span>);</span><br><span class="line">    <span class="keyword">int</span> num_j_2 = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;堆对象比较：&quot;</span> + (num_d_1 == num_d_2));</span><br><span class="line">    System.out.println(<span class="string">&quot;栈对象比较：&quot;</span> + (num_z_1 == num_z_2));</span><br><span class="line">    System.out.println(<span class="string">&quot;基本数据类型比较：&quot;</span> + (num_j_1 == num_j_2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">堆对象比较：false</span><br><span class="line">栈对象比较：true</span><br><span class="line">基本数据类型比较：true</span><br></pre></td></tr></table></figure><p>上面的案例，诠释了它们的区别：<br>堆，每个new出来的对象都独立占用一块内存地址，所以两者不相等。<br>栈，因为上一个值存在，而直接指向了相同的内存地址，所以两者相等。<br>基本类型，存放的就直接是值，所以相等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;java的内存有两种：堆内存和栈内存，堆和栈都是用来在内存中存放数据的地方，只是各自的运行机制有所不同。&lt;/p&gt;
&lt;h4 id=&quot;什么是堆&quot;</summary>
      
    
    
    
    <category term="java" scheme="https://32e.co/categories/java/"/>
    
    
    <category term="堆" scheme="https://32e.co/tags/%E5%A0%86/"/>
    
    <category term="栈" scheme="https://32e.co/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>线程通讯</title>
    <link href="https://32e.co/2020/06/22/read-thread-sync/"/>
    <id>https://32e.co/2020/06/22/read-thread-sync/</id>
    <published>2020-06-22T07:07:34.000Z</published>
    <updated>2020-06-26T23:13:36.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>线程通讯的本质，其实就是通知和控制，而在一个线程中，通过十八般武艺去控制其他线程的方法，就是线程通讯实现方式。</p><p>其目的是为了线程之间更好的协作，从而完成一些复杂的工作。</p><h4 id="线程通讯的几种方式"><a href="#线程通讯的几种方式" class="headerlink" title="线程通讯的几种方式"></a>线程通讯的几种方式</h4><p>想要实现线程之间的通讯，方式方法非常的多，下面我们举一个很简单的线程题目，通过几种比较常见的方法去完成这道题目，从而理解线程之间通讯的过程和方法。</p><h5 id="演示案例"><a href="#演示案例" class="headerlink" title="演示案例"></a>演示案例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">假设有2个线程，一个线程仅打印数字，一个线程仅打印字母。而需求是要实现数字和字母交替打印的效果，</span><br><span class="line">并且第一个打印的必须是数字，如：1A2B3C.. 应该如何去实现呢？</span><br></pre></td></tr></table></figure><h5 id="notify-wait方式"><a href="#notify-wait方式" class="headerlink" title="notify + wait方式"></a>notify + wait方式</h5><p>使用notify和wait的时候呢，我们必须先使用关键字synchronized加锁对象，否则是无法使用对象的这两个方法的。</p><p>所以准确的说，应该是synchronized + notify/wait的实现方式。</p><p>主要方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notify(): 随机唤醒一个等待的线程</span><br><span class="line"></span><br><span class="line">notifyAll(): 唤醒所有等待的线程</span><br><span class="line"></span><br><span class="line">wait(): 使当前线程进入等待状态</span><br></pre></td></tr></table></figure><p>演示案例实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyWaitTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个对象，用于synchronized锁，为什么要锁定一个公共对象而不直接用this？因为匿名类的</span></span><br><span class="line">    <span class="comment">// 原因，用this其实是锁定的线程各自的匿名类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 数字优先输出，所以字母先进入等待队列 等待叫醒</span></span><br><span class="line">                    obj.wait();</span><br><span class="line">                    <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                        <span class="comment">// 打印字母</span></span><br><span class="line">                        System.out.print(str);</span><br><span class="line">                        <span class="comment">// 通知其他线程运行</span></span><br><span class="line">                        obj.notify();</span><br><span class="line">                        <span class="comment">// 当前线程让出锁，进入等待队列</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                obj.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                    <span class="comment">// 打印数字</span></span><br><span class="line">                    System.out.print(num);</span><br><span class="line">                    <span class="comment">// 通知其他线程运行</span></span><br><span class="line">                    obj.notify();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">// 当前线程让出锁，进入等待队列</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                obj.notify();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LockSupport方式"><a href="#LockSupport方式" class="headerlink" title="LockSupport方式"></a>LockSupport方式</h5><p>LockSupport是一个工具类，内部所有的方法都是静态的，而其功能，主要就是对线程进行阻塞和唤醒。</p><p>同样的，我们通过LockSupport控制线程的阻塞和唤醒，也是可以轻易完成以上案例要求的。</p><p>主要方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void part(): 阻塞当前线程</span><br><span class="line"></span><br><span class="line">void parkUntil(long deadline): 阻塞当前线程，并指定截止时间(单位:13位的时间戳)</span><br><span class="line"></span><br><span class="line">void parkNanos(long nanos): 阻塞当前线程，并设置超时时间(单位:纳秒，1秒&#x3D;1000000000L纳秒)</span><br><span class="line"></span><br><span class="line">unpark(Thread thread): 唤醒指定线程</span><br></pre></td></tr></table></figure><p>演示案例实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义2个线程，用于分别打印字母和数字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Thread thread4letter = <span class="keyword">null</span>, thread4number = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        thread4letter = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 优先输出数字，字母线程阻塞</span></span><br><span class="line">            LockSupport.park();</span><br><span class="line">            <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                <span class="comment">// 打印字母</span></span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">// 唤醒数字线程</span></span><br><span class="line">                LockSupport.unpark(thread4number);</span><br><span class="line">                <span class="comment">// 阻塞当前线程，可以被unpark唤醒</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">            LockSupport.unpark(thread4number);</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread4number = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                <span class="comment">// 打印数字</span></span><br><span class="line">                System.out.print(num);</span><br><span class="line">                <span class="comment">// 唤醒字母线程</span></span><br><span class="line">                LockSupport.unpark(thread4letter);</span><br><span class="line">                <span class="comment">// 阻塞当前线程，可以被unpark唤醒</span></span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">            LockSupport.unpark(thread4letter);</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 启动2个线程</span></span><br><span class="line">        thread4letter.start();</span><br><span class="line">        thread4number.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Lock-Condition方式"><a href="#Lock-Condition方式" class="headerlink" title="Lock + Condition方式"></a>Lock + Condition方式</h5><p>Lock + Condition来实现这个案例，相对来说是比较优雅的，因为它可以给锁指定多个条件，我们通过操控条件，就可以轻易的在不同场景下完成对锁的控制，从而完成对线程的控制。</p><p>演示案例实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockConditionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个可重入锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义锁的字母线程条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition letterCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义锁的数字线程条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Condition numberCondition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 优先输出数字，字母线程等待</span></span><br><span class="line">                letterCondition.await();</span><br><span class="line">                <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                    <span class="comment">// 打印字母</span></span><br><span class="line">                    System.out.print(str);</span><br><span class="line">                    <span class="comment">// 通知数字线程运行</span></span><br><span class="line">                    numberCondition.signal();</span><br><span class="line">                    <span class="comment">// 本线程等待</span></span><br><span class="line">                    letterCondition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                numberCondition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                    <span class="comment">// 打印数字</span></span><br><span class="line">                    System.out.print(num);</span><br><span class="line">                    <span class="comment">// 通知字母线程运行</span></span><br><span class="line">                    letterCondition.signal();</span><br><span class="line">                    <span class="comment">// 本线程等待</span></span><br><span class="line">                    numberCondition.await();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 保证线程正常关闭</span></span><br><span class="line">                letterCondition.signal();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="volatile方式"><a href="#volatile方式" class="headerlink" title="volatile方式"></a>volatile方式</h5><p>volatile关键字保证了不同线程，对变量进行操作的可见性，以及读和写的原子性，而且它禁止指令重排，所以它还具备有序性。</p><p>因此，我们可以通过这个关键字特性，能够轻易的完成以上案例的要求。</p><p>演示案例实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatileTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义flag，=1 运行数字线程，=2 运行字母线程，优先打印数字，初始设置为1，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=2的时候才打印字母</span></span><br><span class="line">                <span class="keyword">while</span> (flag != <span class="number">2</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">// 设置flag为1，数字</span></span><br><span class="line">                flag = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=1的时候才打印数字</span></span><br><span class="line">                <span class="keyword">while</span> (flag != <span class="number">1</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(num);</span><br><span class="line">                <span class="comment">// 设置flag为1，字母</span></span><br><span class="line">                flag = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="AtomicInteger方式"><a href="#AtomicInteger方式" class="headerlink" title="AtomicInteger方式"></a>AtomicInteger方式</h5><p>我们都知道java并发机制中主要有三个特性需要我们去考虑：原子性、可见性和有序性。</p><p>synchronized关键字可以保证可见性和有序性却无法保证原子性，而AtomicInteger的作用就是为了保证原子性。</p><p>通过它的原子性，我们可以像volatile一样，轻易的完成案例想要的效果，</p><p>演示案例实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义AtomicInteger flag，=1 运行数字线程，=2 运行字母线程，优先打印数字，初始设置为1，</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger flag = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] LETTER = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;A&quot;</span>,<span class="string">&quot;B&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;D&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer[] NUMBER = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (String str : LETTER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=2的时候才打印字母</span></span><br><span class="line">                <span class="keyword">while</span> (flag.get() != <span class="number">2</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(str);</span><br><span class="line">                <span class="comment">// 设置flag为1，数字</span></span><br><span class="line">                flag.set(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;LETTER&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (Integer num : NUMBER)&#123;</span><br><span class="line">                <span class="comment">// 当flag=1的时候才打印数字</span></span><br><span class="line">                <span class="keyword">while</span> (flag.get() != <span class="number">1</span>)&#123;&#125;</span><br><span class="line">                <span class="comment">// 打印</span></span><br><span class="line">                System.out.print(num);</span><br><span class="line">                <span class="comment">// 设置flag为2，字母</span></span><br><span class="line">                flag.set(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;NUMBER&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;线程通讯的本质，其实就是通知和控制，而在一个线程中，通过十八般武艺去控制其他线程的方法，就是线程通讯实现方式。&lt;/p&gt;
&lt;p&gt;其目的是为了线</summary>
      
    
    
    
    <category term="java" scheme="https://32e.co/categories/java/"/>
    
    <category term="线程" scheme="https://32e.co/categories/java/%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="线程通讯" scheme="https://32e.co/tags/%E7%BA%BF%E7%A8%8B%E9%80%9A%E8%AE%AF/"/>
    
    <category term="synchronized" scheme="https://32e.co/tags/synchronized/"/>
    
    <category term="notify" scheme="https://32e.co/tags/notify/"/>
    
    <category term="wait" scheme="https://32e.co/tags/wait/"/>
    
    <category term="volatile" scheme="https://32e.co/tags/volatile/"/>
    
    <category term="LockSupport" scheme="https://32e.co/tags/LockSupport/"/>
    
  </entry>
  
  <entry>
    <title>shell拆分大文件</title>
    <link href="https://32e.co/2020/06/20/shell-split/"/>
    <id>https://32e.co/2020/06/20/shell-split/</id>
    <published>2020-06-20T05:20:21.000Z</published>
    <updated>2020-07-31T03:37:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="shell拆分大文件"><a href="#shell拆分大文件" class="headerlink" title="shell拆分大文件"></a>shell拆分大文件</h4><p>1，按照行数拆分</p><p>语法：split -行数 文件 /路径/前缀</p><p>示例：针对a.log文件进行拆分，每6行拆分一个文件，拆分的文件存放在/tmp下，按照new为前缀生成:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split -6 a.log /tmp/new</span><br></pre></td></tr></table></figure><p>2，按照文件大小拆分</p><p>语法：split -b 大小 文件 /路径/前缀</p><p>示例：针对a.log文件进行拆分，每10m生成一个文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">split -b 10m a.log /tmp/new</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;shell拆分大文件&quot;&gt;&lt;a href=&quot;#shell拆分大文件&quot; class=&quot;headerlink&quot; title=&quot;shell拆分大文件&quot;&gt;&lt;/a&gt;shell拆分大文件&lt;/h4&gt;&lt;p&gt;1，按照行数拆分&lt;/p&gt;
&lt;p&gt;语法：split -行数 文件 /路径/前缀</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="拆分文件" scheme="https://32e.co/tags/%E6%8B%86%E5%88%86%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>grep与cat、sed的结合</title>
    <link href="https://32e.co/2020/06/20/shell-grep-cat-sed/"/>
    <id>https://32e.co/2020/06/20/shell-grep-cat-sed/</id>
    <published>2020-06-20T05:20:21.000Z</published>
    <updated>2020-12-16T08:33:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="grep查找命令"><a href="#grep查找命令" class="headerlink" title="grep查找命令"></a>grep查找命令</h4><p>grep命令是linux系统中，最常用的文件字符串查找命令，职业生涯中，我们几乎离不开它。</p><p>下面是它最简单的用法，不过实际情况下，我们通常会添加很多参数或结合其他的命令去进行使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;&lt;pattern&gt;&quot; &lt;fileName&gt;</span><br></pre></td></tr></table></figure><p>常用命令参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;fileName&gt;: 文件名称，多个文件使用空格隔开</span><br><span class="line">&lt;pattern&gt;: 匹配字符</span><br><span class="line">-n : 显示行号</span><br><span class="line">-i : 忽略字符大小写</span><br><span class="line">-l : 列出符合条件的文件名</span><br><span class="line">-r : 查找所有子目录</span><br><span class="line">-w : 只显示整行全匹配</span><br><span class="line">-o : 只显示匹配的关键字部分</span><br><span class="line">-A &lt;num&gt;: 关键字所在行、以及之后num行</span><br><span class="line">-B &lt;num&gt;: 关键字所在行、以及之前num行</span><br><span class="line">-C &lt;num&gt;: 关键字所在行、以及前后num行</span><br><span class="line">–include&#x3D;&quot;*.txt&quot;: 仅查找指定后缀的文件</span><br><span class="line">&gt; file: 将查询结果保存到文件中</span><br><span class="line">&gt;&gt; file: 将查询结果追加到文件中</span><br></pre></td></tr></table></figure><p>如，查询哪些文件中包含“ok”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&quot;ok&quot;</span> -r -l --include=<span class="string">&quot;*&quot;</span> ./</span><br></pre></td></tr></table></figure><h4 id="grep和cat-tail的结合"><a href="#grep和cat-tail的结合" class="headerlink" title="grep和cat/tail的结合"></a>grep和cat/tail的结合</h4><p>通过grep和cat/tail的结合，我们可以轻易的实现返回文件中的关键字所在行、以及附近指定行的内容，尤其是在我们查询程序日志的时候，用的非常多。</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;fileName&gt; | grep &lt;pattern&gt; &lt;cmd&gt;</span><br><span class="line">或</span><br><span class="line">tail -f &lt;fileName&gt; | grep &lt;pattern&gt; &lt;cmd&gt;</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;fileName&gt;：文件名称，多个文件使用空格隔开</span><br><span class="line">&lt;pattern&gt;：匹配字符</span><br><span class="line">&lt;cmd&gt;：grep命令参数</span><br></pre></td></tr></table></figure><p>cat结合示例：在文件default.log中查找“异常”，并收集前后10行记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat default.log | grep <span class="string">&quot;异常&quot;</span> -C 10</span><br></pre></td></tr></table></figure><p>tail结合示例：在文件default.log中查找“异常”，并进行实时收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f default.log | grep <span class="string">&quot;异常&quot;</span></span><br></pre></td></tr></table></figure><h4 id="grep和sed的结合"><a href="#grep和sed的结合" class="headerlink" title="grep和sed的结合"></a>grep和sed的结合</h4><p>sed命令是用来编辑一个或多个文件、简化对文件反复操作的神器，它和grep的结合令我们的文件操作起来更加的得心应手。<br>我们下面就来看看，它能给我们带来怎样的体验。</p><p>sed语法介绍:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &lt;命令参数&gt; &lt;动作&gt; &lt;文件&gt;</span><br></pre></td></tr></table></figure><p>常用命令参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-i: 直接修改配合的文件内容</span><br><span class="line">-e: 不修改原文件，仅输出，通常可以和“&gt;或&gt;&gt;”命令结合，输出到新文件中</span><br></pre></td></tr></table></figure><p>常用动作说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s: 替换字符，替换指定的字符串，如：sed -i &#39;s&#x2F;匹配字符&#x2F;新字符&#x2F;g&#39; a.txt，末尾的&#x2F;g表示替换所有匹配的字符</span><br><span class="line">a: 新增行，在指定行或指定范围的行的下一行新增内容，如： sed -i &#39;2a\bbb&#39; a.txt</span><br><span class="line">i: 新增行，在指定行或指定范围的行的上一行新增内容，如： sed -i &#39;2i\bbb&#39; a.txt</span><br><span class="line">c: 替换行，替换指定行或指定范围的行的内容，如：sed -i &#39;3,5c\replacestr&#39; a.txt</span><br><span class="line">d: 删除行，删除指定行或指定范围的行，如： sed -i &#39;3d&#39; a.txt </span><br></pre></td></tr></table></figure><p>注: 动作前面的数字表示第几号，或者几行到几行</p><p>扩展案例：<br>查找某个文件中的关键字，并在其下新增一行数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;/关键字/a\新增的一行数据&#x27;</span> a.txt</span><br></pre></td></tr></table></figure><p>grep与sed命令结合的示例:</p><p>上面我们已经了解sed命令的特性，那我们现在就试试，它和grep命令的结合，究竟能撞出怎样的火花？</p><p>下面的命令实现的是：将某个目录以及子目录的所有文件中的关键字“ok”统一替换为“yes”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/ok/yes/g&#x27;</span> `grep <span class="string">&quot;ok&quot;</span> -r -l --include=<span class="string">&quot;*&quot;</span> ./`</span><br></pre></td></tr></table></figure><p>上面 `` 括起来的grep命令，表示将grep命令查询的结果作为操作文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;grep查找命令&quot;&gt;&lt;a href=&quot;#grep查找命令&quot; class=&quot;headerlink&quot; title=&quot;grep查找命令&quot;&gt;&lt;/a&gt;grep查找命令&lt;/h4&gt;&lt;p&gt;grep命令是linux系统中，最常用的文件字符串查找命令，职业生涯中，我们几乎离不开它。&lt;</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="查找关键字" scheme="https://32e.co/tags/%E6%9F%A5%E6%89%BE%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    <category term="关键字替换" scheme="https://32e.co/tags/%E5%85%B3%E9%94%AE%E5%AD%97%E6%9B%BF%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>使用rsync同步服务器数据</title>
    <link href="https://32e.co/2020/06/20/shell-rsync/"/>
    <id>https://32e.co/2020/06/20/shell-rsync/</id>
    <published>2020-06-20T04:34:44.000Z</published>
    <updated>2020-07-27T01:55:48.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>rsync是一个快速和非常灵活的文件拷贝工具，增量拷贝工具。</p><p>rsync的使用方式与SCP差不多，但rsync相对SCP有更多的额外选项。通过rsync –help命令可以查看支持选项类型的完整列表和帮助信息。</p><p>rsync通常使用SSH或RSH与远程通信系统，它不需要设置，也不需要特殊的权限来安装。使用ssh是相对比较安全的，也是推荐的。</p><p>rsync守护进程方式启动是通过指定的选项–daemon来完成的，默认端口为873。rsync必须以root身份运行，因为它必须具有读取和写入数据、日志和锁定文件的权限。</p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>1，下载安装，直接到官网找到你需要下载的版本，复制下载地址，直接到服务器上使用wget下载安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.samba.org/pub/rsync/src/rsync-3.1.2.tar.gz</span><br><span class="line"> </span><br><span class="line">tar -zxvf rsync-3.1.2.tar.gz</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cd</span> rsync-3.1.2</span><br><span class="line"> </span><br><span class="line">./configure</span><br><span class="line"> </span><br><span class="line">make</span><br><span class="line"> </span><br><span class="line">make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>安装完成后，会把rsync命令文件路径输出，注意记下来，一般是/usr/local/bin目录，然后可以查看版本号来检查是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync --version</span><br></pre></td></tr></table></figure><p>2，配置文件</p><p>目前，rsync安装完成后，不会预设一些配置文件，相关的配置文件都需要自己去新建，关于配置文件的官方介绍地址：<br><a href="https://download.samba.org/pub/rsync/rsyncd.conf.html">https://download.samba.org/pub/rsync/rsyncd.conf.html</a></p><p>1),创建相关文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/rsync/conf</span><br><span class="line">mkdir -p /etc/rsync/<span class="built_in">log</span></span><br><span class="line">mkdir -p /etc/rsync/run</span><br></pre></td></tr></table></figure><p>2),创建rsyncd.secrets秘钥文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;root:pwd333&quot;</span> &gt;&gt; /etc/rsync/conf/rsyncd.secrets</span><br><span class="line">chmod 600 /etc/rsync/conf/rsyncd.secrets</span><br></pre></td></tr></table></figure><p>3),创建motd欢迎文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------------rsync-----------------&quot;</span> &gt;&gt; /etc/rsync/conf/rsyncd.motd</span><br></pre></td></tr></table></figure><p>4)，创建rsyncd.conf主配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;uid = nobody</span></span><br><span class="line"><span class="string">gid = nobody</span></span><br><span class="line"><span class="string">use chroot = yes</span></span><br><span class="line"><span class="string">max connections = 100</span></span><br><span class="line"><span class="string">list = yes</span></span><br><span class="line"><span class="string">timeout = 300</span></span><br><span class="line"><span class="string">port = 873</span></span><br><span class="line"><span class="string">log file = /etc/rsync/log/rsync.log</span></span><br><span class="line"><span class="string">pid file = /etc/rsync/run/rsyncd.pid</span></span><br><span class="line"><span class="string">lock file = /etc/rsync/run/rsync.lock</span></span><br><span class="line"><span class="string">motd file = /etc/rsync/conf/rsyncd.motd</span></span><br><span class="line"><span class="string">secrets file = /etc/rsync/conf/rsyncd.secrets</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">[test]</span></span><br><span class="line"><span class="string">path = /data/test</span></span><br><span class="line"><span class="string">comment = test rsync</span></span><br><span class="line"><span class="string">ignore errors </span></span><br><span class="line"><span class="string">auth users = root</span></span><br><span class="line"><span class="string">read only = no</span></span><br><span class="line"><span class="string">hosts allow = ssh.soilove.cn&quot;</span> &gt;&gt; /etc/rsync/conf/rsyncd.conf</span><br></pre></td></tr></table></figure><p>3，启动服务，重新启动，如果pid文件存在会提示错误，所以先删除文件再启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm /etc/rsync/run/rsyncd.pid</span><br><span class="line"> </span><br><span class="line">/usr/<span class="built_in">local</span>/bin/rsync --daemon --config=/etc/rsync/conf/rsyncd.conf</span><br></pre></td></tr></table></figure><p>4，在另一台服务器上也按照同样的步骤安装好rsync即可</p><h4 id="数据拷贝"><a href="#数据拷贝" class="headerlink" title="数据拷贝"></a>数据拷贝</h4><p>1，从远程服务器拉取数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -vzrtopg --progress root@soilove.cn::<span class="built_in">test</span> /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@izuf65v28cpic4oqb2e45ez home]# rsync -vzrtopg –progress root@soilove.cn::test &#x2F;home&#x2F;test</span><br><span class="line">—————–rsync—————–</span><br><span class="line"></span><br><span class="line">Password:</span><br><span class="line">receiving incremental file list</span><br><span class="line">.&#x2F;</span><br><span class="line">a.txt</span><br><span class="line">2 100% 1.95kB&#x2F;s 0:00:00 (xfr#1, to-chk&#x3D;0&#x2F;2)</span><br><span class="line"></span><br><span class="line">sent 50 bytes received 119 bytes 37.56 bytes&#x2F;sec</span><br><span class="line">total size is 2 speedup is 0.01</span><br></pre></td></tr></table></figure><p>2，拉取数据时指定忽略文件,这里的指定的忽略文件是配置的/data/test的相对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -vzrtopg --progress --exclude=cc.txt root@soilove.cn::<span class="built_in">test</span> /home/<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>3，推送数据到远程服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -vzrtopg --progress /home/<span class="built_in">test</span>/* root@soilove.cn::<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>官方文档：</p><p><a href="https://rsync.samba.org/">https://rsync.samba.org</a><br><a href="https://download.samba.org/pub/rsync/rsyncd.conf.html">https://download.samba.org/pub/rsync/rsyncd.conf.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;rsync是一个快速和非常灵活的文件拷贝工具，增量拷贝工具。&lt;/p&gt;
&lt;p&gt;rsync的使用方式与SCP差不多，但rsync相对SCP有更多</summary>
      
    
    
    
    <category term="linux" scheme="https://32e.co/categories/linux/"/>
    
    
    <category term="工具" scheme="https://32e.co/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="数据同步" scheme="https://32e.co/tags/%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5/"/>
    
    <category term="rsync" scheme="https://32e.co/tags/rsync/"/>
    
  </entry>
  
  <entry>
    <title>arthas-通过cloud toolkit插件实现快速部署和远程诊断</title>
    <link href="https://32e.co/2020/06/19/arthas-cloud-toolkit/"/>
    <id>https://32e.co/2020/06/19/arthas-cloud-toolkit/</id>
    <published>2020-06-19T12:23:59.000Z</published>
    <updated>2020-12-29T10:27:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Cloud Toolkit是集开发、测试、诊断、部署为一体的免费IDE插件，能帮助开发者实现一键式部署和代码诊断，是提升效率和降低开发成本的利好插件。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;此插件还整合了其他好用的功能，如docker打包等，不过并不是我们今天的主题，本文主要讲的是 如何通过它快速部署应用，以及使用arthas对目标服务器上的java应用进行诊断。</p><h4 id="插件安装以及SSH配置"><a href="#插件安装以及SSH配置" class="headerlink" title="插件安装以及SSH配置"></a>插件安装以及SSH配置</h4><p>1，安装插件</p><p>插件安装很容易，直接在插件市场里即可找到安装，我这里使用的IDE是intelliJ IDEA，插件安装路径：Preferences &gt;&gt; Plugins &gt;&gt; 搜索： Alibaba Cloud Toolkit</p><p>2，配置SSH服务器</p><p>插件安装后，我们可以在IDE的底部工具栏看到选项卡：“Alibaba Cloud View”，直接打开它，然后选择：“Host”，添加我们的机器即可。</p><h4 id="快速部署java应用"><a href="#快速部署java应用" class="headerlink" title="快速部署java应用"></a>快速部署java应用</h4><p>之前，为了让我的程序走 CI/CD 发布流程，我选择了阿里云的云效流水线，功能很好用，配置也简单，详情可见：<a href="https://32e.co/2020/03/14/ali-java-flow/">阿里云-云效流水线实践CI/CD</a>。</p><p>不过，当我体验了这个插件之后，我就暂时停止了流水线的触发开关，改用这个插件来发布了，因为是自己的小项目，所以这样发布，更加灵活可控。</p><p>现在，我们就来看看，如何通过它快速的部署我们java应用吧：</p><p>1，选择部署方式，选中项目，右键呼出菜单，然后选择：Alibaba Cloud &gt;&gt; Deploy to Host</p><p>示例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/deploy01-1.png" alt="选择部署方式"></p><p>2，配置打包参数：</p><ul><li>选择Upload File方式，并选择打包生成的jar的module目录</li><li>配置maven打包命令，通常将maven goal设置为：clean install</li><li>添加目标服务器，点击右边👉的加号可以选择之前添加的机器</li><li>设置上传文件的目标目录，即上传后的jar保存目录</li><li>设置项目的启动脚本命令，脚本需要提前放到服务器上，具体命令如何编写可参考文章：<a href="https://32e.co/2019/05/01/shell-java-jar-manage/">java jar维护脚本</a></li></ul><p>示例：<br><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/deploy02.png" alt="配置打包参数"></p><p>3，部署测试，配置完成后，直接运行即可，插件会自动打包并上传到服务器，自动执行启动命令完成部署，效果如下：</p><p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/deploy03.png"></p><h4 id="使用arthas功能诊断"><a href="#使用arthas功能诊断" class="headerlink" title="使用arthas功能诊断"></a>使用arthas功能诊断</h4><p>1，打开cloud toolkit菜单，在“host”里，找到刚才添加的机器，然后点击：More &gt;&gt; Diagnostic，如下图所示：</p><p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/kit01.png"></p><p>2，选择Diagnostic后，插件会通过ssh连接到目标机器上，并自动下载arthas，以及自动运行java -jar arthas-boot.jar启动诊断程序，如下图所示：</p><p><img src="https://soilove.oss-cn-hangzhou.aliyuncs.com/32e/arthas/kit02.png"></p><p>3，然后，我们只需要选择找罗列的java进程的ID，即可进入arthas面板，开始我们的诊断之旅了。插件的这个功能能 自动连接机器、下载、并启动诊断程序，可以给我们节省很多时间，作为懒人，我表示这很符合我的口味！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Cloud Toolkit是集开发、测试、诊断、部署为一体的免费IDE插件，能帮助开发者实现</summary>
      
    
    
    
    <category term="ci/cd" scheme="https://32e.co/categories/ci-cd/"/>
    
    <category term="arthas" scheme="https://32e.co/categories/arthas/"/>
    
    
    <category term="ci/cd" scheme="https://32e.co/tags/ci-cd/"/>
    
    <category term="toolkit" scheme="https://32e.co/tags/toolkit/"/>
    
    <category term="远程诊断" scheme="https://32e.co/tags/%E8%BF%9C%E7%A8%8B%E8%AF%8A%E6%96%AD/"/>
    
    <category term="arthas" scheme="https://32e.co/tags/arthas/"/>
    
  </entry>
  
</feed>
